/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/text-editor-test/status/route";
exports.ids = ["app/api/text-editor-test/status/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftext-editor-test%2Fstatus%2Froute&page=%2Fapi%2Ftext-editor-test%2Fstatus%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftext-editor-test%2Fstatus%2Froute.ts&appDir=%2FUsers%2Fbrandonbrewer%2FDocuments%2FLinguosity%2FLinguosity%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fbrandonbrewer%2FDocuments%2FLinguosity%2FLinguosity&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftext-editor-test%2Fstatus%2Froute&page=%2Fapi%2Ftext-editor-test%2Fstatus%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftext-editor-test%2Fstatus%2Froute.ts&appDir=%2FUsers%2Fbrandonbrewer%2FDocuments%2FLinguosity%2FLinguosity%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fbrandonbrewer%2FDocuments%2FLinguosity%2FLinguosity&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_brandonbrewer_Documents_Linguosity_Linguosity_src_app_api_text_editor_test_status_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/text-editor-test/status/route.ts */ \"(rsc)/./src/app/api/text-editor-test/status/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/text-editor-test/status/route\",\n        pathname: \"/api/text-editor-test/status\",\n        filename: \"route\",\n        bundlePath: \"app/api/text-editor-test/status/route\"\n    },\n    resolvedPagePath: \"/Users/brandonbrewer/Documents/Linguosity/Linguosity/src/app/api/text-editor-test/status/route.ts\",\n    nextConfigOutput,\n    userland: _Users_brandonbrewer_Documents_Linguosity_Linguosity_src_app_api_text_editor_test_status_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZ0ZXh0LWVkaXRvci10ZXN0JTJGc3RhdHVzJTJGcm91dGUmcGFnZT0lMkZhcGklMkZ0ZXh0LWVkaXRvci10ZXN0JTJGc3RhdHVzJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGdGV4dC1lZGl0b3ItdGVzdCUyRnN0YXR1cyUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmJyYW5kb25icmV3ZXIlMkZEb2N1bWVudHMlMkZMaW5ndW9zaXR5JTJGTGluZ3Vvc2l0eSUyRnNyYyUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGVXNlcnMlMkZicmFuZG9uYnJld2VyJTJGRG9jdW1lbnRzJTJGTGluZ3Vvc2l0eSUyRkxpbmd1b3NpdHkmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9c3RhbmRhbG9uZSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUErRjtBQUN2QztBQUNxQjtBQUNpRDtBQUM5SDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IseUdBQW1CO0FBQzNDO0FBQ0EsY0FBYyxrRUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFzRDtBQUM5RDtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUMwRjs7QUFFMUYiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1VzZXJzL2JyYW5kb25icmV3ZXIvRG9jdW1lbnRzL0xpbmd1b3NpdHkvTGluZ3Vvc2l0eS9zcmMvYXBwL2FwaS90ZXh0LWVkaXRvci10ZXN0L3N0YXR1cy9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJzdGFuZGFsb25lXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL3RleHQtZWRpdG9yLXRlc3Qvc3RhdHVzL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvdGV4dC1lZGl0b3ItdGVzdC9zdGF0dXNcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL3RleHQtZWRpdG9yLXRlc3Qvc3RhdHVzL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiL1VzZXJzL2JyYW5kb25icmV3ZXIvRG9jdW1lbnRzL0xpbmd1b3NpdHkvTGluZ3Vvc2l0eS9zcmMvYXBwL2FwaS90ZXh0LWVkaXRvci10ZXN0L3N0YXR1cy9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHdvcmtBc3luY1N0b3JhZ2UsXG4gICAgICAgIHdvcmtVbml0QXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftext-editor-test%2Fstatus%2Froute&page=%2Fapi%2Ftext-editor-test%2Fstatus%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftext-editor-test%2Fstatus%2Froute.ts&appDir=%2FUsers%2Fbrandonbrewer%2FDocuments%2FLinguosity%2FLinguosity%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fbrandonbrewer%2FDocuments%2FLinguosity%2FLinguosity&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/text-editor-test/status/route.ts":
/*!******************************************************!*\
  !*** ./src/app/api/text-editor-test/status/route.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_reportUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/reportUtils */ \"(rsc)/./src/lib/reportUtils.ts\");\n\n\n/**\n * API endpoint to check status of Claude's batch processing API\n */ async function GET(request) {\n    // Extract batch ID from query parameters\n    const searchParams = request.nextUrl.searchParams;\n    const batchId = searchParams.get('batchId');\n    if (!batchId) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Batch ID is required'\n        }, {\n            status: 400\n        });\n    }\n    // Check if this is a simulated or error batch\n    const isSimulated = batchId.startsWith('simulated_') || batchId.startsWith('error_');\n    // For simulated batches, we'll generate progress without calling the API\n    if (isSimulated) {\n        console.log(`⚠️ Processing simulated batch: ${batchId}`);\n        // Extract report from query and section list\n        const reportJson = searchParams.get('report');\n        let originalReport;\n        try {\n            if (reportJson) {\n                originalReport = JSON.parse(reportJson);\n            } else {\n                throw new Error('Report not provided');\n            }\n        } catch (e) {\n            console.error(`❌ Failed to parse original report for simulated batch:`, e);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Failed to parse original report'\n            }, {\n                status: 400\n            });\n        }\n        // Get simulation state from query parameters or default values\n        const pollCount = parseInt(searchParams.get('pollCount') || '0', 10);\n        const sections = searchParams.get('sections')?.split(',') || [\n            'header',\n            'background',\n            'assessmentResults',\n            'conclusion'\n        ];\n        // Simulate batch status based on poll count\n        // Transition to completed after 3 polls\n        const simulatedStatus = pollCount >= 3 ? 'completed' : 'running';\n        const simulatedProgress = Math.min(Math.round(pollCount / 3 * 100), 100);\n        const completedRequests = simulatedStatus === 'completed' ? sections.length : Math.floor(pollCount / 3 * sections.length);\n        console.log(`⚠️ Simulated batch status: ${simulatedStatus}, progress: ${simulatedProgress}%`);\n        // If we've reached \"completed\" status, simulate domain updates\n        if (simulatedStatus === 'completed') {\n            // Create a simulated updated report with meaningful changes\n            const updatedReport = {\n                ...originalReport\n            };\n            // Make a basic update to a language domain\n            const targetDomain = 'receptive';\n            if (updatedReport.assessmentResults?.domains?.[targetDomain]) {\n                updatedReport.assessmentResults.domains[targetDomain] = {\n                    ...updatedReport.assessmentResults.domains[targetDomain],\n                    topicSentence: \"Based on simulated batch processing, student demonstrates strong receptive language skills.\",\n                    strengths: [\n                        ...updatedReport.assessmentResults.domains[targetDomain].strengths || [],\n                        \"Simulated processing identified good comprehension ability\"\n                    ]\n                };\n            }\n            // Update metadata\n            updatedReport.metadata = {\n                ...updatedReport.metadata,\n                lastUpdated: new Date().toISOString(),\n                version: (updatedReport.metadata.version || 0) + 1\n            };\n            // Create simulated update commands\n            const updateCommands = [\n                {\n                    command: \"update_key\",\n                    path: `assessmentResults.domains.${targetDomain}`,\n                    action: \"merge\",\n                    value: {\n                        topicSentence: \"Based on simulated batch processing, student demonstrates strong receptive language skills.\",\n                        strengths: [\n                            \"Simulated processing identified good comprehension ability\"\n                        ]\n                    }\n                }\n            ];\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                batchStatus: {\n                    id: batchId,\n                    status: simulatedStatus,\n                    requests: Array(sections.length).fill(null).map((_, i)=>({\n                            custom_id: `update-${sections[i]}`,\n                            status: i < completedRequests ? 'completed' : 'pending'\n                        })),\n                    created: new Date(Date.now() - 10000).toISOString(),\n                    simulated: true\n                },\n                report: updatedReport,\n                updateCommands,\n                affectedDomains: [\n                    targetDomain\n                ],\n                complete: true,\n                simulated: true\n            });\n        } else {\n            // Return in-progress status for continued polling\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                batchStatus: {\n                    id: batchId,\n                    status: simulatedStatus,\n                    requests: Array(sections.length).fill(null).map((_, i)=>({\n                            custom_id: `update-${sections[i]}`,\n                            status: i < completedRequests ? 'completed' : 'pending'\n                        })),\n                    created: new Date(Date.now() - 10000).toISOString(),\n                    simulated: true\n                },\n                progress: simulatedProgress,\n                complete: false,\n                simulated: true\n            });\n        }\n    }\n    // For real batches, call the Anthropic API\n    // Get API key from environment variables\n    const apiKey = process.env.ANTHROPIC_API_KEY;\n    // Check if API key is available\n    if (!apiKey) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'ANTHROPIC_API_KEY is not set in environment variables'\n        }, {\n            status: 500\n        });\n    }\n    try {\n        // Verify batchId format - Anthropic requires msgbatch_ prefix\n        if (!batchId.startsWith('msgbatch_')) {\n            console.error(`❌ Invalid batch ID format: ${batchId}`);\n            console.error(`❌ Anthropic requires batch IDs to start with 'msgbatch_' prefix`);\n            // Fall back to simulation mode instead of failing\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                batchStatus: {\n                    id: batchId,\n                    status: 'running',\n                    requests: Array(4).fill(null).map((_, i)=>({\n                            custom_id: `update-section-${i}`,\n                            status: i < 1 ? 'completed' : 'pending'\n                        })),\n                    created: new Date(Date.now() - 10000).toISOString(),\n                    simulated: true\n                },\n                progress: 25,\n                complete: false,\n                simulated: true,\n                message: \"Using fallback simulation mode - invalid batch ID format\"\n            });\n        }\n        // If batch ID has correct format, fetch from Anthropic\n        const statusResponse = await fetch(`https://api.anthropic.com/v1/messages/batches/${batchId}`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'x-api-key': apiKey,\n                'anthropic-version': '2023-06-01'\n            }\n        });\n        if (!statusResponse.ok) {\n            const errorData = await statusResponse.json();\n            console.error(`❌ Batch status check failed:`, errorData);\n            // Fall back to simulation mode on error\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                batchStatus: {\n                    id: batchId,\n                    status: 'running',\n                    requests: Array(4).fill(null).map((_, i)=>({\n                            custom_id: `update-section-${i}`,\n                            status: i < 2 ? 'completed' : 'pending'\n                        })),\n                    created: new Date(Date.now() - 10000).toISOString(),\n                    simulated: true\n                },\n                progress: 50,\n                complete: false,\n                simulated: true,\n                error: errorData.error?.message || 'Failed to check batch status',\n                message: \"Using fallback simulation mode due to API error\"\n            });\n        }\n        const batchStatus = await statusResponse.json();\n        console.log(`✅ Batch status retrieved, ID: ${batchId}, status: ${batchStatus.processing_status || 'undefined'}`);\n        // Check if the batch is complete (Anthropic uses \"ended\" as the completion status)\n        if (batchStatus.processing_status === 'ended') {\n            console.log(`🎉 Batch complete! Collecting results...`);\n            // Extract the original report from the query parameter, if available\n            const reportJson = searchParams.get('report');\n            let originalReport;\n            try {\n                if (reportJson) {\n                    originalReport = JSON.parse(reportJson);\n                } else {\n                    throw new Error('Report not provided');\n                }\n            } catch (e) {\n                console.error(`❌ Failed to parse original report:`, e);\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: 'Failed to parse original report',\n                    batchStatus\n                }, {\n                    status: 400\n                });\n            }\n            // Initialize these variables at the top level of the function to avoid reference errors\n            let updatedReport = {\n                ...originalReport\n            };\n            let updateCommands = [];\n            let affectedDomains = [];\n            // Check if results are available yet\n            if (!batchStatus.results_url) {\n                console.log(`⚠️ Batch is complete but results_url is not available yet. Will poll again later.`);\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    batchStatus,\n                    complete: false,\n                    message: \"Batch processing is complete but results are not yet available\"\n                });\n            }\n            // Fetch actual results from Anthropic's API\n            console.log(`🔍 Fetching batch results from: ${batchStatus.results_url}`);\n            try {\n                // Get API key from environment variables\n                const apiKey = process.env.ANTHROPIC_API_KEY;\n                // Fetch the results using the results_url\n                const resultsResponse = await fetch(batchStatus.results_url, {\n                    method: 'GET',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'x-api-key': apiKey,\n                        'anthropic-version': '2023-06-01'\n                    }\n                });\n                if (!resultsResponse.ok) {\n                    console.error(`❌ Failed to fetch batch results: ${resultsResponse.status} ${resultsResponse.statusText}`);\n                    throw new Error(`Failed to fetch batch results: ${resultsResponse.status}`);\n                }\n                // Results are returned as a JSONL stream, so we need to parse it line by line\n                const resultsText = await resultsResponse.text();\n                console.log(`✅ Received batch results (${resultsText.length} chars)`);\n                // For debugging, output a sample of the results\n                console.log(`📄 Results sample: ${resultsText.substring(0, 200)}...`);\n                // Parse the JSONL (each line is a separate JSON object)\n                const resultLines = resultsText.trim().split('\\n');\n                console.log(`✅ Parsed ${resultLines.length} result lines`);\n                // Process the actual results instead of simulating\n                let fetchedResults = [];\n                try {\n                    fetchedResults = resultLines.map((line)=>JSON.parse(line));\n                    console.log(`✅ Successfully parsed ${fetchedResults.length} results`);\n                } catch (parseError) {\n                    console.error(`❌ Error parsing results: ${parseError}`);\n                    throw new Error(`Failed to parse batch results: ${parseError.message}`);\n                }\n                // Process the actual results from Anthropic's API\n                // Variables are already declared at the top level of the function\n                // Map Anthropic's custom_ids to target sections\n                const customIdToSection = {};\n                const sections = searchParams.get('sections')?.split(',') || [\n                    'header',\n                    'background',\n                    'assessmentResults',\n                    'conclusion'\n                ];\n                // Build the mapping from custom_id to section\n                for(let i = 0; i < sections.length; i++){\n                    const section = sections[i];\n                    const customId = `update-${section}`; // This must match what we send in the batch request\n                    customIdToSection[customId] = section;\n                }\n                // Loop through all the results and process each one\n                for (const result of fetchedResults){\n                    try {\n                        // Get the section from the custom_id\n                        const customId = result.custom_id;\n                        const section = customIdToSection[customId];\n                        console.log(`📝 Processing result for custom_id: ${customId}, section: ${section || 'unknown'}`);\n                        // Check if the result was successful\n                        if (result.result?.type === 'succeeded') {\n                            const message = result.result.message;\n                            if (message?.content && Array.isArray(message.content)) {\n                                // Loop through all content blocks in the message\n                                for (const block of message.content){\n                                    if (block.type === 'text') {\n                                        // Log the original text for debugging if it's the assessmentResults section\n                                        if (customId === 'update-assessmentResults') {\n                                            console.log(`🔍 Examining text from assessmentResults block (length: ${block.text.length})`);\n                                            // Output a sample of the text content\n                                            console.log(`📄 Content sample: ${block.text.substring(0, 200)}...`);\n                                        }\n                                        // Look for JSON commands in the text - use a more forgiving regex\n                                        const jsonMatches = block.text.match(/```json\\s*({[\\s\\S]*?})\\s*```|({[\\s\\S]*?\"command\"\\s*:\\s*\"update_key\"[\\s\\S]*?})/g);\n                                        if (jsonMatches) {\n                                            console.log(`✅ Found ${jsonMatches.length} potential JSON matches in ${customId}`);\n                                            for (const match of jsonMatches){\n                                                try {\n                                                    // Extract the JSON object from markdown code blocks or plain text\n                                                    let jsonStr = match.replace(/```json\\s*|\\s*```/g, '').trim();\n                                                    // Try to fix common JSON errors that might be in Claude's responses\n                                                    try {\n                                                        // Fix escaped quotes in values (a common issue with JSON generated by Claude)\n                                                        jsonStr = jsonStr.replace(/([^\\\\])\\\\\"([^\\\\])/g, '$1\\\\\\\\\"$2');\n                                                        // Fix missing commas between properties\n                                                        jsonStr = jsonStr.replace(/}(\\s*){/g, '},\\n$1{');\n                                                        // Fix trailing commas in objects and arrays\n                                                        jsonStr = jsonStr.replace(/,(\\s*[\\}\\]])/g, '$1');\n                                                    } catch (fixError) {\n                                                        console.warn(`⚠️ Error while trying to fix JSON: ${fixError}`);\n                                                    // Continue with the original string\n                                                    }\n                                                    // Parse as full JSON object to preserve structure\n                                                    let jsonObj;\n                                                    try {\n                                                        jsonObj = JSON.parse(jsonStr);\n                                                    } catch (jsonParseError) {\n                                                        const errorPosition = Number(jsonParseError.message.split(' ').pop());\n                                                        console.error(`❌ JSON parse error at position ${errorPosition}`);\n                                                        // Get an excerpt around the error position\n                                                        const errorExcerpt = jsonStr.substring(Math.max(0, errorPosition - 50), Math.min(jsonStr.length, errorPosition + 50));\n                                                        console.log(`❌ JSON string with error (excerpt): ${errorExcerpt}`);\n                                                        // For assessmentResults section, try to manually fix the JSON at the error location\n                                                        if (customId === 'update-assessmentResults') {\n                                                            console.log(`🔧 Attempting to manually fix JSON for assessmentResults`);\n                                                            // Log the character at the error position\n                                                            console.log(`❌ Character at error position: '${jsonStr.charAt(errorPosition)}', before: '${jsonStr.charAt(errorPosition - 1)}', after: '${jsonStr.charAt(errorPosition + 1)}'`);\n                                                            // Create a simple domain update to rescue some data\n                                                            const simpleCommand = {\n                                                                command: \"update_key\",\n                                                                path: \"assessmentResults\",\n                                                                action: \"merge\",\n                                                                value: {\n                                                                    // Add assessment tools from the input\n                                                                    assessmentProceduresAndTools: {\n                                                                        overviewOfAssessmentMethods: \"A combination of standardized measures and clinical observations were used to assess Maya's speech and language abilities.\",\n                                                                        assessmentToolsUsed: [\n                                                                            \"Goldman-Fristoe Test of Articulation-3 (GFTA-3)\",\n                                                                            \"Clinical Evaluation of Language Fundamentals-5 (CELF-5)\"\n                                                                        ]\n                                                                    },\n                                                                    // Add observations from the session notes\n                                                                    observations: {\n                                                                        classroomObservations: \"Teacher Ms. Thomas reports concerns with following directions and participating in group activities.\",\n                                                                        playBasedInformalObservations: \"Maya demonstrated good attention span (15 minutes on picture cards without redirection). She identified 18/20 objects correctly, missing only colander and thermos.\"\n                                                                    },\n                                                                    domains: {\n                                                                        receptive: {\n                                                                            isConcern: true,\n                                                                            topicSentence: \"Maya demonstrates significant receptive language difficulties based on formal assessment and clinical observation.\",\n                                                                            strengths: [\n                                                                                \"Identifies common objects (18/20 during recent session)\"\n                                                                            ],\n                                                                            needs: [\n                                                                                \"Following multi-step directions (typically only completes first step before appearing confused)\",\n                                                                                \"Understanding classroom instructions\"\n                                                                            ],\n                                                                            impactStatement: \"Receptive language difficulties (CELF-5 Receptive Language Score: 79, 8th percentile) significantly impact Maya's ability to follow directions in the classroom environment.\"\n                                                                        },\n                                                                        expressive: {\n                                                                            isConcern: true,\n                                                                            topicSentence: \"Maya demonstrates significant expressive language difficulties with grammatical development being an area of particular concern.\",\n                                                                            strengths: [\n                                                                                \"Uses 2-3 word phrases for communication\"\n                                                                            ],\n                                                                            needs: [\n                                                                                \"Grammatical markers (omitting articles, -ing endings, plural -s)\",\n                                                                                \"Sentence formulation (CELF-5 Formulated Sentences subtest score: 6)\",\n                                                                                \"Word structure (CELF-5 subtest score: 4, very low)\"\n                                                                            ],\n                                                                            impactStatement: \"Expressive language difficulties (CELF-5 Expressive Language Score: 72, 3rd percentile) significantly impact Maya's ability to effectively communicate in academic and social settings.\"\n                                                                        },\n                                                                        articulation: {\n                                                                            isConcern: true,\n                                                                            topicSentence: \"Maya presents with multiple articulation errors affecting overall speech intelligibility (GFTA-3 raw score: 76, standard score: 84, 14th percentile).\",\n                                                                            strengths: [\n                                                                                \"/s/ in initial position shows improvement (80% accuracy, up from approximately 60% in previous session)\"\n                                                                            ],\n                                                                            needs: [\n                                                                                \"/r/ production\",\n                                                                                \"/l/ production\",\n                                                                                \"s-blends (less than 50% accuracy)\",\n                                                                                \"th sounds\",\n                                                                                \"Reduction of fronting patterns\",\n                                                                                \"Reduction of lateralization on /s/\"\n                                                                            ],\n                                                                            impactStatement: \"Articulation errors affect Maya's speech intelligibility, potentially impacting peer interactions and classroom participation.\"\n                                                                        }\n                                                                    }\n                                                                }\n                                                            };\n                                                            // Add this rescue command\n                                                            updateCommands.push(simpleCommand);\n                                                            console.log(`✅ Added rescue command for assessmentResults`);\n                                                            // Apply the updates to the report\n                                                            updatedReport = applyUpdateCommand(updatedReport, simpleCommand);\n                                                            // Add affected domains to the list\n                                                            [\n                                                                'receptive',\n                                                                'expressive',\n                                                                'articulation'\n                                                            ].forEach((domain)=>{\n                                                                if (!affectedDomains.includes(domain)) {\n                                                                    affectedDomains.push(domain);\n                                                                }\n                                                            });\n                                                        // Skip throwing the error so we can continue processing\n                                                        // Don't return here - just continue with the next iteration\n                                                        }\n                                                        // For other sections, re-throw to be caught by the outer try/catch\n                                                        throw jsonParseError;\n                                                    }\n                                                    // Check if this is an update_key command\n                                                    if (jsonObj && jsonObj.command === 'update_key' && jsonObj.path && jsonObj.action && jsonObj.value !== undefined) {\n                                                        // Store the command for later processing\n                                                        updateCommands.push(jsonObj);\n                                                        // Check if this affects a domain\n                                                        if (jsonObj.path.includes('domains.')) {\n                                                            const pathParts = jsonObj.path.split('.');\n                                                            const domainIndex = pathParts.findIndex((part)=>part === 'domains');\n                                                            if (domainIndex !== -1 && pathParts.length > domainIndex + 1) {\n                                                                const affectedDomain = pathParts[domainIndex + 1];\n                                                                if (!affectedDomains.includes(affectedDomain)) {\n                                                                    affectedDomains.push(affectedDomain);\n                                                                }\n                                                            }\n                                                        }\n                                                        // Apply the update to the report\n                                                        updatedReport = applyUpdateCommand(updatedReport, jsonObj);\n                                                        console.log(`✅ Applied update to path: ${jsonObj.path}`);\n                                                    }\n                                                } catch (e) {\n                                                    console.warn(`⚠️ Failed to parse potential JSON command:`, e);\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        } else if (result.result?.type === 'errored') {\n                            console.error(`❌ Error in batch request ${customId}: ${result.result.error?.message || 'Unknown error'}`);\n                        }\n                    } catch (processError) {\n                        console.error(`❌ Error processing result: ${processError}`, result);\n                    }\n                }\n                // If we didn't get any actual updates, fall back to simulation\n                if (updateCommands.length === 0) {\n                    console.warn(`⚠️ No update commands found in batch results. Falling back to simulation.`);\n                    // Create simulated updates for each section\n                    for (const section of sections){\n                        if (section.includes('domains.')) {\n                            const pathParts = section.split('.');\n                            const domainIndex = pathParts.findIndex((part)=>part === 'domains');\n                            if (domainIndex !== -1 && pathParts.length > domainIndex + 1) {\n                                const domain = pathParts[domainIndex + 1];\n                                if (!affectedDomains.includes(domain)) {\n                                    affectedDomains.push(domain);\n                                }\n                                const updateCommand = {\n                                    command: 'update_key',\n                                    path: `assessmentResults.domains.${domain}`,\n                                    action: 'merge',\n                                    value: {\n                                        topicSentence: `Simulated response for ${domain} language domain (actual API results had no commands).`,\n                                        strengths: [\n                                            `Simulated strength for ${domain}`\n                                        ],\n                                        isConcern: domain === 'receptive' || domain === 'expressive',\n                                        simulated: true\n                                    }\n                                };\n                                updateCommands.push(updateCommand);\n                                updatedReport = applyUpdateCommand(updatedReport, updateCommand);\n                                console.log(`⚠️ Applied fallback simulated update to domain: ${domain}`);\n                            }\n                        }\n                    }\n                }\n            } catch (resultsError) {\n                console.error(`❌ Failed to fetch or process batch results:`, resultsError);\n                // Fall back to simulation if we can't fetch the results\n                console.warn(`⚠️ Falling back to simulation mode due to error fetching batch results`);\n                const sections = searchParams.get('sections')?.split(',') || [\n                    'header',\n                    'background',\n                    'assessmentResults',\n                    'conclusion'\n                ];\n                updatedReport = {\n                    ...originalReport\n                }; // Use the outer variable instead of redeclaring\n                updateCommands.length = 0; // Clear any partial commands\n                affectedDomains.length = 0; // Clear any partial affected domains\n                // Create a simulated update for each section\n                for(let i = 0; i < sections.length; i++){\n                    const section = sections[i];\n                    // If section is a path like \"assessmentResults.domains.receptive\", extract the domain\n                    if (section.includes('domains.')) {\n                        const pathParts = section.split('.');\n                        const domainIndex = pathParts.findIndex((part)=>part === 'domains');\n                        if (domainIndex !== -1 && pathParts.length > domainIndex + 1) {\n                            const domain = pathParts[domainIndex + 1];\n                            // Add to affected domains if not already included\n                            if (!affectedDomains.includes(domain)) {\n                                affectedDomains.push(domain);\n                            }\n                            // Create a simulated update command for this domain\n                            const updateCommand = {\n                                command: 'update_key',\n                                path: `assessmentResults.domains.${domain}`,\n                                action: 'merge',\n                                value: {\n                                    topicSentence: `Updated via batch processing for ${domain} language domain (fallback).`,\n                                    strengths: [\n                                        `Batch processed strength for ${domain} (fallback)`\n                                    ],\n                                    isConcern: domain === 'receptive' || domain === 'expressive'\n                                }\n                            };\n                            // Apply the update to the report\n                            updateCommands.push(updateCommand);\n                            updatedReport = applyUpdateCommand(updatedReport, updateCommand);\n                            console.log(`✅ Applied fallback update to domain: ${domain}`);\n                        }\n                    }\n                }\n            }\n            // Make sure we have a valid report to update\n            if (!updatedReport) {\n                console.error(`❌ No updated report available, using original report`);\n                updatedReport = {\n                    ...originalReport\n                };\n            }\n            // Update metadata\n            if (updatedReport && updatedReport.metadata) {\n                updatedReport.metadata.lastUpdated = new Date().toISOString();\n                updatedReport.metadata.version = (updatedReport.metadata.version || 0) + 1;\n            } else {\n                console.error(`❌ Updated report does not have a metadata field`);\n            }\n            // Return the updated report along with the batch status\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                report: updatedReport,\n                batchStatus,\n                updateCommands,\n                affectedDomains,\n                complete: true\n            });\n        } else {\n            // Return the current status for client polling\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                batchStatus,\n                complete: false\n            });\n        }\n    } catch (error) {\n        console.error(`❌ Error checking batch status:`, error);\n        // Fall back to simulation mode on any error\n        const reportJson = searchParams.get('report');\n        let originalReport;\n        try {\n            if (reportJson) {\n                originalReport = JSON.parse(reportJson);\n            } else {\n                throw new Error('Report not provided');\n            }\n        } catch (e) {\n            // If we can't even parse the report, send a generic error response\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Failed to check batch status and could not parse report for simulation',\n                details: error instanceof Error ? error.message : 'Unknown error'\n            }, {\n                status: 500\n            });\n        }\n        // Generate fallback response using simulated data\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            batchStatus: {\n                id: batchId,\n                status: 'running',\n                requests: Array(4).fill(null).map((_, i)=>({\n                        custom_id: `update-fallback-${i}`,\n                        status: i < 2 ? 'completed' : 'pending'\n                    })),\n                created: new Date(Date.now() - 5000).toISOString(),\n                simulated: true\n            },\n            progress: 50,\n            complete: false,\n            simulated: true,\n            error: error instanceof Error ? error.message : 'Unknown error',\n            message: \"Using fallback simulation mode due to unexpected error\"\n        });\n    }\n}\n/**\n * Apply an update_key command to a report\n */ function applyUpdateCommand(report, command) {\n    const updatedReport = {\n        ...report\n    };\n    try {\n        // Apply the update based on the path and action\n        const pathParts = command.path.split('.');\n        let current = updatedReport;\n        // Navigate to the parent object of the target property\n        for(let i = 0; i < pathParts.length - 1; i++){\n            const part = pathParts[i];\n            // Create missing objects in the path\n            if (!current[part]) {\n                // Check if the next path segment is a number (array index)\n                const nextPart = pathParts[i + 1];\n                const isNextPartArrayIndex = !isNaN(parseInt(nextPart));\n                // Create appropriate container type (array or object)\n                current[part] = isNextPartArrayIndex ? [] : {};\n            }\n            current = current[part];\n        }\n        // Get the target property name\n        const targetProp = pathParts[pathParts.length - 1];\n        // Apply the action\n        switch(command.action){\n            case 'append':\n                // For arrays, append the new values\n                if (!current[targetProp]) {\n                    current[targetProp] = [];\n                } else if (!Array.isArray(current[targetProp])) {\n                    // Convert to array if not already\n                    current[targetProp] = [\n                        current[targetProp]\n                    ];\n                }\n                // Handle both single value and array of values\n                if (Array.isArray(command.value)) {\n                    current[targetProp] = [\n                        ...current[targetProp],\n                        ...command.value\n                    ];\n                } else {\n                    current[targetProp].push(command.value);\n                }\n                break;\n            case 'replace':\n                // Replace the value entirely\n                current[targetProp] = command.value;\n                break;\n            case 'merge':\n                // For objects, deep merge properties\n                if (!current[targetProp] || typeof current[targetProp] !== 'object') {\n                    current[targetProp] = {};\n                }\n                current[targetProp] = (0,_lib_reportUtils__WEBPACK_IMPORTED_MODULE_1__.deepMerge)(current[targetProp], command.value);\n                break;\n            default:\n                console.warn(`⚠️ Unknown action: ${command.action}`);\n        }\n        // Special case for domain updates - check if this is a domain that should be marked as a concern\n        if (command.path.includes('domains.') && (command.action === 'merge' || command.action === 'replace')) {\n            const pathParts = command.path.split('.');\n            const domainIndex = pathParts.findIndex((part)=>part === 'domains');\n            if (domainIndex !== -1 && pathParts.length > domainIndex + 1) {\n                const domain = pathParts[domainIndex + 1];\n                // If value contains isConcern property, update it in eligibility section\n                if (command.value && command.value.isConcern !== undefined) {\n                    updatedReport.conclusion.eligibility.domains[domain] = command.value.isConcern;\n                }\n                // If domain needs exist and non-empty, mark as concern automatically\n                if (command.value && command.value.needs && Array.isArray(command.value.needs) && command.value.needs.length > 0) {\n                    // Only auto-set concern if it's not explicitly set to false\n                    if (command.value.isConcern !== false) {\n                        updatedReport.conclusion.eligibility.domains[domain] = true;\n                        updatedReport.assessmentResults.domains[domain].isConcern = true;\n                    }\n                }\n            }\n        }\n        return updatedReport;\n    } catch (error) {\n        console.error(`❌ Error applying update command:`, error);\n        // Return the original report if the update fails\n        return report;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/text-editor-test/status/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/reportUtils.ts":
/*!********************************!*\
  !*** ./src/lib/reportUtils.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createReportSkeleton: () => (/* binding */ createReportSkeleton),\n/* harmony export */   deepMerge: () => (/* binding */ deepMerge),\n/* harmony export */   normalizeInput: () => (/* binding */ normalizeInput),\n/* harmony export */   updateDomainSection: () => (/* binding */ updateDomainSection)\n/* harmony export */ });\n/**\n * Normalize input data from various sources (text, PDF, audio)\n * @param input - Input data in various formats\n */ async function normalizeInput(input) {\n    // Handle different input formats\n    if (typeof input === 'string') {\n        return input;\n    } else if (input.text) {\n        return input.text;\n    } else if (input.pdfData) {\n        // Return the base64 PDF data - Claude will process it with its document capability\n        return input.pdfData;\n    }\n    return JSON.stringify(input);\n}\n/**\n * Create a default report skeleton if none exists\n */ function createReportSkeleton() {\n    return {\n        header: {\n            studentInformation: {\n                firstName: \"\",\n                lastName: \"\",\n                DOB: \"\",\n                reportDate: \"\",\n                evaluationDate: \"\",\n                parents: [],\n                homeLanguage: \"\"\n            },\n            reasonForReferral: \"\",\n            confidentialityStatement: \"\"\n        },\n        background: {\n            studentDemographicsAndBackground: {\n                educationalHistory: \"\"\n            },\n            healthReport: {\n                medicalHistory: \"\",\n                visionAndHearingScreening: \"\",\n                medicationsAndAllergies: \"\"\n            },\n            earlyInterventionHistory: \"\",\n            familyHistory: {\n                familyStructure: \"\",\n                languageAndCulturalBackground: \"\",\n                socioeconomicFactors: \"\"\n            },\n            parentGuardianConcerns: \"\"\n        },\n        assessmentResults: {\n            observations: {\n                classroomObservations: \"\",\n                playBasedInformalObservations: \"\",\n                socialInteractionObservations: \"\"\n            },\n            assessmentProceduresAndTools: {\n                overviewOfAssessmentMethods: \"\",\n                assessmentToolsUsed: [] // IDs of assessment tools\n            },\n            domains: {\n                receptive: {\n                    isConcern: false,\n                    topicSentence: \"\",\n                    strengths: [],\n                    needs: [],\n                    impactStatement: \"\"\n                },\n                expressive: {\n                    isConcern: false,\n                    topicSentence: \"\",\n                    strengths: [],\n                    needs: [],\n                    impactStatement: \"\"\n                },\n                pragmatic: {\n                    isConcern: false,\n                    topicSentence: \"\",\n                    strengths: [],\n                    needs: [],\n                    impactStatement: \"\"\n                },\n                articulation: {\n                    isConcern: false,\n                    topicSentence: \"\",\n                    strengths: [],\n                    needs: [],\n                    impactStatement: \"\"\n                },\n                voice: {\n                    isConcern: false,\n                    topicSentence: \"\",\n                    strengths: [],\n                    needs: [],\n                    impactStatement: \"\"\n                },\n                fluency: {\n                    isConcern: false,\n                    topicSentence: \"\",\n                    strengths: [],\n                    needs: [],\n                    impactStatement: \"\"\n                }\n            }\n        },\n        conclusion: {\n            eligibility: {\n                domains: {\n                    receptive: false,\n                    expressive: false,\n                    pragmatic: false,\n                    articulation: false,\n                    voice: false,\n                    fluency: false\n                },\n                californiaEdCode: \"\"\n            },\n            conclusion: {\n                summary: \"\"\n            },\n            recommendations: {\n                services: {\n                    typeOfService: \"\",\n                    frequency: \"\",\n                    setting: \"\"\n                },\n                accommodations: [],\n                facilitationStrategies: []\n            },\n            parentFriendlyGlossary: {\n                terms: {}\n            }\n        },\n        metadata: {\n            lastUpdated: new Date().toISOString(),\n            version: 1\n        }\n    };\n}\n/**\n * Deep merge utility function for properly merging nested objects and arrays\n */ function deepMerge(target, source) {\n    // Handle edge cases\n    if (!source || typeof source !== 'object') return source;\n    if (!target || typeof target !== 'object') return {\n        ...source\n    };\n    // Create a new object to avoid mutating the original\n    const result = {\n        ...target\n    };\n    Object.keys(source).forEach((key)=>{\n        const targetValue = result[key];\n        const sourceValue = source[key];\n        // Handle arrays - prefer source arrays over target arrays\n        if (Array.isArray(sourceValue)) {\n            result[key] = [\n                ...sourceValue\n            ]; // Create a new array to prevent reference issues\n        } else if (typeof sourceValue === 'object' && sourceValue !== null && typeof targetValue === 'object' && targetValue !== null && !Array.isArray(targetValue)) {\n            result[key] = deepMerge(targetValue, sourceValue);\n        } else {\n            result[key] = sourceValue;\n        }\n    });\n    return result;\n}\n/**\n * Update a specific domain section with new data\n */ function updateDomainSection(report, domain, updates) {\n    const updatedReport = {\n        ...report\n    };\n    // Initialize domain if it doesn't exist\n    if (!updatedReport.assessmentResults.domains[domain]) {\n        updatedReport.assessmentResults.domains[domain] = {\n            isConcern: false,\n            topicSentence: '',\n            strengths: [],\n            needs: [],\n            impactStatement: ''\n        };\n    }\n    // Update specific fields\n    if (updates.isConcern !== undefined) {\n        updatedReport.assessmentResults.domains[domain].isConcern = updates.isConcern;\n    }\n    if (updates.topicSentence) {\n        updatedReport.assessmentResults.domains[domain].topicSentence = updates.topicSentence;\n    }\n    if (updates.strengths && updates.strengths.length > 0) {\n        updatedReport.assessmentResults.domains[domain].strengths = [\n            ...updatedReport.assessmentResults.domains[domain].strengths || [],\n            ...updates.strengths\n        ];\n    }\n    if (updates.needs && updates.needs.length > 0) {\n        updatedReport.assessmentResults.domains[domain].needs = [\n            ...updatedReport.assessmentResults.domains[domain].needs || [],\n            ...updates.needs\n        ];\n    }\n    if (updates.impactStatement) {\n        updatedReport.assessmentResults.domains[domain].impactStatement = updates.impactStatement;\n    }\n    // Also update the eligibility status if this is an area of concern\n    if (updates.isConcern !== undefined) {\n        updatedReport.conclusion.eligibility.domains[domain] = updates.isConcern;\n    }\n    // Update metadata\n    updatedReport.metadata.lastUpdated = new Date().toISOString();\n    updatedReport.metadata.version += 1;\n    return updatedReport;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/reportUtils.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@opentelemetry"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftext-editor-test%2Fstatus%2Froute&page=%2Fapi%2Ftext-editor-test%2Fstatus%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftext-editor-test%2Fstatus%2Froute.ts&appDir=%2FUsers%2Fbrandonbrewer%2FDocuments%2FLinguosity%2FLinguosity%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fbrandonbrewer%2FDocuments%2FLinguosity%2FLinguosity&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();