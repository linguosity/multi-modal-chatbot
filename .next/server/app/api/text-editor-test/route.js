/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/text-editor-test/route";
exports.ids = ["app/api/text-editor-test/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftext-editor-test%2Froute&page=%2Fapi%2Ftext-editor-test%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftext-editor-test%2Froute.ts&appDir=%2FUsers%2Fbrandonbrewer%2FDocuments%2FLinguosity%2FLinguosity%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fbrandonbrewer%2FDocuments%2FLinguosity%2FLinguosity&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!":
/*!******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftext-editor-test%2Froute&page=%2Fapi%2Ftext-editor-test%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftext-editor-test%2Froute.ts&appDir=%2FUsers%2Fbrandonbrewer%2FDocuments%2FLinguosity%2FLinguosity%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fbrandonbrewer%2FDocuments%2FLinguosity%2FLinguosity&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_brandonbrewer_Documents_Linguosity_Linguosity_src_app_api_text_editor_test_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/text-editor-test/route.ts */ \"(rsc)/./src/app/api/text-editor-test/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/text-editor-test/route\",\n        pathname: \"/api/text-editor-test\",\n        filename: \"route\",\n        bundlePath: \"app/api/text-editor-test/route\"\n    },\n    resolvedPagePath: \"/Users/brandonbrewer/Documents/Linguosity/Linguosity/src/app/api/text-editor-test/route.ts\",\n    nextConfigOutput,\n    userland: _Users_brandonbrewer_Documents_Linguosity_Linguosity_src_app_api_text_editor_test_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZ0ZXh0LWVkaXRvci10ZXN0JTJGcm91dGUmcGFnZT0lMkZhcGklMkZ0ZXh0LWVkaXRvci10ZXN0JTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGdGV4dC1lZGl0b3ItdGVzdCUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmJyYW5kb25icmV3ZXIlMkZEb2N1bWVudHMlMkZMaW5ndW9zaXR5JTJGTGluZ3Vvc2l0eSUyRnNyYyUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGVXNlcnMlMkZicmFuZG9uYnJld2VyJTJGRG9jdW1lbnRzJTJGTGluZ3Vvc2l0eSUyRkxpbmd1b3NpdHkmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9c3RhbmRhbG9uZSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUErRjtBQUN2QztBQUNxQjtBQUMwQztBQUN2SDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IseUdBQW1CO0FBQzNDO0FBQ0EsY0FBYyxrRUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFzRDtBQUM5RDtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUMwRjs7QUFFMUYiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1VzZXJzL2JyYW5kb25icmV3ZXIvRG9jdW1lbnRzL0xpbmd1b3NpdHkvTGluZ3Vvc2l0eS9zcmMvYXBwL2FwaS90ZXh0LWVkaXRvci10ZXN0L3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcInN0YW5kYWxvbmVcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvdGV4dC1lZGl0b3ItdGVzdC9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3RleHQtZWRpdG9yLXRlc3RcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL3RleHQtZWRpdG9yLXRlc3Qvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvYnJhbmRvbmJyZXdlci9Eb2N1bWVudHMvTGluZ3Vvc2l0eS9MaW5ndW9zaXR5L3NyYy9hcHAvYXBpL3RleHQtZWRpdG9yLXRlc3Qvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyB3b3JrQXN5bmNTdG9yYWdlLCB3b3JrVW5pdEFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICB3b3JrQXN5bmNTdG9yYWdlLFxuICAgICAgICB3b3JrVW5pdEFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftext-editor-test%2Froute&page=%2Fapi%2Ftext-editor-test%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftext-editor-test%2Froute.ts&appDir=%2FUsers%2Fbrandonbrewer%2FDocuments%2FLinguosity%2FLinguosity%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fbrandonbrewer%2FDocuments%2FLinguosity%2FLinguosity&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/text-editor-test/route.ts":
/*!***********************************************!*\
  !*** ./src/app/api/text-editor-test/route.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_reportUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/reportUtils */ \"(rsc)/./src/lib/reportUtils.ts\");\n\n\n/**\n * API endpoint that implements batch processing with Claude's Message Batches API\n */ async function POST(request) {\n    const requestId = `req_${Date.now().toString(36)}_${Math.random().toString(36).substring(2, 7)}`;\n    console.log(`[${requestId}] 🚀 Batch API request started`);\n    try {\n        // Extract and validate input\n        const { input, report: existingReport, updateSection, pdfData } = await request.json();\n        const isPdfUpload = !!pdfData;\n        const inputData = isPdfUpload ? {\n            pdfData\n        } : input;\n        console.log(`[${requestId}] 📥 Received request payload:`, {\n            inputType: isPdfUpload ? 'PDF' : 'text',\n            inputSize: isPdfUpload ? `${pdfData.length} chars (base64)` : typeof input === 'string' ? `${input.substring(0, 50)}${input.length > 50 ? '...' : ''}` : input,\n            reportProvided: !!existingReport,\n            updateSection: updateSection || 'auto-detect'\n        });\n        // Validate request parameters\n        if (!inputData && !isPdfUpload) {\n            console.log(`[${requestId}] ❌ Validation failed: Missing input data`);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Input data is required'\n            }, {\n                status: 400\n            });\n        }\n        // Use provided report or create default skeleton\n        const report = existingReport || (0,_lib_reportUtils__WEBPACK_IMPORTED_MODULE_1__.createReportSkeleton)();\n        console.log(`[${requestId}] 📋 Using ${existingReport ? 'provided' : 'default'} report structure with ${Object.keys(report.assessmentResults.domains).length} domains`);\n        // Get API key from environment variables\n        const apiKey = process.env.ANTHROPIC_API_KEY;\n        // Check if API key is available\n        if (!apiKey) {\n            console.log(`[${requestId}] ❌ Missing API key: ANTHROPIC_API_KEY not set`);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'ANTHROPIC_API_KEY is not set in environment variables'\n            }, {\n                status: 500\n            });\n        }\n        try {\n            // Normalize input data (handles text, PDF, etc.)\n            console.log(`[${requestId}] 🔄 Normalizing input data...`);\n            const normalizedInput = await (0,_lib_reportUtils__WEBPACK_IMPORTED_MODULE_1__.normalizeInput)(inputData);\n            console.log(`[${requestId}] ✅ Input normalized, length: ${normalizedInput.length} chars`);\n            // Log if this is a PDF upload\n            if (isPdfUpload) {\n                console.log(`[${requestId}] 📄 Processing PDF data...`);\n            }\n            // === Token Counting ===\n            let tokenCount = 0;\n            try {\n                console.log(`[${requestId}] 🧮 Counting tokens...`);\n                const tokenCountPayload = {\n                    model: \"claude-3-7-sonnet-20250219\",\n                    system: \"You are an expert educational speech-language pathologist.\",\n                    messages: [\n                        {\n                            role: \"user\",\n                            content: normalizedInput\n                        }\n                    ]\n                };\n                const tokenCountResponse = await fetch(\"https://api.anthropic.com/v1/messages/count_tokens\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        \"x-api-key\": apiKey,\n                        \"anthropic-version\": \"2023-06-01\"\n                    },\n                    body: JSON.stringify(tokenCountPayload)\n                });\n                if (!tokenCountResponse.ok) {\n                    const errorData = await tokenCountResponse.json();\n                    console.error(`[${requestId}] ❌ Token counting failed:`, errorData);\n                    // Don't throw, just use an estimated token count instead\n                    tokenCount = Math.ceil(normalizedInput.length / 4); // Rough estimate: 4 chars per token\n                    console.log(`[${requestId}] ⚠️ Using estimated token count: ${tokenCount}`);\n                } else {\n                    const tokenCountResult = await tokenCountResponse.json();\n                    tokenCount = tokenCountResult.input_tokens;\n                    console.log(`[${requestId}] 🧮 Token count:`, tokenCount);\n                }\n            } catch (tokenError) {\n                // If token counting fails, estimate based on input length\n                console.error(`[${requestId}] ❌ Token counting error:`, tokenError);\n                tokenCount = Math.ceil(normalizedInput.length / 4); // Rough estimate: 4 chars per token\n                console.log(`[${requestId}] ⚠️ Using estimated token count: ${tokenCount}`);\n            }\n            // === Build Batch Payload ===\n            // If no specific section is provided, update all major sections.\n            const sections = updateSection ? updateSection.includes(',') ? updateSection.split(',').map((s)=>s.trim()) : [\n                updateSection\n            ] : [\n                \"header\",\n                \"background\",\n                \"assessmentResults\",\n                \"conclusion\"\n            ];\n            console.log(`[${requestId}] 🎯 Target sections: [${sections.join(', ')}]`);\n            // Create content block for user message based on input type\n            let userContentBlock;\n            if (isPdfUpload) {\n                // PDF document content\n                userContentBlock = [\n                    {\n                        type: \"text\",\n                        text: `I need to update the speech-language report based on the content in this PDF document.`\n                    },\n                    {\n                        type: \"document\",\n                        source: {\n                            type: \"base64\",\n                            media_type: \"application/pdf\",\n                            data: normalizedInput\n                        }\n                    }\n                ];\n            } else {\n                // Plain text content\n                userContentBlock = [\n                    {\n                        type: \"text\",\n                        text: `I need to update the speech-language report based on this new information: \"${normalizedInput}\"`\n                    }\n                ];\n            }\n            const requestsArray = sections.map((section)=>{\n                // If section is a path like \"assessmentResults.domains.receptive\", extract the main section\n                const mainSection = section.split('.')[0];\n                const sectionJson = JSON.stringify(// If section is a path, traverse to the specific subsection\n                section.includes('.') ? section.split('.').reduce((obj, key)=>obj?.[key], report) : report[section], null, 2);\n                // Create a contextual system prompt for this section\n                let sectionPrompt;\n                switch(mainSection){\n                    case 'header':\n                        sectionPrompt = `You are an expert speech-language pathologist updating the student information and referral reasons.\nFocus on extracting factual information like names, dates, and demographic details.\nDO NOT create fictional details if they're not in the input.`;\n                        break;\n                    case 'background':\n                        sectionPrompt = `You are an expert speech-language pathologist updating background information.\nFocus on educational history, health information, family details, and parent concerns.\nBe thorough and clinically accurate, but stay objective and factual.`;\n                        break;\n                    case 'assessmentResults':\n                        sectionPrompt = `You are an expert speech-language pathologist updating assessment results.\nWhen analyzing test results, note specific scores, strengths, and areas of need.\nFor language domains, extract the specific evidence and impact on educational performance.\nIf assessment tools are mentioned, add them to the appropriate domain sections.`;\n                        break;\n                    case 'conclusion':\n                        sectionPrompt = `You are an expert speech-language pathologist finalizing conclusions and recommendations.\nOnly identify domains as areas of concern when clear evidence supports it.\nBe specific with recommendations for therapy frequency, service type, and setting.\nInclude only evidence-based recommendations appropriate for educational settings.`;\n                        break;\n                    default:\n                        sectionPrompt = `You are an expert speech-language pathologist updating the report section: ${section}.\nBe specific, objective, and clinically accurate based only on the information provided.`;\n                }\n                // Use a consistent format for custom_id that matches what we expect in the status endpoint\n                const customId = `update-${section}`;\n                console.log(`[${requestId}] 📝 Creating batch request with custom_id: ${customId} for section: ${section}`);\n                return {\n                    custom_id: customId,\n                    params: {\n                        model: \"claude-3-7-sonnet-20250219\",\n                        max_tokens: 1024,\n                        system: `${sectionPrompt}\n\nINSTRUCTIONS:\n1. Analyze the input information and update the section JSON appropriately\n2. Return your response as an update_key JSON command in this format:\n\n\\`\\`\\`json\n{\n  \"command\": \"update_key\",\n  \"path\": \"${section}\",\n  \"action\": \"merge\",\n  \"value\": { updated content as JSON }\n}\n\\`\\`\\`\n\nWhere:\n- path: The exact JSON path to update\n- action: Use \"append\" for arrays, \"replace\" for text fields, or \"merge\" for objects\n- value: The new content, properly formatted as JSON\n\nDO NOT use the text editor tool. ONLY respond with a properly formatted update_key JSON command.`,\n                        messages: [\n                            {\n                                role: \"user\",\n                                content: [\n                                    ...userContentBlock,\n                                    {\n                                        type: \"text\",\n                                        text: `Here is the current ${section} section JSON:\n\\`\\`\\`json\n${sectionJson}\n\\`\\`\\`\n\nPlease update this section based on the information I provided.\nRespond ONLY with an update_key JSON command.`\n                                    }\n                                ]\n                            }\n                        ]\n                    }\n                };\n            });\n            // Log the mapping of custom_ids to sections for debugging\n            const customIdMapping = requestsArray.map((req)=>`${req.custom_id} → ${req.custom_id.replace('update-', '')}`);\n            console.log(`[${requestId}] 🔍 Custom ID mapping: ${customIdMapping.join(', ')}`);\n            const batchPayload = {\n                requests: requestsArray\n            };\n            console.log(`[${requestId}] 📦 Preparing batch with ${requestsArray.length} requests`);\n            // === Submit Batch Request ===\n            console.log(`[${requestId}] 🔌 Submitting batch request to Anthropic...`);\n            // Define batchResponse outside the try block so it's accessible later\n            let batchResponse;\n            let batchResult;\n            try {\n                batchResponse = await fetch(\"https://api.anthropic.com/v1/messages/batches\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        \"x-api-key\": apiKey,\n                        \"anthropic-version\": \"2023-06-01\"\n                    },\n                    body: JSON.stringify(batchPayload)\n                });\n                if (!batchResponse.ok) {\n                    // Try to get detailed error info if available\n                    try {\n                        const errorData = await batchResponse.json();\n                        console.error(`[${requestId}] ❌ Batch processing failed:`, errorData);\n                        // Check if there's an error with the API key or permissions\n                        if (batchResponse.status === 401 || batchResponse.status === 403) {\n                            throw new Error(`API authentication error: ${errorData.error || 'Invalid API key or permissions'}`);\n                        }\n                        throw new Error(JSON.stringify(errorData.error) || \"Batch processing failed\");\n                    } catch (parseError) {\n                        // If we can't parse the error response, return a generic error\n                        console.error(`[${requestId}] ❌ Failed to parse batch error response:`, parseError);\n                        throw new Error(`Batch API error: ${batchResponse.status} ${batchResponse.statusText}`);\n                    }\n                }\n                // Process successful response\n                try {\n                    batchResult = await batchResponse.json();\n                } catch (parseError) {\n                    console.error(`[${requestId}] ❌ Failed to parse batch response:`, parseError);\n                    throw new Error('Failed to parse batch response');\n                }\n            } catch (batchError) {\n                // Handle network errors or other exceptions\n                console.error(`[${requestId}] ❌ Batch request error:`, batchError);\n                // Fall back to simulated response\n                console.log(`[${requestId}] ⚠️ Falling back to simulated batch mode due to API error`);\n                // Create a simulated batch ID using the request ID\n                // Note: In a real API, the batch ID would start with msgbatch_ prefix\n                // but for our simulation, we use simulated_ to distinguish it\n                const simulatedBatchId = `simulated_${requestId}`;\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    batch: {\n                        id: simulatedBatchId,\n                        status: 'running',\n                        requestCount: sections.length,\n                        sections: sections,\n                        created: new Date().toISOString(),\n                        simulated: true\n                    },\n                    tokenCount: tokenCount,\n                    requestId: requestId,\n                    message: 'Using simulated batch due to API error'\n                });\n            }\n            // If we reach here, we have a valid batchResult\n            // Safely log and extract batch info, with fallbacks for unexpected response structure\n            const batchId = batchResult?.id || 'unknown';\n            const requestCount = batchResult?.requests?.length || 0;\n            const batchStatus = batchResult?.status || 'unknown';\n            const batchCreated = batchResult?.created || new Date().toISOString();\n            console.log(`[${requestId}] ✅ Batch created, ID: ${batchId}, ${requestCount} requests`);\n            // We successfully got a response from Anthropic's API!\n            // Ensure the batch ID is a valid Anthropic batch ID (should start with msgbatch_)\n            if (!batchId.startsWith('msgbatch_')) {\n                console.warn(`[${requestId}] ⚠️ Unexpected batch ID format from Anthropic: ${batchId}`);\n                console.warn(`[${requestId}] ⚠️ Batch IDs should start with 'msgbatch_'. Using simulated batch instead.`);\n                // Fall back to simulated mode if Anthropic returned an unexpected batch ID format\n                const simulatedBatchId = `simulated_${requestId}`;\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    batch: {\n                        id: simulatedBatchId,\n                        status: 'running',\n                        requestCount: sections.length,\n                        sections: sections,\n                        created: new Date().toISOString(),\n                        simulated: true\n                    },\n                    tokenCount: tokenCount,\n                    requestId: requestId,\n                    message: 'Using simulated batch due to unexpected ID format'\n                });\n            }\n            // Return the details for a valid Anthropic batch\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                batch: {\n                    id: batchId,\n                    status: batchStatus,\n                    requestCount: requestCount,\n                    sections: sections,\n                    created: batchCreated\n                },\n                tokenCount: tokenCount,\n                requestId: requestId\n            });\n        } catch (apiError) {\n            console.error(`[${requestId}] ❌ Error calling Claude API:`, apiError);\n            // Fallback for testing without API\n            console.log(`[${requestId}] ⚠️ Using fallback mode for testing`);\n            const updatedReport = {\n                ...report\n            };\n            // Simple domain detection based on keywords\n            const inputLower = input?.toLowerCase() || '';\n            let targetDomain = 'articulation';\n            if (inputLower.includes('understand') || inputLower.includes('follow') || inputLower.includes('direction')) {\n                targetDomain = 'receptive';\n            } else if (inputLower.includes('express') || inputLower.includes('vocabulary') || inputLower.includes('sentence')) {\n                targetDomain = 'expressive';\n            } else if (inputLower.includes('social') || inputLower.includes('eye contact') || inputLower.includes('peer')) {\n                targetDomain = 'pragmatic';\n            } else if (inputLower.includes('sound') || inputLower.includes('pronounce') || inputLower.includes('intelligible')) {\n                targetDomain = 'articulation';\n            }\n            console.log(`[${requestId}] 🔍 Fallback detected domain: ${targetDomain}`);\n            // Create a simulated update\n            const updates = {\n                strengths: [\n                    input\n                ]\n            };\n            if (!updatedReport.assessmentResults.domains[targetDomain].topicSentence) {\n                updates.topicSentence = `Student demonstrates challenges in ${targetDomain} language skills.`;\n            }\n            const simulatedReport = (0,_lib_reportUtils__WEBPACK_IMPORTED_MODULE_1__.updateDomainSection)(updatedReport, targetDomain, updates);\n            console.log(`[${requestId}] ✅ Simulated update applied to domain: ${targetDomain}`);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                report: simulatedReport,\n                apiError: apiError instanceof Error ? apiError.message : 'API call failed',\n                simulated: true,\n                affectedDomain: targetDomain\n            });\n        }\n    } catch (error) {\n        console.error(`[${requestId}] ❌ Error processing batch request:`, error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Failed to process the request',\n            details: error instanceof Error ? error.message : 'Unknown error'\n        }, {\n            status: 500\n        });\n    } finally{\n        console.log(`[${requestId}] 🏁 Batch API request completed`);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/text-editor-test/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/reportUtils.ts":
/*!********************************!*\
  !*** ./src/lib/reportUtils.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createReportSkeleton: () => (/* binding */ createReportSkeleton),\n/* harmony export */   deepMerge: () => (/* binding */ deepMerge),\n/* harmony export */   normalizeInput: () => (/* binding */ normalizeInput),\n/* harmony export */   updateDomainSection: () => (/* binding */ updateDomainSection)\n/* harmony export */ });\n/**\n * Normalize input data from various sources (text, PDF, audio)\n * @param input - Input data in various formats\n */ async function normalizeInput(input) {\n    // Handle different input formats\n    if (typeof input === 'string') {\n        return input;\n    } else if (input.text) {\n        return input.text;\n    } else if (input.pdfData) {\n        // Return the base64 PDF data - Claude will process it with its document capability\n        return input.pdfData;\n    }\n    return JSON.stringify(input);\n}\n/**\n * Create a default report skeleton if none exists\n */ function createReportSkeleton() {\n    return {\n        header: {\n            studentInformation: {\n                firstName: \"\",\n                lastName: \"\",\n                DOB: \"\",\n                reportDate: \"\",\n                evaluationDate: \"\",\n                parents: [],\n                homeLanguage: \"\"\n            },\n            reasonForReferral: \"\",\n            confidentialityStatement: \"\"\n        },\n        background: {\n            studentDemographicsAndBackground: {\n                educationalHistory: \"\"\n            },\n            healthReport: {\n                medicalHistory: \"\",\n                visionAndHearingScreening: \"\",\n                medicationsAndAllergies: \"\"\n            },\n            earlyInterventionHistory: \"\",\n            familyHistory: {\n                familyStructure: \"\",\n                languageAndCulturalBackground: \"\",\n                socioeconomicFactors: \"\"\n            },\n            parentGuardianConcerns: \"\"\n        },\n        assessmentResults: {\n            observations: {\n                classroomObservations: \"\",\n                playBasedInformalObservations: \"\",\n                socialInteractionObservations: \"\"\n            },\n            assessmentProceduresAndTools: {\n                overviewOfAssessmentMethods: \"\",\n                assessmentToolsUsed: [] // IDs of assessment tools\n            },\n            domains: {\n                receptive: {\n                    isConcern: false,\n                    topicSentence: \"\",\n                    strengths: [],\n                    needs: [],\n                    impactStatement: \"\"\n                },\n                expressive: {\n                    isConcern: false,\n                    topicSentence: \"\",\n                    strengths: [],\n                    needs: [],\n                    impactStatement: \"\"\n                },\n                pragmatic: {\n                    isConcern: false,\n                    topicSentence: \"\",\n                    strengths: [],\n                    needs: [],\n                    impactStatement: \"\"\n                },\n                articulation: {\n                    isConcern: false,\n                    topicSentence: \"\",\n                    strengths: [],\n                    needs: [],\n                    impactStatement: \"\"\n                },\n                voice: {\n                    isConcern: false,\n                    topicSentence: \"\",\n                    strengths: [],\n                    needs: [],\n                    impactStatement: \"\"\n                },\n                fluency: {\n                    isConcern: false,\n                    topicSentence: \"\",\n                    strengths: [],\n                    needs: [],\n                    impactStatement: \"\"\n                }\n            }\n        },\n        conclusion: {\n            eligibility: {\n                domains: {\n                    receptive: false,\n                    expressive: false,\n                    pragmatic: false,\n                    articulation: false,\n                    voice: false,\n                    fluency: false\n                },\n                californiaEdCode: \"\"\n            },\n            conclusion: {\n                summary: \"\"\n            },\n            recommendations: {\n                services: {\n                    typeOfService: \"\",\n                    frequency: \"\",\n                    setting: \"\"\n                },\n                accommodations: [],\n                facilitationStrategies: []\n            },\n            parentFriendlyGlossary: {\n                terms: {}\n            }\n        },\n        metadata: {\n            lastUpdated: new Date().toISOString(),\n            version: 1\n        }\n    };\n}\n/**\n * Deep merge utility function for properly merging nested objects and arrays\n */ function deepMerge(target, source) {\n    // Handle edge cases\n    if (!source || typeof source !== 'object') return source;\n    if (!target || typeof target !== 'object') return {\n        ...source\n    };\n    // Create a new object to avoid mutating the original\n    const result = {\n        ...target\n    };\n    Object.keys(source).forEach((key)=>{\n        const targetValue = result[key];\n        const sourceValue = source[key];\n        // Handle arrays - prefer source arrays over target arrays\n        if (Array.isArray(sourceValue)) {\n            result[key] = [\n                ...sourceValue\n            ]; // Create a new array to prevent reference issues\n        } else if (typeof sourceValue === 'object' && sourceValue !== null && typeof targetValue === 'object' && targetValue !== null && !Array.isArray(targetValue)) {\n            result[key] = deepMerge(targetValue, sourceValue);\n        } else {\n            result[key] = sourceValue;\n        }\n    });\n    return result;\n}\n/**\n * Update a specific domain section with new data\n */ function updateDomainSection(report, domain, updates) {\n    const updatedReport = {\n        ...report\n    };\n    // Initialize domain if it doesn't exist\n    if (!updatedReport.assessmentResults.domains[domain]) {\n        updatedReport.assessmentResults.domains[domain] = {\n            isConcern: false,\n            topicSentence: '',\n            strengths: [],\n            needs: [],\n            impactStatement: ''\n        };\n    }\n    // Update specific fields\n    if (updates.isConcern !== undefined) {\n        updatedReport.assessmentResults.domains[domain].isConcern = updates.isConcern;\n    }\n    if (updates.topicSentence) {\n        updatedReport.assessmentResults.domains[domain].topicSentence = updates.topicSentence;\n    }\n    if (updates.strengths && updates.strengths.length > 0) {\n        updatedReport.assessmentResults.domains[domain].strengths = [\n            ...updatedReport.assessmentResults.domains[domain].strengths || [],\n            ...updates.strengths\n        ];\n    }\n    if (updates.needs && updates.needs.length > 0) {\n        updatedReport.assessmentResults.domains[domain].needs = [\n            ...updatedReport.assessmentResults.domains[domain].needs || [],\n            ...updates.needs\n        ];\n    }\n    if (updates.impactStatement) {\n        updatedReport.assessmentResults.domains[domain].impactStatement = updates.impactStatement;\n    }\n    // Also update the eligibility status if this is an area of concern\n    if (updates.isConcern !== undefined) {\n        updatedReport.conclusion.eligibility.domains[domain] = updates.isConcern;\n    }\n    // Update metadata\n    updatedReport.metadata.lastUpdated = new Date().toISOString();\n    updatedReport.metadata.version += 1;\n    return updatedReport;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/reportUtils.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@opentelemetry"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftext-editor-test%2Froute&page=%2Fapi%2Ftext-editor-test%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftext-editor-test%2Froute.ts&appDir=%2FUsers%2Fbrandonbrewer%2FDocuments%2FLinguosity%2FLinguosity%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fbrandonbrewer%2FDocuments%2FLinguosity%2FLinguosity&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();