/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/text-editor-test/route";
exports.ids = ["app/api/text-editor-test/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftext-editor-test%2Froute&page=%2Fapi%2Ftext-editor-test%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftext-editor-test%2Froute.ts&appDir=%2FUsers%2Fbrandonbrewer%2FDocuments%2FLinguosity%2FLinguosity%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fbrandonbrewer%2FDocuments%2FLinguosity%2FLinguosity&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftext-editor-test%2Froute&page=%2Fapi%2Ftext-editor-test%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftext-editor-test%2Froute.ts&appDir=%2FUsers%2Fbrandonbrewer%2FDocuments%2FLinguosity%2FLinguosity%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fbrandonbrewer%2FDocuments%2FLinguosity%2FLinguosity&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_brandonbrewer_Documents_Linguosity_Linguosity_src_app_api_text_editor_test_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/text-editor-test/route.ts */ \"(rsc)/./src/app/api/text-editor-test/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/text-editor-test/route\",\n        pathname: \"/api/text-editor-test\",\n        filename: \"route\",\n        bundlePath: \"app/api/text-editor-test/route\"\n    },\n    resolvedPagePath: \"/Users/brandonbrewer/Documents/Linguosity/Linguosity/src/app/api/text-editor-test/route.ts\",\n    nextConfigOutput,\n    userland: _Users_brandonbrewer_Documents_Linguosity_Linguosity_src_app_api_text_editor_test_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZ0ZXh0LWVkaXRvci10ZXN0JTJGcm91dGUmcGFnZT0lMkZhcGklMkZ0ZXh0LWVkaXRvci10ZXN0JTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGdGV4dC1lZGl0b3ItdGVzdCUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmJyYW5kb25icmV3ZXIlMkZEb2N1bWVudHMlMkZMaW5ndW9zaXR5JTJGTGluZ3Vvc2l0eSUyRnNyYyUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGVXNlcnMlMkZicmFuZG9uYnJld2VyJTJGRG9jdW1lbnRzJTJGTGluZ3Vvc2l0eSUyRkxpbmd1b3NpdHkmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9c3RhbmRhbG9uZSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUErRjtBQUN2QztBQUNxQjtBQUMwQztBQUN2SDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IseUdBQW1CO0FBQzNDO0FBQ0EsY0FBYyxrRUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFzRDtBQUM5RDtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUMwRjs7QUFFMUYiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1VzZXJzL2JyYW5kb25icmV3ZXIvRG9jdW1lbnRzL0xpbmd1b3NpdHkvTGluZ3Vvc2l0eS9zcmMvYXBwL2FwaS90ZXh0LWVkaXRvci10ZXN0L3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcInN0YW5kYWxvbmVcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvdGV4dC1lZGl0b3ItdGVzdC9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3RleHQtZWRpdG9yLXRlc3RcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL3RleHQtZWRpdG9yLXRlc3Qvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvYnJhbmRvbmJyZXdlci9Eb2N1bWVudHMvTGluZ3Vvc2l0eS9MaW5ndW9zaXR5L3NyYy9hcHAvYXBpL3RleHQtZWRpdG9yLXRlc3Qvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyB3b3JrQXN5bmNTdG9yYWdlLCB3b3JrVW5pdEFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICB3b3JrQXN5bmNTdG9yYWdlLFxuICAgICAgICB3b3JrVW5pdEFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftext-editor-test%2Froute&page=%2Fapi%2Ftext-editor-test%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftext-editor-test%2Froute.ts&appDir=%2FUsers%2Fbrandonbrewer%2FDocuments%2FLinguosity%2FLinguosity%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fbrandonbrewer%2FDocuments%2FLinguosity%2FLinguosity&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/text-editor-test/route.ts":
/*!***********************************************!*\
  !*** ./src/app/api/text-editor-test/route.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n\n/**\n * Normalize input data from various sources (text, PDF, audio)\n * @param input - Input data in various formats\n */ async function normalizeInput(input) {\n    // Handle different input formats\n    if (typeof input === 'string') {\n        return input;\n    } else if (input.text) {\n        return input.text;\n    } else if (input.pdfData) {\n        // Return the base64 PDF data - Claude will process it with its document capability\n        return input.pdfData;\n    }\n    return JSON.stringify(input);\n}\n/**\n * Create a default report skeleton if none exists\n */ function createReportSkeleton() {\n    return {\n        header: {\n            studentInformation: {\n                firstName: \"\",\n                lastName: \"\",\n                DOB: \"\",\n                reportDate: \"\",\n                evaluationDate: \"\",\n                parents: [],\n                homeLanguage: \"\"\n            },\n            reasonForReferral: \"\",\n            confidentialityStatement: \"\"\n        },\n        background: {\n            studentDemographicsAndBackground: {\n                educationalHistory: \"\"\n            },\n            healthReport: {\n                medicalHistory: \"\",\n                visionAndHearingScreening: \"\",\n                medicationsAndAllergies: \"\"\n            },\n            earlyInterventionHistory: \"\",\n            familyHistory: {\n                familyStructure: \"\",\n                languageAndCulturalBackground: \"\",\n                socioeconomicFactors: \"\"\n            },\n            parentGuardianConcerns: \"\"\n        },\n        assessmentResults: {\n            observations: {\n                classroomObservations: \"\",\n                playBasedInformalObservations: \"\",\n                socialInteractionObservations: \"\"\n            },\n            assessmentProceduresAndTools: {\n                overviewOfAssessmentMethods: \"\",\n                assessmentToolsUsed: [] // IDs of assessment tools\n            },\n            domains: {\n                receptive: {\n                    isConcern: false,\n                    topicSentence: \"\",\n                    strengths: [],\n                    needs: [],\n                    impactStatement: \"\"\n                },\n                expressive: {\n                    isConcern: false,\n                    topicSentence: \"\",\n                    strengths: [],\n                    needs: [],\n                    impactStatement: \"\"\n                },\n                pragmatic: {\n                    isConcern: false,\n                    topicSentence: \"\",\n                    strengths: [],\n                    needs: [],\n                    impactStatement: \"\"\n                },\n                articulation: {\n                    isConcern: false,\n                    topicSentence: \"\",\n                    strengths: [],\n                    needs: [],\n                    impactStatement: \"\"\n                },\n                voice: {\n                    isConcern: false,\n                    topicSentence: \"\",\n                    strengths: [],\n                    needs: [],\n                    impactStatement: \"\"\n                },\n                fluency: {\n                    isConcern: false,\n                    topicSentence: \"\",\n                    strengths: [],\n                    needs: [],\n                    impactStatement: \"\"\n                }\n            }\n        },\n        conclusion: {\n            eligibility: {\n                domains: {\n                    receptive: false,\n                    expressive: false,\n                    pragmatic: false,\n                    articulation: false,\n                    voice: false,\n                    fluency: false\n                },\n                californiaEdCode: \"\"\n            },\n            conclusion: {\n                summary: \"\"\n            },\n            recommendations: {\n                services: {\n                    typeOfService: \"\",\n                    frequency: \"\",\n                    setting: \"\"\n                },\n                accommodations: [],\n                facilitationStrategies: []\n            },\n            parentFriendlyGlossary: {\n                terms: {}\n            }\n        },\n        metadata: {\n            lastUpdated: new Date().toISOString(),\n            version: 1\n        }\n    };\n}\n/**\n * Update a specific domain section with new data\n */ function updateDomainSection(report, domain, updates) {\n    const updatedReport = {\n        ...report\n    };\n    // Initialize domain if it doesn't exist\n    if (!updatedReport.assessmentResults.domains[domain]) {\n        updatedReport.assessmentResults.domains[domain] = {\n            isConcern: false,\n            topicSentence: '',\n            strengths: [],\n            needs: [],\n            impactStatement: ''\n        };\n    }\n    // Update specific fields\n    if (updates.isConcern !== undefined) {\n        updatedReport.assessmentResults.domains[domain].isConcern = updates.isConcern;\n    }\n    if (updates.topicSentence) {\n        updatedReport.assessmentResults.domains[domain].topicSentence = updates.topicSentence;\n    }\n    if (updates.strengths && updates.strengths.length > 0) {\n        updatedReport.assessmentResults.domains[domain].strengths = [\n            ...updatedReport.assessmentResults.domains[domain].strengths || [],\n            ...updates.strengths\n        ];\n    }\n    if (updates.needs && updates.needs.length > 0) {\n        updatedReport.assessmentResults.domains[domain].needs = [\n            ...updatedReport.assessmentResults.domains[domain].needs || [],\n            ...updates.needs\n        ];\n    }\n    if (updates.impactStatement) {\n        updatedReport.assessmentResults.domains[domain].impactStatement = updates.impactStatement;\n    }\n    // Also update the eligibility status if this is an area of concern\n    if (updates.isConcern !== undefined) {\n        updatedReport.conclusion.eligibility.domains[domain] = updates.isConcern;\n    }\n    // Update metadata\n    updatedReport.metadata.lastUpdated = new Date().toISOString();\n    updatedReport.metadata.version += 1;\n    return updatedReport;\n}\n/**\n * API endpoint to test Claude's text editor tool with JSON report updates\n */ async function POST(request) {\n    const requestId = `req_${Date.now().toString(36)}_${Math.random().toString(36).substring(2, 7)}`;\n    console.log(`[${requestId}] 🚀 REQUEST STARTED: Text Editor API called`);\n    try {\n        // Extract request parameters\n        const { input, report: existingReport, updateSection, pdfData } = await request.json();\n        // Determine if this is a PDF upload or text input\n        const isPdfUpload = !!pdfData;\n        const inputData = isPdfUpload ? {\n            pdfData\n        } : input;\n        console.log(`[${requestId}] 📥 Received request payload:`, {\n            inputType: isPdfUpload ? 'PDF' : 'text',\n            inputSize: isPdfUpload ? `${pdfData.length} chars (base64)` : typeof input === 'string' ? `${input.substring(0, 50)}${input.length > 50 ? '...' : ''}` : input,\n            reportProvided: !!existingReport,\n            updateSection: updateSection || 'auto-detect'\n        });\n        // Validate request parameters\n        if (!inputData && !isPdfUpload) {\n            console.log(`[${requestId}] ❌ Validation failed: Missing input data`);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Input data is required'\n            }, {\n                status: 400\n            });\n        }\n        // Create or use existing report\n        const report = existingReport || createReportSkeleton();\n        console.log(`[${requestId}] 📋 Using ${existingReport ? 'provided' : 'default'} report structure with ${Object.keys(report.domains || {}).length} domains`);\n        // Get API key from environment variables\n        const apiKey = process.env.ANTHROPIC_API_KEY;\n        // Check if API key is available\n        if (!apiKey) {\n            console.log(`[${requestId}] ❌ Missing API key: ANTHROPIC_API_KEY not set`);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'ANTHROPIC_API_KEY is not set in environment variables'\n            }, {\n                status: 500\n            });\n        }\n        try {\n            // Normalize input data (handles text, PDF, etc.)\n            console.log(`[${requestId}] 🔄 Normalizing input data...`);\n            const normalizedInput = await normalizeInput(inputData);\n            console.log(`[${requestId}] ✅ Input normalized, length: ${normalizedInput.length} chars`);\n            // Log if this is a PDF upload\n            if (isPdfUpload) {\n                console.log(`[${requestId}] 📄 Processing PDF data...`);\n            }\n            // Determine which section to update\n            const sectionToUpdate = updateSection || 'auto-detect';\n            console.log(`[${requestId}] 🎯 Target section: ${sectionToUpdate}`);\n            // Prepare the report section that Claude will view and edit\n            let viewContent;\n            let targetPath;\n            console.log(`[${requestId}] 📑 Preparing view content for Claude...`);\n            // Helper function to get a nested value from an object using a path string\n            const getNestedValue = (obj, path)=>{\n                return path.split('.').reduce((o, key)=>o?.[key], obj);\n            };\n            // Extract the main section (header, background, assessmentResults, conclusion)\n            const getMainSection = (path)=>{\n                if (path.startsWith('header.')) return 'header';\n                if (path.startsWith('background.')) return 'background';\n                if (path.startsWith('assessmentResults.')) return 'assessmentResults';\n                if (path.startsWith('conclusion.')) return 'conclusion';\n                return null;\n            };\n            if (sectionToUpdate === 'auto-detect') {\n                // For auto-detect, we only send a summary of each section to save tokens\n                const reportSummary = {\n                    header: {\n                        studentName: `${report.header.studentInformation.firstName} ${report.header.studentInformation.lastName}`,\n                        reasonForReferral: report.header.reasonForReferral?.substring(0, 100) + '...'\n                    },\n                    assessmentResults: {\n                        domains: Object.keys(report.assessmentResults.domains).reduce((acc, domain)=>{\n                            acc[domain] = {\n                                isConcern: report.assessmentResults.domains[domain].isConcern,\n                                topicSentence: report.assessmentResults.domains[domain].topicSentence\n                            };\n                            return acc;\n                        }, {})\n                    },\n                    conclusion: {\n                        summary: report.conclusion.conclusion.summary?.substring(0, 100) + '...'\n                    }\n                };\n                viewContent = JSON.stringify(reportSummary, null, 2);\n                targetPath = '';\n                console.log(`[${requestId}] 🔍 Auto-detect mode: Sending summary report structure (${viewContent.length} chars)`);\n            } else if (sectionToUpdate.startsWith('assessmentResults.domains.')) {\n                // Extract domain name from path\n                const domainName = sectionToUpdate.split('.')[2];\n                viewContent = JSON.stringify(report.assessmentResults.domains[domainName] || {}, null, 2);\n                targetPath = sectionToUpdate;\n                console.log(`[${requestId}] 🔍 Domain-specific update: ${domainName}`, report.assessmentResults.domains[domainName] || 'domain not found');\n            } else {\n                // Handle other specific paths by determining which main section it belongs to\n                const mainSection = getMainSection(sectionToUpdate);\n                if (mainSection) {\n                    // Send just that section of the report\n                    viewContent = JSON.stringify(report[mainSection], null, 2);\n                    targetPath = sectionToUpdate;\n                    console.log(`[${requestId}] 🔍 Section update: ${mainSection} -> ${sectionToUpdate}`);\n                } else {\n                    // If we can't determine the section, get the specific path or default to summary\n                    const nestedValue = getNestedValue(report, sectionToUpdate);\n                    viewContent = nestedValue ? JSON.stringify(nestedValue, null, 2) : JSON.stringify({\n                        header: report.header,\n                        assessmentResults: {\n                            domains: report.assessmentResults.domains\n                        }\n                    }, null, 2);\n                    targetPath = sectionToUpdate;\n                    console.log(`[${requestId}] 🔍 Other section update: ${sectionToUpdate}`);\n                }\n            }\n            // Call the Anthropic API directly\n            console.log(`[${requestId}] 🔌 Making first API call to Claude...`);\n            // Create appropriate system prompt based on input type\n            const systemPrompt = `You are an expert educational speech-language pathologist that specializes in writing detailed assessment reports. \nYour task is to update a JSON report structure based on ${isPdfUpload ? 'the contents of the uploaded PDF document' : 'user input'}.\n\nREPORT STRUCTURE:\nThe report is organized into four main sections:\n1. header - Student information and referral reason\n2. background - Health history, family info, and parent concerns\n3. assessmentResults - Observations, assessment tools, and domain evaluations\n4. conclusion - Eligibility determination, summary, and recommendations\n\nINSTRUCTIONS:\n1. DO NOT use the text editor tool's str_replace command for these updates\n2. INSTEAD, use the JSON path command approach described below\n3. Format your response as a regular text message containing the JSON command\n\nJSON PATH COMMAND FORMAT:\n\\`\\`\\`json\n{\n  \"command\": \"update_key\",\n  \"path\": \"assessmentResults.domains.pragmatic.strengths\",\n  \"action\": \"append\",\n  \"value\": [\"Your observation here\"]\n}\n\\`\\`\\`\n\nWhere:\n- path: The exact JSON path to update (using the new structure paths, e.g., \"assessmentResults.domains.pragmatic.strengths\")\n- action: Use \"append\" for arrays, \"replace\" for fields, or \"merge\" for objects\n- value: The new value to insert, properly formatted as JSON\n\nFor domain sections, maintain these guidelines:\n- topicSentence: A clear statement summarizing the domain findings\n- strengths: Array of specific skills and abilities the student demonstrates\n- needs: Array of specific difficulties the student exhibits\n- impactStatement: How challenges affect educational performance\n- assessmentTools: Array of assessment tools used to evaluate this specific domain (full names, not IDs)\n\nIMPORTANT: When processing standardized tests, add the assessment tool name directly to the domain.assessmentTools array. For example:\n\"assessmentTools\": [\"Goldman-Fristoe Test of Articulation-3 (GFTA-3)\"]\n\nDO NOT respond with a direct text answer. ALWAYS respond with a JSON command as shown above.`;\n            // Prepare the user message based on input type\n            let userMessage = '';\n            let userContent = [];\n            if (isPdfUpload) {\n                // Construct message for PDF content\n                userContent = [\n                    {\n                        type: \"text\",\n                        text: `I need to update the speech-language report based on the content in this PDF document. ${sectionToUpdate !== 'auto-detect' ? `Please focus on updating the ${sectionToUpdate} section.` : 'Please analyze the PDF and determine which section of the report to update.'}\\n\\nHere is the current report structure:\\n\\`\\`\\`json\\n${viewContent}\\n\\`\\`\\`\\n\\nFor standardized tests like GFTA, CELF, etc., identify key scores and findings, and update the appropriate domain section. Extract any relevant phonological processes, error patterns, or specific strengths/needs.\\n\\nIMPORTANT: When extracting data from standardized tests, be sure to add the test's full name to the domain.assessmentTools array using the update_key command. For example, if analyzing GFTA-3 results for articulation, include \"assessmentTools\": [\"Goldman-Fristoe Test of Articulation, Third Edition (GFTA-3)\"] in your update. This helps track which tools were used for each domain.\\n\\nRespond with an update_key JSON command as described in the system prompt.`\n                    },\n                    {\n                        type: \"document\",\n                        source: {\n                            type: \"base64\",\n                            media_type: \"application/pdf\",\n                            data: normalizedInput\n                        }\n                    }\n                ];\n            } else {\n                // Construct message for text content\n                userContent = [\n                    {\n                        type: \"text\",\n                        text: `I need to update the speech-language report based on this new information:\n\"${normalizedInput}\"\n\nHere is the current report structure:\n\\`\\`\\`json\n${viewContent}\n\\`\\`\\`\n\n${sectionToUpdate === 'auto-detect' ? 'Please analyze the input and determine which section of the report to update.' : `Please update the ${sectionToUpdate} section.`}\n\nDO NOT use the text editor tool. Instead, respond with an update_key JSON command.\n\nFor example, if updating pragmatic domain strengths and adding assessment tools, respond with:\n\\`\\`\\`json\n{\n  \"command\": \"update_key\",\n  \"path\": \"assessmentResults.domains.pragmatic\",\n  \"action\": \"merge\",\n  \"value\": {\n    \"strengths\": [\"Student maintains eye contact during conversations\"],\n    \"assessmentTools\": [\"Clinical Evaluation of Language Fundamentals-5 (CELF-5)\"]\n  }\n}\n\\`\\`\\`\n\nGuidelines:\n- For strengths/needs arrays: use \"append\" and array values\n- For topic sentences: use \"replace\" and string value\n- Empty/missing fields need to be created with appropriate value types\n- Analyze which domain fits best: receptive, expressive, pragmatic, articulation, voice, fluency\n- The domains are found at the path \"assessmentResults.domains.[domainName]\"\n\nIMPORTANT: Format your entire response as a text message containing only the JSON command. DO NOT use the text editor tool.`\n                    }\n                ];\n            }\n            const firstApiPayload = {\n                model: 'claude-3-7-sonnet-20250219',\n                max_tokens: 1024,\n                system: systemPrompt,\n                tools: [\n                    {\n                        type: 'text_editor_20250124',\n                        name: 'str_replace_editor'\n                    }\n                ],\n                messages: [\n                    {\n                        role: 'user',\n                        content: userContent\n                    }\n                ]\n            };\n            console.log(`[${requestId}] 📤 First API payload prepared, user message length: ${normalizedInput.length}`);\n            const response = await fetch('https://api.anthropic.com/v1/messages', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'x-api-key': apiKey,\n                    'anthropic-version': '2023-06-01'\n                },\n                body: JSON.stringify(firstApiPayload)\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                console.log(`[${requestId}] ❌ First API call failed:`, errorData);\n                throw new Error(errorData.error?.message || `API error: ${response.status}`);\n            }\n            let claudeResponse = await response.json();\n            console.log(`[${requestId}] ✅ First Claude response received, content blocks:`, claudeResponse.content.map((block)=>({\n                    type: block.type,\n                    ...block.type === 'tool_use' ? {\n                        command: block.input?.command\n                    } : {}\n                })));\n            // Handle the two-way conversation flow with Claude for the text editor tool\n            let finalCommand = null;\n            // Check if Claude is using a tool\n            const toolUseBlock = claudeResponse.content.find((block)=>block.type === 'tool_use' && block.name === 'str_replace_editor');\n            // Log the tool use block\n            if (toolUseBlock) {\n                console.log(`[${requestId}] 🛠️ Claude is using tool: ${toolUseBlock.name}, command: ${toolUseBlock.input?.command}`);\n            } else {\n                console.log(`[${requestId}] ⚠️ No tool use block found in Claude's response`);\n            }\n            // If Claude is using the \"view\" command first (common with text editor)\n            if (toolUseBlock && toolUseBlock.input && toolUseBlock.input.command === 'view') {\n                console.log(`[${requestId}] 👁️ Claude is requesting to view content first. Sending content...`);\n                // Send back the content that Claude requested to view\n                console.log(`[${requestId}] 🔌 Making second API call to Claude with view result...`);\n                // Create a second API payload that's consistent with the first\n                let secondUserContent = [];\n                if (isPdfUpload) {\n                    // Construct message for PDF content with previous view result\n                    secondUserContent = [\n                        {\n                            type: \"text\",\n                            text: `I need to update the speech-language report based on the content in this PDF document. ${sectionToUpdate !== 'auto-detect' ? `Please focus on updating the ${sectionToUpdate} section.` : 'Please analyze the PDF and determine which section of the report to update.'}\\n\\nRespond with an update_key JSON command as described in the system prompt.`\n                        },\n                        {\n                            type: \"document\",\n                            source: {\n                                type: \"base64\",\n                                media_type: \"application/pdf\",\n                                data: normalizedInput\n                            }\n                        }\n                    ];\n                } else {\n                    // Construct message for text content with previous view result\n                    secondUserContent = [\n                        {\n                            type: \"text\",\n                            text: `I need to update the speech-language report based on this new information:\n\"${normalizedInput}\"\n\n${sectionToUpdate === 'auto-detect' ? 'Please analyze the input and determine which section of the report to update.' : `Please update the ${sectionToUpdate} section.`}\n\nDO NOT use the text editor tool. Instead, respond with an update_key JSON command.\n\nGuidelines:\n- For strengths/needs arrays: use \"append\" and array values\n- For topic sentences: use \"replace\" and string value\n- Empty/missing fields need to be created with appropriate value types\n- Analyze which domain fits best: receptive, expressive, pragmatic, articulation, voice, fluency\n- The domains are found at the path \"assessmentResults.domains.[domainName]\"\n\nIMPORTANT: Format your entire response as a text message containing only the JSON command. DO NOT use the text editor tool.`\n                        }\n                    ];\n                }\n                const secondApiPayload = {\n                    model: 'claude-3-7-sonnet-20250219',\n                    max_tokens: 1024,\n                    system: systemPrompt,\n                    tools: [\n                        {\n                            type: 'text_editor_20250124',\n                            name: 'str_replace_editor'\n                        }\n                    ],\n                    messages: [\n                        {\n                            role: 'user',\n                            content: secondUserContent\n                        },\n                        {\n                            role: 'assistant',\n                            content: [\n                                {\n                                    type: 'text',\n                                    text: 'I\\'ll help you update the report using the text editor tool.'\n                                },\n                                {\n                                    type: 'tool_use',\n                                    id: toolUseBlock.id,\n                                    name: 'str_replace_editor',\n                                    input: toolUseBlock.input\n                                }\n                            ]\n                        },\n                        {\n                            role: 'user',\n                            content: [\n                                {\n                                    type: 'tool_result',\n                                    tool_use_id: toolUseBlock.id,\n                                    content: viewContent\n                                }\n                            ]\n                        }\n                    ]\n                };\n                const secondResponse = await fetch('https://api.anthropic.com/v1/messages', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'x-api-key': apiKey,\n                        'anthropic-version': '2023-06-01'\n                    },\n                    body: JSON.stringify(secondApiPayload)\n                });\n                if (!secondResponse.ok) {\n                    const errorData = await secondResponse.json();\n                    console.log(`[${requestId}] ❌ Second API call failed:`, errorData);\n                    throw new Error(errorData.error?.message || `API error in second request: ${secondResponse.status}`);\n                }\n                // Get Claude's response with the actual edit\n                claudeResponse = await secondResponse.json();\n                console.log(`[${requestId}] ✅ Second Claude response received, content blocks:`, claudeResponse.content.map((block)=>({\n                        type: block.type,\n                        ...block.type === 'tool_use' ? {\n                            command: block.input?.command\n                        } : {}\n                    })));\n                // Now check for the str_replace command\n                const secondToolUseBlock = claudeResponse.content.find((block)=>block.type === 'tool_use' && block.name === 'str_replace_editor');\n                if (secondToolUseBlock) {\n                    console.log(`[${requestId}] 🛠️ Second response tool use: ${secondToolUseBlock.name}, command: ${secondToolUseBlock.input?.command}`);\n                    if (secondToolUseBlock.input && (secondToolUseBlock.input.command === 'str_replace' || secondToolUseBlock.input.command === 'insert')) {\n                        finalCommand = secondToolUseBlock.input;\n                        console.log(`[${requestId}] ✅ Got final command:`, {\n                            command: finalCommand.command,\n                            old_str: finalCommand.old_str ? `${finalCommand.old_str.substring(0, 50)}...` : undefined,\n                            new_str: finalCommand.new_str ? `${finalCommand.new_str.substring(0, 50)}...` : undefined,\n                            text: finalCommand.text ? `${finalCommand.text.substring(0, 50)}...` : undefined,\n                            position: finalCommand.position\n                        });\n                    } else {\n                        console.log(`[${requestId}] ⚠️ Second tool use block doesn't contain str_replace or insert command:`, secondToolUseBlock.input);\n                    }\n                } else {\n                    console.log(`[${requestId}] ⚠️ No tool use block found in Claude's second response`);\n                }\n            } else if (toolUseBlock && toolUseBlock.input && (toolUseBlock.input.command === 'str_replace' || toolUseBlock.input.command === 'insert')) {\n                // Claude directly used str_replace or insert (unusual but possible)\n                finalCommand = toolUseBlock.input;\n                console.log(`[${requestId}] ✅ Got final command directly from first response:`, {\n                    command: finalCommand.command,\n                    old_str: finalCommand.old_str ? `${finalCommand.old_str.substring(0, 50)}...` : undefined,\n                    new_str: finalCommand.new_str ? `${finalCommand.new_str.substring(0, 50)}...` : undefined,\n                    text: finalCommand.text ? `${finalCommand.text.substring(0, 50)}...` : undefined,\n                    position: finalCommand.position\n                });\n            } else {\n                console.log(`[${requestId}] ⚠️ No usable command found in Claude's responses`);\n            }\n            // Check if there's a JSON path update command in Claude's response text\n            let updateKeyCommand = null;\n            const textBlocks = claudeResponse.content.filter((block)=>block.type === 'text');\n            for (const block of textBlocks){\n                // Look for JSON objects in the text that might contain our command\n                const jsonMatches = block.text.match(/```json\\s*({[\\s\\S]*?})\\s*```|({[\\s\\S]*\"command\"[\\s\\S]*})/g);\n                if (jsonMatches) {\n                    for (const match of jsonMatches){\n                        try {\n                            // Extract the JSON object from markdown code blocks or plain text\n                            const jsonStr = match.replace(/```json\\s*|\\s*```/g, '').trim();\n                            const jsonObj = JSON.parse(jsonStr);\n                            // Check if this is an update_key command\n                            if (jsonObj.command === 'update_key' && jsonObj.path && jsonObj.action && jsonObj.value !== undefined) {\n                                updateKeyCommand = jsonObj;\n                                console.log(`[${requestId}] 🔑 Found update_key command in text:`, updateKeyCommand);\n                                break;\n                            }\n                        } catch (e) {\n                            console.warn(`[${requestId}] ⚠️ Failed to parse potential JSON command:`, e);\n                        }\n                    }\n                }\n                if (updateKeyCommand) break;\n            }\n            // Process the command if we have one (either update_key or text editor command)\n            if (updateKeyCommand) {\n                console.log(`[${requestId}] 🔄 Processing update_key command...`);\n                console.log(`[${requestId}] 📊 Update details: path=${updateKeyCommand.path}, action=${updateKeyCommand.action}`);\n                let updatedReport = {\n                    ...report\n                };\n                let affectedDomain = '';\n                // Extract domain if path starts with domains.X\n                if (updateKeyCommand.path.startsWith('domains.')) {\n                    const pathParts = updateKeyCommand.path.split('.');\n                    if (pathParts.length >= 2) {\n                        affectedDomain = pathParts[1];\n                        console.log(`[${requestId}] 🎯 Affected domain from path: ${affectedDomain}`);\n                    }\n                }\n                try {\n                    // Apply the update based on the path and action\n                    const pathParts = updateKeyCommand.path.split('.');\n                    let current = updatedReport;\n                    // Navigate to the parent object of the target property\n                    for(let i = 0; i < pathParts.length - 1; i++){\n                        if (!current[pathParts[i]]) {\n                            // Create missing objects in the path\n                            current[pathParts[i]] = {};\n                            console.log(`[${requestId}] 🏗️ Created missing object at ${pathParts.slice(0, i + 1).join('.')}`);\n                        }\n                        current = current[pathParts[i]];\n                    }\n                    // Get the target property name\n                    const targetProp = pathParts[pathParts.length - 1];\n                    // Apply the action\n                    switch(updateKeyCommand.action){\n                        case 'append':\n                            // For arrays, append the new values\n                            if (!current[targetProp]) {\n                                current[targetProp] = [];\n                            } else if (!Array.isArray(current[targetProp])) {\n                                // Convert to array if not already\n                                current[targetProp] = [\n                                    current[targetProp]\n                                ];\n                            }\n                            // Handle both single value and array of values\n                            if (Array.isArray(updateKeyCommand.value)) {\n                                current[targetProp] = [\n                                    ...current[targetProp],\n                                    ...updateKeyCommand.value\n                                ];\n                            } else {\n                                current[targetProp].push(updateKeyCommand.value);\n                            }\n                            console.log(`[${requestId}] ✅ Appended to ${updateKeyCommand.path}, new length: ${current[targetProp].length}`);\n                            break;\n                        case 'replace':\n                            // Replace the value entirely\n                            current[targetProp] = updateKeyCommand.value;\n                            console.log(`[${requestId}] ✅ Replaced ${updateKeyCommand.path}`);\n                            break;\n                        case 'merge':\n                            // For objects, merge properties\n                            if (!current[targetProp] || typeof current[targetProp] !== 'object' || Array.isArray(current[targetProp])) {\n                                current[targetProp] = {};\n                            }\n                            current[targetProp] = {\n                                ...current[targetProp],\n                                ...updateKeyCommand.value\n                            };\n                            console.log(`[${requestId}] ✅ Merged into ${updateKeyCommand.path}`);\n                            break;\n                        default:\n                            console.warn(`[${requestId}] ⚠️ Unknown action: ${updateKeyCommand.action}`);\n                    }\n                    // Update metadata\n                    updatedReport.metadata.lastUpdated = new Date().toISOString();\n                    updatedReport.metadata.version = (updatedReport.metadata.version || 0) + 1;\n                    console.log(`[${requestId}] ✅ Successfully applied update_key command`);\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        report: updatedReport,\n                        command: updateKeyCommand,\n                        affectedDomain\n                    });\n                } catch (error) {\n                    console.error(`[${requestId}] ❌ Error applying update_key command:`, error);\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        error: 'Failed to apply update_key command',\n                        details: error instanceof Error ? error.message : 'Unknown error',\n                        command: updateKeyCommand\n                    }, {\n                        status: 400\n                    });\n                }\n            } else if (finalCommand) {\n                console.log(`[${requestId}] 🔄 Processing ${finalCommand.command} command...`);\n                // Get Claude's analysis of which domain/section to update\n                let affectedDomain = '';\n                let updatedReport = {\n                    ...report\n                };\n                if (sectionToUpdate === 'auto-detect') {\n                    // Extract domain from Claude's response text\n                    const textContent = claudeResponse.content.filter((block)=>block.type === 'text').map((block)=>block.text).join('\\n');\n                    // Extract domain from text - look for specific patterns like \"pragmatic domain\" or \"update the pragmatic\"\n                    console.log(`[${requestId}] 🔍 Analyzing text for domain keywords...`);\n                    // List of domain keywords to search for\n                    const domainKeywords = [\n                        'receptive',\n                        'expressive',\n                        'pragmatic',\n                        'articulation',\n                        'voice',\n                        'fluency'\n                    ];\n                    let foundDomain = '';\n                    // First look for the path pattern in JSON commands\n                    const pathRegex = /\"path\":\\s*\"assessmentResults\\.domains\\.([^.\"]+)\"/;\n                    const pathMatch = textContent.match(pathRegex);\n                    if (pathMatch && pathMatch[1]) {\n                        foundDomain = pathMatch[1];\n                        console.log(`[${requestId}] 🔍 Found domain in JSON path: \"${foundDomain}\"`);\n                    } else {\n                        // Check for domain keywords in the text\n                        for (const domain of domainKeywords){\n                            const pattern = new RegExp(`\\\\b${domain}\\\\b`, 'i');\n                            if (pattern.test(textContent)) {\n                                console.log(`[${requestId}] 🔍 Found domain keyword in text: \"${domain}\"`);\n                                foundDomain = domain;\n                                break;\n                            }\n                        }\n                    }\n                    affectedDomain = foundDomain;\n                    console.log(`[${requestId}] 🔍 Auto-detected domain: ${affectedDomain || 'none detected'}`);\n                    console.log(`[${requestId}] 📝 Text content for domain detection:`, textContent);\n                } else if (sectionToUpdate.startsWith('assessmentResults.domains.')) {\n                    affectedDomain = sectionToUpdate.split('.')[2];\n                    console.log(`[${requestId}] 🎯 Using specified domain: ${affectedDomain}`);\n                }\n                if (finalCommand.command === 'str_replace') {\n                    console.log(`[${requestId}] 🔄 Processing str_replace command...`);\n                    console.log(`[${requestId}] ⚠️ Note: str_replace is being used instead of the recommended update_key command`);\n                    let updatedContent = '';\n                    try {\n                        // First, check if the str_replace command is targeting a specific domain\n                        // We need to detect this by seeing if the old_str contains specific domain JSON\n                        const strContainsDomainPattern = Object.keys(report.assessmentResults.domains).some((domain)=>{\n                            const pattern = `\"${domain}\":\\\\s*{`;\n                            const regex = new RegExp(pattern, 'i');\n                            return regex.test(finalCommand.old_str || '');\n                        });\n                        console.log(`[${requestId}] 🔍 Command contains domain pattern in old_str: ${strContainsDomainPattern}`);\n                        // If we've auto-detected a domain and it exists in the report\n                        if (affectedDomain && report.assessmentResults.domains[affectedDomain]) {\n                            console.log(`[${requestId}] 🔄 Updating specific domain: ${affectedDomain}`);\n                            // Check if Claude's str_replace is directly targeting this domain section\n                            if (finalCommand.old_str && finalCommand.old_str.includes(`\"${affectedDomain}\"`)) {\n                                console.log(`[${requestId}] 🎯 Direct match: Claude's command targets ${affectedDomain} domain`);\n                                // Implement a more careful search and replace for the specific domain\n                                // Start with the full report JSON\n                                const fullReportJson = JSON.stringify(report, null, 2);\n                                // Find the domain section in the JSON\n                                const domainPattern = new RegExp(`(\\\\s*\"${affectedDomain}\"\\\\s*:\\\\s*{[^}]*})`, 's');\n                                const domainMatch = fullReportJson.match(domainPattern);\n                                if (domainMatch) {\n                                    console.log(`[${requestId}] ✅ Found domain section in JSON`);\n                                    // Replace just the domain section\n                                    updatedContent = fullReportJson.replace(domainMatch[0], finalCommand.new_str.trim());\n                                    try {\n                                        // Parse the complete updated report\n                                        updatedReport = JSON.parse(updatedContent);\n                                        console.log(`[${requestId}] ✅ Successfully replaced domain section in full report`);\n                                    } catch (parseError) {\n                                        console.error(`[${requestId}] ❌ JSON parse error after domain replacement:`, parseError);\n                                        // Fallback to updating just the domain section\n                                        const domainSection = JSON.parse(JSON.stringify(report.assessmentResults.domains[affectedDomain]));\n                                        const domainJson = JSON.stringify(domainSection, null, 2);\n                                        try {\n                                            // Try to extract just the domain object from Claude's new_str\n                                            const domainObjectMatch = finalCommand.new_str.match(/{\\s*\"topicSentence\".*}/s);\n                                            if (domainObjectMatch) {\n                                                const newDomainSection = JSON.parse(domainObjectMatch[0]);\n                                                updatedReport = updateDomainSection(report, affectedDomain, newDomainSection);\n                                                console.log(`[${requestId}] ✅ Fallback: Updated domain section via extraction`);\n                                            } else {\n                                                throw new Error('Could not extract domain object from new_str');\n                                            }\n                                        } catch (extractError) {\n                                            console.error(`[${requestId}] ❌ Failed to extract domain object:`, extractError);\n                                            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                                                error: 'Failed to update report - invalid JSON format',\n                                                details: {\n                                                    originalError: parseError.message,\n                                                    extractError: extractError.message\n                                                }\n                                            }, {\n                                                status: 400\n                                            });\n                                        }\n                                    }\n                                } else {\n                                    console.error(`[${requestId}] ❌ Could not find domain section in JSON`);\n                                    // Fallback to updating via domain object\n                                    const domainSection = JSON.parse(JSON.stringify(report.assessmentResults.domains[affectedDomain]));\n                                    console.log(`[${requestId}] 📊 Original domain section:`, domainSection);\n                                    // Manually construct an updated domain section based on the content\n                                    const extractedContent = {};\n                                    // Try to extract topic sentence\n                                    const tsMatch = finalCommand.new_str.match(/\"topicSentence\":\\s*\"([^\"]*)\"/);\n                                    if (tsMatch) extractedContent['topicSentence'] = tsMatch[1];\n                                    // Try to extract evidence (simplified)\n                                    const evidenceMatch = finalCommand.new_str.match(/\"evidence\":\\s*\\[(.*?)\\]/s);\n                                    if (evidenceMatch) {\n                                        try {\n                                            extractedContent['evidence'] = JSON.parse(`[${evidenceMatch[1]}]`);\n                                        } catch (e) {\n                                            console.warn(`[${requestId}] ⚠️ Could not parse evidence`, e);\n                                        }\n                                    }\n                                    // Try to extract challenges (simplified)\n                                    const challengesMatch = finalCommand.new_str.match(/\"challenges\":\\s*\\[(.*?)\\]/s);\n                                    if (challengesMatch) {\n                                        try {\n                                            extractedContent['challenges'] = JSON.parse(`[${challengesMatch[1]}]`);\n                                        } catch (e) {\n                                            console.warn(`[${requestId}] ⚠️ Could not parse challenges`, e);\n                                        }\n                                    }\n                                    // Update the domain with the extracted content\n                                    updatedReport = updateDomainSection(report, affectedDomain, extractedContent);\n                                    console.log(`[${requestId}] ✅ Used extraction to update domain section`);\n                                }\n                            } else {\n                                // Standard domain section update\n                                const domainSection = JSON.parse(JSON.stringify(report.assessmentResults.domains[affectedDomain]));\n                                console.log(`[${requestId}] 📊 Original domain section:`, domainSection);\n                                console.log(`[${requestId}] 🔄 Applying str_replace:`, {\n                                    old_str_length: finalCommand.old_str?.length || 0,\n                                    new_str_length: finalCommand.new_str?.length || 0\n                                });\n                                // Instead of a general replace, we'll try to improve the domain directly\n                                if (finalCommand.new_str && finalCommand.new_str.includes('\"topicSentence\"')) {\n                                    // Try to extract JSON structure from the new string\n                                    const jsonMatch = finalCommand.new_str.match(/({[\\s\\S]*})/);\n                                    if (jsonMatch) {\n                                        try {\n                                            // Parse the JSON from the new string\n                                            const updatedDomainSection = JSON.parse(jsonMatch[1]);\n                                            // Update the specific domain in the report\n                                            updatedReport = updateDomainSection(report, affectedDomain, updatedDomainSection);\n                                            console.log(`[${requestId}] ✅ Successfully extracted and updated domain JSON`);\n                                        } catch (jsonError) {\n                                            console.error(`[${requestId}] ❌ Error parsing extracted JSON:`, jsonError);\n                                            // Fallback to standard replacement\n                                            updatedContent = JSON.stringify(domainSection).replace(finalCommand.old_str || '', finalCommand.new_str || '');\n                                            const updatedDomainSection = JSON.parse(updatedContent);\n                                            updatedReport = updateDomainSection(report, affectedDomain, updatedDomainSection);\n                                        }\n                                    } else {\n                                        // No JSON structure found, use standard replacement\n                                        updatedContent = JSON.stringify(domainSection).replace(finalCommand.old_str || '', finalCommand.new_str || '');\n                                        const updatedDomainSection = JSON.parse(updatedContent);\n                                        updatedReport = updateDomainSection(report, affectedDomain, updatedDomainSection);\n                                    }\n                                } else {\n                                    // Standard replacement\n                                    updatedContent = JSON.stringify(domainSection).replace(finalCommand.old_str || '', finalCommand.new_str || '');\n                                    const updatedDomainSection = JSON.parse(updatedContent);\n                                    updatedReport = updateDomainSection(report, affectedDomain, updatedDomainSection);\n                                }\n                                console.log(`[${requestId}] ✅ Domain section updated successfully`);\n                            }\n                        } else if (strContainsDomainPattern) {\n                            // We detected a domain pattern in the str_replace command, so try to extract the domain name\n                            console.log(`[${requestId}] 🔎 Trying to extract domain from str_replace command...`);\n                            let extractedDomain = '';\n                            for (const domain of Object.keys(report.assessmentResults.domains)){\n                                if (finalCommand.old_str?.includes(`\"${domain}\"`)) {\n                                    extractedDomain = domain;\n                                    break;\n                                }\n                            }\n                            if (extractedDomain) {\n                                console.log(`[${requestId}] 🔍 Extracted domain from command: ${extractedDomain}`);\n                                affectedDomain = extractedDomain;\n                                // Now update using the full report update, then re-process with the correct domain\n                                updatedContent = JSON.stringify(report, null, 2).replace(finalCommand.old_str || '', finalCommand.new_str || '');\n                                try {\n                                    updatedReport = JSON.parse(updatedContent);\n                                    console.log(`[${requestId}] ✅ Updated report with extracted domain: ${extractedDomain}`);\n                                } catch (parseError) {\n                                    console.error(`[${requestId}] ❌ Parse error with extracted domain update:`, parseError);\n                                    // Fallback to just updating the domain section\n                                    const domainSection = JSON.parse(JSON.stringify(report.assessmentResults.domains[extractedDomain]));\n                                    const updatedDomainSection = {\n                                        ...domainSection,\n                                        topicSentence: finalCommand.new_str.match(/\"topicSentence\":\\s*\"([^\"]*)\"/)?.[1] || domainSection.topicSentence,\n                                        evidence: [\n                                            ...domainSection.evidence || [],\n                                            normalizedInput\n                                        ]\n                                    };\n                                    updatedReport = updateDomainSection(report, extractedDomain, updatedDomainSection);\n                                }\n                            } else {\n                                // Fall back to full report update\n                                console.log(`[${requestId}] 🔄 Updating entire report (domain pattern found but couldn't extract domain)`);\n                                updatedContent = JSON.stringify(report, null, 2).replace(finalCommand.old_str || '', finalCommand.new_str || '');\n                                updatedReport = JSON.parse(updatedContent);\n                            }\n                        } else {\n                            // For whole report updates or other sections\n                            if (sectionToUpdate === 'auto-detect') {\n                                console.log(`[${requestId}] 🔄 Updating entire report (no specific domain identified)`);\n                                // Full report update\n                                updatedContent = JSON.stringify(report, null, 2).replace(finalCommand.old_str || '', finalCommand.new_str || '');\n                                updatedReport = JSON.parse(updatedContent);\n                                console.log(`[${requestId}] ✅ Full report updated successfully`);\n                            } else {\n                                console.log(`[${requestId}] 🔄 Updating specific non-domain section: ${sectionToUpdate}`);\n                                // Specific non-domain section update\n                                updatedContent = viewContent.replace(finalCommand.old_str || '', finalCommand.new_str || '');\n                                // This is simplified; you'd need to merge this into the right section\n                                // based on the sectionToUpdate path\n                                try {\n                                    updatedReport = {\n                                        ...report\n                                    };\n                                    // Simple path-based setter (would need a more robust version in production)\n                                    const pathParts = sectionToUpdate.split('.');\n                                    let current = updatedReport;\n                                    for(let i = 0; i < pathParts.length - 1; i++){\n                                        current = current[pathParts[i]];\n                                    }\n                                    current[pathParts[pathParts.length - 1]] = JSON.parse(updatedContent);\n                                    console.log(`[${requestId}] ✅ Specific section updated successfully: ${sectionToUpdate}`);\n                                } catch (e) {\n                                    console.error(`[${requestId}] ❌ Error updating specific path:`, e);\n                                }\n                            }\n                        }\n                    } catch (parseError) {\n                        console.error(`[${requestId}] ❌ Error parsing updated JSON:`, parseError);\n                        console.log(`[${requestId}] 📋 Problem content:`, updatedContent);\n                        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                            error: 'Invalid JSON produced by text editor command',\n                            originalCommand: finalCommand,\n                            parseError: parseError.message\n                        }, {\n                            status: 400\n                        });\n                    }\n                    // Update metadata\n                    const originalTimestamp = updatedReport.metadata.lastUpdated;\n                    updatedReport.metadata.lastUpdated = new Date().toISOString();\n                    updatedReport.metadata.version = (updatedReport.metadata.version || 0) + 1;\n                    console.log(`[${requestId}] 📊 Metadata updated:`, {\n                        oldTimestamp: originalTimestamp,\n                        newTimestamp: updatedReport.metadata.lastUpdated,\n                        newVersion: updatedReport.metadata.version\n                    });\n                    console.log(`[${requestId}] ✅ Report update complete, returning response`);\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        report: updatedReport,\n                        command: finalCommand,\n                        affectedDomain\n                    });\n                } else if (finalCommand.command === 'insert') {\n                    console.log(`[${requestId}] ⚠️ Insert command not fully implemented`);\n                    // Handle insert command - this would be more complex and depends on your specific needs\n                    // For simplicity in this demo, we'll just acknowledge it\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        report,\n                        error: 'Insert command not fully implemented yet',\n                        command: finalCommand\n                    });\n                }\n            }\n            // If no tool command found, return the original report\n            console.log(`[${requestId}] ⚠️ No tool command found in Claude's response, returning original report`);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                report,\n                error: 'Claude did not provide a JSON update command'\n            });\n        } catch (apiError) {\n            console.error(`[${requestId}] ❌ Error calling Claude API:`, apiError);\n            // Fallback for testing without API\n            console.log(`[${requestId}] ⚠️ Using fallback mode for testing`);\n            const updatedReport = {\n                ...report\n            };\n            // Simple domain detection based on keywords\n            const inputLower = input.toLowerCase();\n            let targetDomain = 'articulation';\n            if (inputLower.includes('understand') || inputLower.includes('follow') || inputLower.includes('direction')) {\n                targetDomain = 'receptive';\n            } else if (inputLower.includes('express') || inputLower.includes('vocabulary') || inputLower.includes('sentence')) {\n                targetDomain = 'expressive';\n            } else if (inputLower.includes('social') || inputLower.includes('eye contact') || inputLower.includes('peer')) {\n                targetDomain = 'pragmatic';\n            } else if (inputLower.includes('sound') || inputLower.includes('pronounce') || inputLower.includes('intelligible')) {\n                targetDomain = 'articulation';\n            }\n            console.log(`[${requestId}] 🔍 Fallback detected domain: ${targetDomain}`);\n            // Create a simulated update\n            const updates = {\n                strengths: [\n                    input\n                ]\n            };\n            if (!updatedReport.assessmentResults.domains[targetDomain].topicSentence) {\n                updates.topicSentence = `Student demonstrates challenges in ${targetDomain} language skills.`;\n            }\n            const simulatedReport = updateDomainSection(updatedReport, targetDomain, updates);\n            console.log(`[${requestId}] ✅ Simulated update applied to domain: ${targetDomain}`);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                report: simulatedReport,\n                apiError: apiError instanceof Error ? apiError.message : 'API call failed',\n                simulated: true,\n                affectedDomain: targetDomain\n            });\n        }\n    } catch (error) {\n        console.error(`[${requestId}] ❌ Error processing text editor request:`, error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Failed to process the request',\n            details: error instanceof Error ? error.message : 'Unknown error'\n        }, {\n            status: 500\n        });\n    } finally{\n        console.log(`[${requestId}] 🏁 REQUEST COMPLETED: Text Editor API`);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/text-editor-test/route.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@opentelemetry"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftext-editor-test%2Froute&page=%2Fapi%2Ftext-editor-test%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftext-editor-test%2Froute.ts&appDir=%2FUsers%2Fbrandonbrewer%2FDocuments%2FLinguosity%2FLinguosity%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fbrandonbrewer%2FDocuments%2FLinguosity%2FLinguosity&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();