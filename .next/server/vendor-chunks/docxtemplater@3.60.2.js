"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/docxtemplater@3.60.2";
exports.ids = ["vendor-chunks/docxtemplater@3.60.2"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/collect-content-types.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/collect-content-types.js ***!
  \********************************************************************************************************/
/***/ ((module) => {

eval("\n\nvar ctXML = \"[Content_Types].xml\";\nfunction collectContentTypes(overrides, defaults, zip) {\n  var partNames = {};\n  for (var _i2 = 0; _i2 < overrides.length; _i2++) {\n    var override = overrides[_i2];\n    var contentType = override.getAttribute(\"ContentType\");\n    var partName = override.getAttribute(\"PartName\").substr(1);\n    partNames[partName] = contentType;\n  }\n  var _loop = function _loop() {\n    var def = defaults[_i4];\n    var contentType = def.getAttribute(\"ContentType\");\n    var extension = def.getAttribute(\"Extension\");\n    zip.file(/./).map(function (_ref) {\n      var name = _ref.name;\n      if (name.slice(name.length - extension.length) === extension && !partNames[name] && name !== ctXML) {\n        partNames[name] = contentType;\n      }\n    });\n  };\n  for (var _i4 = 0; _i4 < defaults.length; _i4++) {\n    _loop();\n  }\n  return partNames;\n}\nmodule.exports = collectContentTypes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZG9jeHRlbXBsYXRlckAzLjYwLjIvbm9kZV9tb2R1bGVzL2RvY3h0ZW1wbGF0ZXIvanMvY29sbGVjdC1jb250ZW50LXR5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix3QkFBd0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLG9CQUFvQix1QkFBdUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2JyYW5kb25icmV3ZXIvRG9jdW1lbnRzL0xpbmd1b3NpdHkvTGluZ3Vvc2l0eS9ub2RlX21vZHVsZXMvLnBucG0vZG9jeHRlbXBsYXRlckAzLjYwLjIvbm9kZV9tb2R1bGVzL2RvY3h0ZW1wbGF0ZXIvanMvY29sbGVjdC1jb250ZW50LXR5cGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgY3RYTUwgPSBcIltDb250ZW50X1R5cGVzXS54bWxcIjtcbmZ1bmN0aW9uIGNvbGxlY3RDb250ZW50VHlwZXMob3ZlcnJpZGVzLCBkZWZhdWx0cywgemlwKSB7XG4gIHZhciBwYXJ0TmFtZXMgPSB7fTtcbiAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgb3ZlcnJpZGVzLmxlbmd0aDsgX2kyKyspIHtcbiAgICB2YXIgb3ZlcnJpZGUgPSBvdmVycmlkZXNbX2kyXTtcbiAgICB2YXIgY29udGVudFR5cGUgPSBvdmVycmlkZS5nZXRBdHRyaWJ1dGUoXCJDb250ZW50VHlwZVwiKTtcbiAgICB2YXIgcGFydE5hbWUgPSBvdmVycmlkZS5nZXRBdHRyaWJ1dGUoXCJQYXJ0TmFtZVwiKS5zdWJzdHIoMSk7XG4gICAgcGFydE5hbWVzW3BhcnROYW1lXSA9IGNvbnRlbnRUeXBlO1xuICB9XG4gIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKCkge1xuICAgIHZhciBkZWYgPSBkZWZhdWx0c1tfaTRdO1xuICAgIHZhciBjb250ZW50VHlwZSA9IGRlZi5nZXRBdHRyaWJ1dGUoXCJDb250ZW50VHlwZVwiKTtcbiAgICB2YXIgZXh0ZW5zaW9uID0gZGVmLmdldEF0dHJpYnV0ZShcIkV4dGVuc2lvblwiKTtcbiAgICB6aXAuZmlsZSgvLi8pLm1hcChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIG5hbWUgPSBfcmVmLm5hbWU7XG4gICAgICBpZiAobmFtZS5zbGljZShuYW1lLmxlbmd0aCAtIGV4dGVuc2lvbi5sZW5ndGgpID09PSBleHRlbnNpb24gJiYgIXBhcnROYW1lc1tuYW1lXSAmJiBuYW1lICE9PSBjdFhNTCkge1xuICAgICAgICBwYXJ0TmFtZXNbbmFtZV0gPSBjb250ZW50VHlwZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbiAgZm9yICh2YXIgX2k0ID0gMDsgX2k0IDwgZGVmYXVsdHMubGVuZ3RoOyBfaTQrKykge1xuICAgIF9sb29wKCk7XG4gIH1cbiAgcmV0dXJuIHBhcnROYW1lcztcbn1cbm1vZHVsZS5leHBvcnRzID0gY29sbGVjdENvbnRlbnRUeXBlczsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/collect-content-types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/content-types.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/content-types.js ***!
  \************************************************************************************************/
/***/ ((module) => {

eval("\n\nvar coreContentType = \"application/vnd.openxmlformats-package.core-properties+xml\";\nvar appContentType = \"application/vnd.openxmlformats-officedocument.extended-properties+xml\";\nvar customContentType = \"application/vnd.openxmlformats-officedocument.custom-properties+xml\";\nvar settingsContentType = \"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml\";\nvar diagramDataContentType = \"application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml\";\nvar diagramDrawingContentType = \"application/vnd.ms-office.drawingml.diagramDrawing+xml\";\nmodule.exports = {\n  settingsContentType: settingsContentType,\n  coreContentType: coreContentType,\n  appContentType: appContentType,\n  customContentType: customContentType,\n  diagramDataContentType: diagramDataContentType,\n  diagramDrawingContentType: diagramDrawingContentType\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZG9jeHRlbXBsYXRlckAzLjYwLjIvbm9kZV9tb2R1bGVzL2RvY3h0ZW1wbGF0ZXIvanMvY29udGVudC10eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvYnJhbmRvbmJyZXdlci9Eb2N1bWVudHMvTGluZ3Vvc2l0eS9MaW5ndW9zaXR5L25vZGVfbW9kdWxlcy8ucG5wbS9kb2N4dGVtcGxhdGVyQDMuNjAuMi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy9jb250ZW50LXR5cGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgY29yZUNvbnRlbnRUeXBlID0gXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtcGFja2FnZS5jb3JlLXByb3BlcnRpZXMreG1sXCI7XG52YXIgYXBwQ29udGVudFR5cGUgPSBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5leHRlbmRlZC1wcm9wZXJ0aWVzK3htbFwiO1xudmFyIGN1c3RvbUNvbnRlbnRUeXBlID0gXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuY3VzdG9tLXByb3BlcnRpZXMreG1sXCI7XG52YXIgc2V0dGluZ3NDb250ZW50VHlwZSA9IFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuc2V0dGluZ3MreG1sXCI7XG52YXIgZGlhZ3JhbURhdGFDb250ZW50VHlwZSA9IFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LmRyYXdpbmdtbC5kaWFncmFtRGF0YSt4bWxcIjtcbnZhciBkaWFncmFtRHJhd2luZ0NvbnRlbnRUeXBlID0gXCJhcHBsaWNhdGlvbi92bmQubXMtb2ZmaWNlLmRyYXdpbmdtbC5kaWFncmFtRHJhd2luZyt4bWxcIjtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXR0aW5nc0NvbnRlbnRUeXBlOiBzZXR0aW5nc0NvbnRlbnRUeXBlLFxuICBjb3JlQ29udGVudFR5cGU6IGNvcmVDb250ZW50VHlwZSxcbiAgYXBwQ29udGVudFR5cGU6IGFwcENvbnRlbnRUeXBlLFxuICBjdXN0b21Db250ZW50VHlwZTogY3VzdG9tQ29udGVudFR5cGUsXG4gIGRpYWdyYW1EYXRhQ29udGVudFR5cGU6IGRpYWdyYW1EYXRhQ29udGVudFR5cGUsXG4gIGRpYWdyYW1EcmF3aW5nQ29udGVudFR5cGU6IGRpYWdyYW1EcmF3aW5nQ29udGVudFR5cGVcbn07Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/content-types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/doc-utils.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/doc-utils.js ***!
  \********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nvar _require = __webpack_require__(/*! @xmldom/xmldom */ \"(ssr)/./node_modules/.pnpm/@xmldom+xmldom@0.9.8/node_modules/@xmldom/xmldom/lib/index.js\"),\n  DOMParser = _require.DOMParser,\n  XMLSerializer = _require.XMLSerializer;\nvar _require2 = __webpack_require__(/*! ./errors.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/errors.js\"),\n  throwXmlTagNotFound = _require2.throwXmlTagNotFound;\nvar _require3 = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/utils.js\"),\n  last = _require3.last,\n  first = _require3.first;\nfunction isWhiteSpace(value) {\n  return /^[ \\n\\r\\t]+$/.test(value);\n}\nfunction parser(tag) {\n  return {\n    get: function get(scope) {\n      if (tag === \".\") {\n        return scope;\n      }\n      if (scope) {\n        return scope[tag];\n      }\n      return scope;\n    }\n  };\n}\nvar attrToRegex = {};\nfunction setSingleAttribute(partValue, attr, attrValue) {\n  var regex;\n  // Stryker disable next-line all : because this is an optimisation\n  if (attrToRegex[attr]) {\n    regex = attrToRegex[attr];\n  } else {\n    regex = new RegExp(\"(<.* \".concat(attr, \"=\\\")([^\\\"]*)(\\\".*)$\"));\n    attrToRegex[attr] = regex;\n  }\n  if (regex.test(partValue)) {\n    return partValue.replace(regex, \"$1\".concat(attrValue, \"$3\"));\n  }\n  var end = partValue.lastIndexOf(\"/>\");\n  if (end === -1) {\n    end = partValue.lastIndexOf(\">\");\n  }\n  return partValue.substr(0, end) + \" \".concat(attr, \"=\\\"\").concat(attrValue, \"\\\"\") + partValue.substr(end);\n}\nfunction getSingleAttribute(value, attributeName) {\n  var index = value.indexOf(\" \".concat(attributeName, \"=\\\"\"));\n  if (index === -1) {\n    return null;\n  }\n  var startIndex = value.substr(index).search(/[\"']/) + index;\n  var endIndex = value.substr(startIndex + 1).search(/[\"']/) + startIndex;\n  return value.substr(startIndex + 1, endIndex - startIndex);\n}\nfunction endsWith(str, suffix) {\n  return str.indexOf(suffix, str.length - suffix.length) !== -1;\n}\nfunction startsWith(str, prefix) {\n  return str.substring(0, prefix.length) === prefix;\n}\nfunction getDuplicates(arr) {\n  var duplicates = [];\n  var hash = {},\n    result = [];\n  for (var i = 0, l = arr.length; i < l; ++i) {\n    if (!hash[arr[i]]) {\n      hash[arr[i]] = true;\n      result.push(arr[i]);\n    } else {\n      duplicates.push(arr[i]);\n    }\n  }\n  return duplicates;\n}\nfunction uniq(arr) {\n  var hash = {},\n    result = [];\n  for (var i = 0, l = arr.length; i < l; ++i) {\n    if (!hash[arr[i]]) {\n      hash[arr[i]] = true;\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\nfunction chunkBy(parsed, f) {\n  var chunks = [[]];\n  for (var _i2 = 0; _i2 < parsed.length; _i2++) {\n    var p = parsed[_i2];\n    var currentChunk = chunks[chunks.length - 1];\n    var res = f(p);\n    if (res === \"start\") {\n      chunks.push([p]);\n    } else if (res === \"end\") {\n      currentChunk.push(p);\n      chunks.push([]);\n    } else {\n      currentChunk.push(p);\n    }\n  } // Remove empty chunks\n  var result = [];\n  for (var _i4 = 0; _i4 < chunks.length; _i4++) {\n    var chunk = chunks[_i4];\n    if (chunk.length > 0) {\n      result.push(chunk);\n    }\n  }\n  return result;\n}\nfunction getDefaults() {\n  return {\n    errorLogging: \"json\",\n    stripInvalidXMLChars: false,\n    paragraphLoop: false,\n    nullGetter: function nullGetter(part) {\n      return part.module ? \"\" : \"undefined\";\n    },\n    xmlFileNames: [\"[Content_Types].xml\"],\n    parser: parser,\n    linebreaks: false,\n    fileTypeConfig: null,\n    delimiters: {\n      start: \"{\",\n      end: \"}\"\n    },\n    syntax: {\n      changeDelimiterPrefix: \"=\"\n    }\n  };\n}\nfunction xml2str(xmlNode) {\n  return new XMLSerializer().serializeToString(xmlNode).replace(/xmlns(:[a-z0-9]+)?=\"\" ?/g, \"\");\n}\nfunction str2xml(str) {\n  if (str.charCodeAt(0) === 65279) {\n    // BOM sequence\n    str = str.substr(1);\n  }\n  return new DOMParser().parseFromString(str, \"text/xml\");\n}\nvar charMap = [[\"&\", \"&amp;\"], [\"<\", \"&lt;\"], [\">\", \"&gt;\"], ['\"', \"&quot;\"], [\"'\", \"&apos;\"]];\nvar charMapRegexes = charMap.map(function (_ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n    endChar = _ref2[0],\n    startChar = _ref2[1];\n  return {\n    rstart: new RegExp(startChar, \"g\"),\n    rend: new RegExp(endChar, \"g\"),\n    start: startChar,\n    end: endChar\n  };\n});\nfunction wordToUtf8(string) {\n  for (var i = charMapRegexes.length - 1; i >= 0; i--) {\n    var r = charMapRegexes[i];\n    string = string.replace(r.rstart, r.end);\n  }\n  return string;\n}\nfunction utf8ToWord(string) {\n  // To make sure that the object given is a string (this is a noop for strings).\n  string = string.toString();\n  var r;\n  for (var i = 0, l = charMapRegexes.length; i < l; i++) {\n    r = charMapRegexes[i];\n    string = string.replace(r.rend, r.start);\n  }\n  return string;\n}\n\n// This function is written with for loops for performance\nfunction concatArrays(arrays) {\n  var result = [];\n  for (var _i6 = 0; _i6 < arrays.length; _i6++) {\n    var array = arrays[_i6];\n    for (var _i8 = 0; _i8 < array.length; _i8++) {\n      var el = array[_i8];\n      result.push(el);\n    }\n  }\n  return result;\n}\nfunction pushArray(array1, array2) {\n  if (!array2) {\n    return array1;\n  }\n  for (var i = 0, len = array2.length; i < len; i++) {\n    array1.push(array2[i]);\n  }\n  return array1;\n}\nvar spaceRegexp = new RegExp(String.fromCharCode(160), \"g\");\nfunction convertSpaces(s) {\n  return s.replace(spaceRegexp, \" \");\n}\nfunction pregMatchAll(regex, content) {\n  /*\n   * Regex is a string, content is the content. It returns an array of all\n   * matches with their offset, for example:\n   *\n   * regex=la\n   * content=lolalolilala\n   *\n   * Returns:\n   *\n   * [\n   *    {array: {0: 'la'}, offset: 2},\n   *    {array: {0: 'la'}, offset: 8},\n   *    {array: {0: 'la'}, offset: 10}\n   * ]\n   */\n  var matchArray = [];\n  var match;\n  while ((match = regex.exec(content)) != null) {\n    matchArray.push({\n      array: match,\n      offset: match.index\n    });\n  }\n  return matchArray;\n}\nfunction isEnding(value, element) {\n  return value === \"</\" + element + \">\";\n}\nfunction isStarting(value, element) {\n  return value.indexOf(\"<\" + element) === 0 && [\">\", \" \", \"/\"].indexOf(value[element.length + 1]) !== -1;\n}\nfunction getRight(parsed, element, index) {\n  var val = getRightOrNull(parsed, element, index);\n  if (val !== null) {\n    return val;\n  }\n  throwXmlTagNotFound({\n    position: \"right\",\n    element: element,\n    parsed: parsed,\n    index: index\n  });\n}\nfunction getRightOrNull(parsed, elements, index) {\n  if (typeof elements === \"string\") {\n    elements = [elements];\n  }\n  var level = 1;\n  for (var i = index, l = parsed.length; i < l; i++) {\n    var part = parsed[i];\n    for (var _i10 = 0, _elements2 = elements; _i10 < _elements2.length; _i10++) {\n      var element = _elements2[_i10];\n      if (isEnding(part.value, element)) {\n        level--;\n      }\n      if (isStarting(part.value, element)) {\n        level++;\n      }\n      if (level === 0) {\n        return i;\n      }\n    }\n  }\n  return null;\n}\nfunction getLeft(parsed, element, index) {\n  var val = getLeftOrNull(parsed, element, index);\n  if (val !== null) {\n    return val;\n  }\n  throwXmlTagNotFound({\n    position: \"left\",\n    element: element,\n    parsed: parsed,\n    index: index\n  });\n}\nfunction getLeftOrNull(parsed, elements, index) {\n  if (typeof elements === \"string\") {\n    elements = [elements];\n  }\n  var level = 1;\n  for (var i = index; i >= 0; i--) {\n    var part = parsed[i];\n    for (var _i12 = 0, _elements4 = elements; _i12 < _elements4.length; _i12++) {\n      var element = _elements4[_i12];\n      if (isStarting(part.value, element)) {\n        level--;\n      }\n      if (isEnding(part.value, element)) {\n        level++;\n      }\n      if (level === 0) {\n        return i;\n      }\n    }\n  }\n  return null;\n}\n\n/*\n * Stryker disable all : because those are functions that depend on the parsed\n * structure based and we don't want minimal code here, but rather code that\n * makes things clear.\n */\nfunction isTagStart(tagType, _ref3) {\n  var type = _ref3.type,\n    tag = _ref3.tag,\n    position = _ref3.position;\n  return type === \"tag\" && tag === tagType && (position === \"start\" || position === \"selfclosing\");\n}\nfunction isTagEnd(tagType, _ref4) {\n  var type = _ref4.type,\n    tag = _ref4.tag,\n    position = _ref4.position;\n  return type === \"tag\" && tag === tagType && position === \"end\";\n}\nfunction isParagraphStart(_ref5) {\n  var type = _ref5.type,\n    tag = _ref5.tag,\n    position = _ref5.position;\n  return [\"w:p\", \"a:p\"].indexOf(tag) !== -1 && type === \"tag\" && position === \"start\";\n}\nfunction isParagraphEnd(_ref6) {\n  var type = _ref6.type,\n    tag = _ref6.tag,\n    position = _ref6.position;\n  return [\"w:p\", \"a:p\"].indexOf(tag) !== -1 && type === \"tag\" && position === \"end\";\n}\nfunction isTextStart(_ref7) {\n  var type = _ref7.type,\n    position = _ref7.position,\n    text = _ref7.text;\n  return text && type === \"tag\" && position === \"start\";\n}\nfunction isTextEnd(_ref8) {\n  var type = _ref8.type,\n    position = _ref8.position,\n    text = _ref8.text;\n  return text && type === \"tag\" && position === \"end\";\n}\nfunction isContent(_ref9) {\n  var type = _ref9.type,\n    position = _ref9.position;\n  return type === \"placeholder\" || type === \"content\" && position === \"insidetag\";\n}\nfunction isModule(_ref10, modules) {\n  var module = _ref10.module,\n    type = _ref10.type;\n  if (!(modules instanceof Array)) {\n    modules = [modules];\n  }\n  return type === \"placeholder\" && modules.indexOf(module) !== -1;\n}\n// Stryker restore all\n\nvar corruptCharacters = /[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F]/;\n/*\n * 00    NUL '\\0' (null character)\n * 01    SOH (start of heading)\n * 02    STX (start of text)\n * 03    ETX (end of text)\n * 04    EOT (end of transmission)\n * 05    ENQ (enquiry)\n * 06    ACK (acknowledge)\n * 07    BEL '\\a' (bell)\n * 08    BS  '\\b' (backspace)\n * 0B    VT  '\\v' (vertical tab)\n * 0C    FF  '\\f' (form feed)\n * 0E    SO  (shift out)\n * 0F    SI  (shift in)\n * 10    DLE (data link escape)\n * 11    DC1 (device control 1)\n * 12    DC2 (device control 2)\n * 13    DC3 (device control 3)\n * 14    DC4 (device control 4)\n * 15    NAK (negative ack.)\n * 16    SYN (synchronous idle)\n * 17    ETB (end of trans. blk)\n * 18    CAN (cancel)\n * 19    EM  (end of medium)\n * 1A    SUB (substitute)\n * 1B    ESC (escape)\n * 1C    FS  (file separator)\n * 1D    GS  (group separator)\n * 1E    RS  (record separator)\n * 1F    US  (unit separator)\n */\nfunction hasCorruptCharacters(string) {\n  return corruptCharacters.test(string);\n}\nfunction removeCorruptCharacters(string) {\n  if (typeof string !== \"string\") {\n    string = String(string);\n  }\n  return string.replace(corruptCharacters, \"\");\n}\nfunction invertMap(map) {\n  var invertedMap = {};\n  for (var key in map) {\n    var value = map[key];\n    invertedMap[value] || (invertedMap[value] = []);\n    invertedMap[value].push(key);\n  }\n  return invertedMap;\n}\n/*\n * This ensures that the sort is stable. The default Array.sort of the browser\n * is not stable in firefox, as the JS spec does not enforce the sort to be\n * stable.\n */\nfunction stableSort(arr, compare) {\n  // Stryker disable all : in previous versions of Chrome, sort was not stable by itself, so we had to add this. This is to support older versions of JS runners.\n  return arr.map(function (item, index) {\n    return {\n      item: item,\n      index: index\n    };\n  }).sort(function (a, b) {\n    return compare(a.item, b.item) || a.index - b.index;\n  }).map(function (_ref11) {\n    var item = _ref11.item;\n    return item;\n  });\n  // Stryker restore all\n}\nmodule.exports = {\n  endsWith: endsWith,\n  startsWith: startsWith,\n  isContent: isContent,\n  isParagraphStart: isParagraphStart,\n  isParagraphEnd: isParagraphEnd,\n  isTagStart: isTagStart,\n  isTagEnd: isTagEnd,\n  isTextStart: isTextStart,\n  isTextEnd: isTextEnd,\n  isStarting: isStarting,\n  isEnding: isEnding,\n  isModule: isModule,\n  uniq: uniq,\n  getDuplicates: getDuplicates,\n  chunkBy: chunkBy,\n  last: last,\n  first: first,\n  xml2str: xml2str,\n  str2xml: str2xml,\n  getRightOrNull: getRightOrNull,\n  getRight: getRight,\n  getLeftOrNull: getLeftOrNull,\n  getLeft: getLeft,\n  pregMatchAll: pregMatchAll,\n  convertSpaces: convertSpaces,\n  charMapRegexes: charMapRegexes,\n  hasCorruptCharacters: hasCorruptCharacters,\n  removeCorruptCharacters: removeCorruptCharacters,\n  getDefaults: getDefaults,\n  wordToUtf8: wordToUtf8,\n  utf8ToWord: utf8ToWord,\n  concatArrays: concatArrays,\n  pushArray: pushArray,\n  invertMap: invertMap,\n  charMap: charMap,\n  getSingleAttribute: getSingleAttribute,\n  setSingleAttribute: setSingleAttribute,\n  isWhiteSpace: isWhiteSpace,\n  stableSort: stableSort\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZG9jeHRlbXBsYXRlckAzLjYwLjIvbm9kZV9tb2R1bGVzL2RvY3h0ZW1wbGF0ZXIvanMvZG9jLXV0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGdDQUFnQztBQUNoQyw4QkFBOEI7QUFDOUIsNkNBQTZDLFNBQVMsMERBQTBELFVBQVUsZ0NBQWdDO0FBQzFKLG1DQUFtQywrQ0FBK0MsOEJBQThCLE9BQU8sa0JBQWtCO0FBQ3pJLHVDQUF1QyxrR0FBa0csaUJBQWlCLHdDQUF3QyxNQUFNLHlDQUF5Qyw2QkFBNkIsVUFBVSxZQUFZLGtFQUFrRSxXQUFXLFlBQVksaUJBQWlCLFVBQVUsTUFBTSxpRkFBaUYsVUFBVSxvQkFBb0I7QUFDN2dCLDhCQUE4QjtBQUM5QixlQUFlLG1CQUFPLENBQUMsZ0hBQWdCO0FBQ3ZDO0FBQ0E7QUFDQSxnQkFBZ0IsbUJBQU8sQ0FBQyw0R0FBYTtBQUNyQztBQUNBLGdCQUFnQixtQkFBTyxDQUFDLDBHQUFZO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0Esa0NBQWtDLE9BQU87QUFDekM7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBLGtDQUFrQyxPQUFPO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixxQkFBcUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxvQkFBb0IscUJBQXFCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZixhQUFhO0FBQ2IsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixlQUFlLGVBQWUsaUJBQWlCLGlCQUFpQjtBQUMzRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLDBDQUEwQyxRQUFRO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxPQUFPO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHFCQUFxQjtBQUN6QztBQUNBLHNCQUFzQixvQkFBb0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsU0FBUztBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsUUFBUSxRQUFRLFlBQVk7QUFDckMsU0FBUyxRQUFRLFFBQVEsWUFBWTtBQUNyQyxTQUFTLFFBQVEsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxPQUFPO0FBQ2hEO0FBQ0EsOENBQThDLDBCQUEwQjtBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLFFBQVE7QUFDOUI7QUFDQSw4Q0FBOEMsMEJBQTBCO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvYnJhbmRvbmJyZXdlci9Eb2N1bWVudHMvTGluZ3Vvc2l0eS9MaW5ndW9zaXR5L25vZGVfbW9kdWxlcy8ucG5wbS9kb2N4dGVtcGxhdGVyQDMuNjAuMi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy9kb2MtdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KHIsIGUpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQociwgZSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KHIsIGUpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KHIsIGEpIHsgaWYgKHIpIHsgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShyLCBhKTsgdmFyIHQgPSB7fS50b1N0cmluZy5jYWxsKHIpLnNsaWNlKDgsIC0xKTsgcmV0dXJuIFwiT2JqZWN0XCIgPT09IHQgJiYgci5jb25zdHJ1Y3RvciAmJiAodCA9IHIuY29uc3RydWN0b3IubmFtZSksIFwiTWFwXCIgPT09IHQgfHwgXCJTZXRcIiA9PT0gdCA/IEFycmF5LmZyb20ocikgOiBcIkFyZ3VtZW50c1wiID09PSB0IHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KHQpID8gX2FycmF5TGlrZVRvQXJyYXkociwgYSkgOiB2b2lkIDA7IH0gfVxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkociwgYSkgeyAobnVsbCA9PSBhIHx8IGEgPiByLmxlbmd0aCkgJiYgKGEgPSByLmxlbmd0aCk7IGZvciAodmFyIGUgPSAwLCBuID0gQXJyYXkoYSk7IGUgPCBhOyBlKyspIG5bZV0gPSByW2VdOyByZXR1cm4gbjsgfVxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KHIsIGwpIHsgdmFyIHQgPSBudWxsID09IHIgPyBudWxsIDogXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgU3ltYm9sICYmIHJbU3ltYm9sLml0ZXJhdG9yXSB8fCByW1wiQEBpdGVyYXRvclwiXTsgaWYgKG51bGwgIT0gdCkgeyB2YXIgZSwgbiwgaSwgdSwgYSA9IFtdLCBmID0gITAsIG8gPSAhMTsgdHJ5IHsgaWYgKGkgPSAodCA9IHQuY2FsbChyKSkubmV4dCwgMCA9PT0gbCkgeyBpZiAoT2JqZWN0KHQpICE9PSB0KSByZXR1cm47IGYgPSAhMTsgfSBlbHNlIGZvciAoOyAhKGYgPSAoZSA9IGkuY2FsbCh0KSkuZG9uZSkgJiYgKGEucHVzaChlLnZhbHVlKSwgYS5sZW5ndGggIT09IGwpOyBmID0gITApOyB9IGNhdGNoIChyKSB7IG8gPSAhMCwgbiA9IHI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghZiAmJiBudWxsICE9IHRbXCJyZXR1cm5cIl0gJiYgKHUgPSB0W1wicmV0dXJuXCJdKCksIE9iamVjdCh1KSAhPT0gdSkpIHJldHVybjsgfSBmaW5hbGx5IHsgaWYgKG8pIHRocm93IG47IH0gfSByZXR1cm4gYTsgfSB9XG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMocikgeyBpZiAoQXJyYXkuaXNBcnJheShyKSkgcmV0dXJuIHI7IH1cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoXCJAeG1sZG9tL3htbGRvbVwiKSxcbiAgRE9NUGFyc2VyID0gX3JlcXVpcmUuRE9NUGFyc2VyLFxuICBYTUxTZXJpYWxpemVyID0gX3JlcXVpcmUuWE1MU2VyaWFsaXplcjtcbnZhciBfcmVxdWlyZTIgPSByZXF1aXJlKFwiLi9lcnJvcnMuanNcIiksXG4gIHRocm93WG1sVGFnTm90Rm91bmQgPSBfcmVxdWlyZTIudGhyb3dYbWxUYWdOb3RGb3VuZDtcbnZhciBfcmVxdWlyZTMgPSByZXF1aXJlKFwiLi91dGlscy5qc1wiKSxcbiAgbGFzdCA9IF9yZXF1aXJlMy5sYXN0LFxuICBmaXJzdCA9IF9yZXF1aXJlMy5maXJzdDtcbmZ1bmN0aW9uIGlzV2hpdGVTcGFjZSh2YWx1ZSkge1xuICByZXR1cm4gL15bIFxcblxcclxcdF0rJC8udGVzdCh2YWx1ZSk7XG59XG5mdW5jdGlvbiBwYXJzZXIodGFnKSB7XG4gIHJldHVybiB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoc2NvcGUpIHtcbiAgICAgIGlmICh0YWcgPT09IFwiLlwiKSB7XG4gICAgICAgIHJldHVybiBzY29wZTtcbiAgICAgIH1cbiAgICAgIGlmIChzY29wZSkge1xuICAgICAgICByZXR1cm4gc2NvcGVbdGFnXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzY29wZTtcbiAgICB9XG4gIH07XG59XG52YXIgYXR0clRvUmVnZXggPSB7fTtcbmZ1bmN0aW9uIHNldFNpbmdsZUF0dHJpYnV0ZShwYXJ0VmFsdWUsIGF0dHIsIGF0dHJWYWx1ZSkge1xuICB2YXIgcmVnZXg7XG4gIC8vIFN0cnlrZXIgZGlzYWJsZSBuZXh0LWxpbmUgYWxsIDogYmVjYXVzZSB0aGlzIGlzIGFuIG9wdGltaXNhdGlvblxuICBpZiAoYXR0clRvUmVnZXhbYXR0cl0pIHtcbiAgICByZWdleCA9IGF0dHJUb1JlZ2V4W2F0dHJdO1xuICB9IGVsc2Uge1xuICAgIHJlZ2V4ID0gbmV3IFJlZ0V4cChcIig8LiogXCIuY29uY2F0KGF0dHIsIFwiPVxcXCIpKFteXFxcIl0qKShcXFwiLiopJFwiKSk7XG4gICAgYXR0clRvUmVnZXhbYXR0cl0gPSByZWdleDtcbiAgfVxuICBpZiAocmVnZXgudGVzdChwYXJ0VmFsdWUpKSB7XG4gICAgcmV0dXJuIHBhcnRWYWx1ZS5yZXBsYWNlKHJlZ2V4LCBcIiQxXCIuY29uY2F0KGF0dHJWYWx1ZSwgXCIkM1wiKSk7XG4gIH1cbiAgdmFyIGVuZCA9IHBhcnRWYWx1ZS5sYXN0SW5kZXhPZihcIi8+XCIpO1xuICBpZiAoZW5kID09PSAtMSkge1xuICAgIGVuZCA9IHBhcnRWYWx1ZS5sYXN0SW5kZXhPZihcIj5cIik7XG4gIH1cbiAgcmV0dXJuIHBhcnRWYWx1ZS5zdWJzdHIoMCwgZW5kKSArIFwiIFwiLmNvbmNhdChhdHRyLCBcIj1cXFwiXCIpLmNvbmNhdChhdHRyVmFsdWUsIFwiXFxcIlwiKSArIHBhcnRWYWx1ZS5zdWJzdHIoZW5kKTtcbn1cbmZ1bmN0aW9uIGdldFNpbmdsZUF0dHJpYnV0ZSh2YWx1ZSwgYXR0cmlidXRlTmFtZSkge1xuICB2YXIgaW5kZXggPSB2YWx1ZS5pbmRleE9mKFwiIFwiLmNvbmNhdChhdHRyaWJ1dGVOYW1lLCBcIj1cXFwiXCIpKTtcbiAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHZhciBzdGFydEluZGV4ID0gdmFsdWUuc3Vic3RyKGluZGV4KS5zZWFyY2goL1tcIiddLykgKyBpbmRleDtcbiAgdmFyIGVuZEluZGV4ID0gdmFsdWUuc3Vic3RyKHN0YXJ0SW5kZXggKyAxKS5zZWFyY2goL1tcIiddLykgKyBzdGFydEluZGV4O1xuICByZXR1cm4gdmFsdWUuc3Vic3RyKHN0YXJ0SW5kZXggKyAxLCBlbmRJbmRleCAtIHN0YXJ0SW5kZXgpO1xufVxuZnVuY3Rpb24gZW5kc1dpdGgoc3RyLCBzdWZmaXgpIHtcbiAgcmV0dXJuIHN0ci5pbmRleE9mKHN1ZmZpeCwgc3RyLmxlbmd0aCAtIHN1ZmZpeC5sZW5ndGgpICE9PSAtMTtcbn1cbmZ1bmN0aW9uIHN0YXJ0c1dpdGgoc3RyLCBwcmVmaXgpIHtcbiAgcmV0dXJuIHN0ci5zdWJzdHJpbmcoMCwgcHJlZml4Lmxlbmd0aCkgPT09IHByZWZpeDtcbn1cbmZ1bmN0aW9uIGdldER1cGxpY2F0ZXMoYXJyKSB7XG4gIHZhciBkdXBsaWNhdGVzID0gW107XG4gIHZhciBoYXNoID0ge30sXG4gICAgcmVzdWx0ID0gW107XG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJyLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgIGlmICghaGFzaFthcnJbaV1dKSB7XG4gICAgICBoYXNoW2FycltpXV0gPSB0cnVlO1xuICAgICAgcmVzdWx0LnB1c2goYXJyW2ldKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZHVwbGljYXRlcy5wdXNoKGFycltpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkdXBsaWNhdGVzO1xufVxuZnVuY3Rpb24gdW5pcShhcnIpIHtcbiAgdmFyIGhhc2ggPSB7fSxcbiAgICByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcnIubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgaWYgKCFoYXNoW2FycltpXV0pIHtcbiAgICAgIGhhc2hbYXJyW2ldXSA9IHRydWU7XG4gICAgICByZXN1bHQucHVzaChhcnJbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gY2h1bmtCeShwYXJzZWQsIGYpIHtcbiAgdmFyIGNodW5rcyA9IFtbXV07XG4gIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IHBhcnNlZC5sZW5ndGg7IF9pMisrKSB7XG4gICAgdmFyIHAgPSBwYXJzZWRbX2kyXTtcbiAgICB2YXIgY3VycmVudENodW5rID0gY2h1bmtzW2NodW5rcy5sZW5ndGggLSAxXTtcbiAgICB2YXIgcmVzID0gZihwKTtcbiAgICBpZiAocmVzID09PSBcInN0YXJ0XCIpIHtcbiAgICAgIGNodW5rcy5wdXNoKFtwXSk7XG4gICAgfSBlbHNlIGlmIChyZXMgPT09IFwiZW5kXCIpIHtcbiAgICAgIGN1cnJlbnRDaHVuay5wdXNoKHApO1xuICAgICAgY2h1bmtzLnB1c2goW10pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50Q2h1bmsucHVzaChwKTtcbiAgICB9XG4gIH0gLy8gUmVtb3ZlIGVtcHR5IGNodW5rc1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvciAodmFyIF9pNCA9IDA7IF9pNCA8IGNodW5rcy5sZW5ndGg7IF9pNCsrKSB7XG4gICAgdmFyIGNodW5rID0gY2h1bmtzW19pNF07XG4gICAgaWYgKGNodW5rLmxlbmd0aCA+IDApIHtcbiAgICAgIHJlc3VsdC5wdXNoKGNodW5rKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGdldERlZmF1bHRzKCkge1xuICByZXR1cm4ge1xuICAgIGVycm9yTG9nZ2luZzogXCJqc29uXCIsXG4gICAgc3RyaXBJbnZhbGlkWE1MQ2hhcnM6IGZhbHNlLFxuICAgIHBhcmFncmFwaExvb3A6IGZhbHNlLFxuICAgIG51bGxHZXR0ZXI6IGZ1bmN0aW9uIG51bGxHZXR0ZXIocGFydCkge1xuICAgICAgcmV0dXJuIHBhcnQubW9kdWxlID8gXCJcIiA6IFwidW5kZWZpbmVkXCI7XG4gICAgfSxcbiAgICB4bWxGaWxlTmFtZXM6IFtcIltDb250ZW50X1R5cGVzXS54bWxcIl0sXG4gICAgcGFyc2VyOiBwYXJzZXIsXG4gICAgbGluZWJyZWFrczogZmFsc2UsXG4gICAgZmlsZVR5cGVDb25maWc6IG51bGwsXG4gICAgZGVsaW1pdGVyczoge1xuICAgICAgc3RhcnQ6IFwie1wiLFxuICAgICAgZW5kOiBcIn1cIlxuICAgIH0sXG4gICAgc3ludGF4OiB7XG4gICAgICBjaGFuZ2VEZWxpbWl0ZXJQcmVmaXg6IFwiPVwiXG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24geG1sMnN0cih4bWxOb2RlKSB7XG4gIHJldHVybiBuZXcgWE1MU2VyaWFsaXplcigpLnNlcmlhbGl6ZVRvU3RyaW5nKHhtbE5vZGUpLnJlcGxhY2UoL3htbG5zKDpbYS16MC05XSspPz1cIlwiID8vZywgXCJcIik7XG59XG5mdW5jdGlvbiBzdHIyeG1sKHN0cikge1xuICBpZiAoc3RyLmNoYXJDb2RlQXQoMCkgPT09IDY1Mjc5KSB7XG4gICAgLy8gQk9NIHNlcXVlbmNlXG4gICAgc3RyID0gc3RyLnN1YnN0cigxKTtcbiAgfVxuICByZXR1cm4gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhzdHIsIFwidGV4dC94bWxcIik7XG59XG52YXIgY2hhck1hcCA9IFtbXCImXCIsIFwiJmFtcDtcIl0sIFtcIjxcIiwgXCImbHQ7XCJdLCBbXCI+XCIsIFwiJmd0O1wiXSwgWydcIicsIFwiJnF1b3Q7XCJdLCBbXCInXCIsIFwiJmFwb3M7XCJdXTtcbnZhciBjaGFyTWFwUmVnZXhlcyA9IGNoYXJNYXAubWFwKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDIpLFxuICAgIGVuZENoYXIgPSBfcmVmMlswXSxcbiAgICBzdGFydENoYXIgPSBfcmVmMlsxXTtcbiAgcmV0dXJuIHtcbiAgICByc3RhcnQ6IG5ldyBSZWdFeHAoc3RhcnRDaGFyLCBcImdcIiksXG4gICAgcmVuZDogbmV3IFJlZ0V4cChlbmRDaGFyLCBcImdcIiksXG4gICAgc3RhcnQ6IHN0YXJ0Q2hhcixcbiAgICBlbmQ6IGVuZENoYXJcbiAgfTtcbn0pO1xuZnVuY3Rpb24gd29yZFRvVXRmOChzdHJpbmcpIHtcbiAgZm9yICh2YXIgaSA9IGNoYXJNYXBSZWdleGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHIgPSBjaGFyTWFwUmVnZXhlc1tpXTtcbiAgICBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShyLnJzdGFydCwgci5lbmQpO1xuICB9XG4gIHJldHVybiBzdHJpbmc7XG59XG5mdW5jdGlvbiB1dGY4VG9Xb3JkKHN0cmluZykge1xuICAvLyBUbyBtYWtlIHN1cmUgdGhhdCB0aGUgb2JqZWN0IGdpdmVuIGlzIGEgc3RyaW5nICh0aGlzIGlzIGEgbm9vcCBmb3Igc3RyaW5ncykuXG4gIHN0cmluZyA9IHN0cmluZy50b1N0cmluZygpO1xuICB2YXIgcjtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGFyTWFwUmVnZXhlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICByID0gY2hhck1hcFJlZ2V4ZXNbaV07XG4gICAgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2Uoci5yZW5kLCByLnN0YXJ0KTtcbiAgfVxuICByZXR1cm4gc3RyaW5nO1xufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIHdyaXR0ZW4gd2l0aCBmb3IgbG9vcHMgZm9yIHBlcmZvcm1hbmNlXG5mdW5jdGlvbiBjb25jYXRBcnJheXMoYXJyYXlzKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIgX2k2ID0gMDsgX2k2IDwgYXJyYXlzLmxlbmd0aDsgX2k2KyspIHtcbiAgICB2YXIgYXJyYXkgPSBhcnJheXNbX2k2XTtcbiAgICBmb3IgKHZhciBfaTggPSAwOyBfaTggPCBhcnJheS5sZW5ndGg7IF9pOCsrKSB7XG4gICAgICB2YXIgZWwgPSBhcnJheVtfaThdO1xuICAgICAgcmVzdWx0LnB1c2goZWwpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gcHVzaEFycmF5KGFycmF5MSwgYXJyYXkyKSB7XG4gIGlmICghYXJyYXkyKSB7XG4gICAgcmV0dXJuIGFycmF5MTtcbiAgfVxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyYXkyLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgYXJyYXkxLnB1c2goYXJyYXkyW2ldKTtcbiAgfVxuICByZXR1cm4gYXJyYXkxO1xufVxudmFyIHNwYWNlUmVnZXhwID0gbmV3IFJlZ0V4cChTdHJpbmcuZnJvbUNoYXJDb2RlKDE2MCksIFwiZ1wiKTtcbmZ1bmN0aW9uIGNvbnZlcnRTcGFjZXMocykge1xuICByZXR1cm4gcy5yZXBsYWNlKHNwYWNlUmVnZXhwLCBcIiBcIik7XG59XG5mdW5jdGlvbiBwcmVnTWF0Y2hBbGwocmVnZXgsIGNvbnRlbnQpIHtcbiAgLypcbiAgICogUmVnZXggaXMgYSBzdHJpbmcsIGNvbnRlbnQgaXMgdGhlIGNvbnRlbnQuIEl0IHJldHVybnMgYW4gYXJyYXkgb2YgYWxsXG4gICAqIG1hdGNoZXMgd2l0aCB0aGVpciBvZmZzZXQsIGZvciBleGFtcGxlOlxuICAgKlxuICAgKiByZWdleD1sYVxuICAgKiBjb250ZW50PWxvbGFsb2xpbGFsYVxuICAgKlxuICAgKiBSZXR1cm5zOlxuICAgKlxuICAgKiBbXG4gICAqICAgIHthcnJheTogezA6ICdsYSd9LCBvZmZzZXQ6IDJ9LFxuICAgKiAgICB7YXJyYXk6IHswOiAnbGEnfSwgb2Zmc2V0OiA4fSxcbiAgICogICAge2FycmF5OiB7MDogJ2xhJ30sIG9mZnNldDogMTB9XG4gICAqIF1cbiAgICovXG4gIHZhciBtYXRjaEFycmF5ID0gW107XG4gIHZhciBtYXRjaDtcbiAgd2hpbGUgKChtYXRjaCA9IHJlZ2V4LmV4ZWMoY29udGVudCkpICE9IG51bGwpIHtcbiAgICBtYXRjaEFycmF5LnB1c2goe1xuICAgICAgYXJyYXk6IG1hdGNoLFxuICAgICAgb2Zmc2V0OiBtYXRjaC5pbmRleFxuICAgIH0pO1xuICB9XG4gIHJldHVybiBtYXRjaEFycmF5O1xufVxuZnVuY3Rpb24gaXNFbmRpbmcodmFsdWUsIGVsZW1lbnQpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBcIjwvXCIgKyBlbGVtZW50ICsgXCI+XCI7XG59XG5mdW5jdGlvbiBpc1N0YXJ0aW5nKHZhbHVlLCBlbGVtZW50KSB7XG4gIHJldHVybiB2YWx1ZS5pbmRleE9mKFwiPFwiICsgZWxlbWVudCkgPT09IDAgJiYgW1wiPlwiLCBcIiBcIiwgXCIvXCJdLmluZGV4T2YodmFsdWVbZWxlbWVudC5sZW5ndGggKyAxXSkgIT09IC0xO1xufVxuZnVuY3Rpb24gZ2V0UmlnaHQocGFyc2VkLCBlbGVtZW50LCBpbmRleCkge1xuICB2YXIgdmFsID0gZ2V0UmlnaHRPck51bGwocGFyc2VkLCBlbGVtZW50LCBpbmRleCk7XG4gIGlmICh2YWwgIT09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsO1xuICB9XG4gIHRocm93WG1sVGFnTm90Rm91bmQoe1xuICAgIHBvc2l0aW9uOiBcInJpZ2h0XCIsXG4gICAgZWxlbWVudDogZWxlbWVudCxcbiAgICBwYXJzZWQ6IHBhcnNlZCxcbiAgICBpbmRleDogaW5kZXhcbiAgfSk7XG59XG5mdW5jdGlvbiBnZXRSaWdodE9yTnVsbChwYXJzZWQsIGVsZW1lbnRzLCBpbmRleCkge1xuICBpZiAodHlwZW9mIGVsZW1lbnRzID09PSBcInN0cmluZ1wiKSB7XG4gICAgZWxlbWVudHMgPSBbZWxlbWVudHNdO1xuICB9XG4gIHZhciBsZXZlbCA9IDE7XG4gIGZvciAodmFyIGkgPSBpbmRleCwgbCA9IHBhcnNlZC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgcGFydCA9IHBhcnNlZFtpXTtcbiAgICBmb3IgKHZhciBfaTEwID0gMCwgX2VsZW1lbnRzMiA9IGVsZW1lbnRzOyBfaTEwIDwgX2VsZW1lbnRzMi5sZW5ndGg7IF9pMTArKykge1xuICAgICAgdmFyIGVsZW1lbnQgPSBfZWxlbWVudHMyW19pMTBdO1xuICAgICAgaWYgKGlzRW5kaW5nKHBhcnQudmFsdWUsIGVsZW1lbnQpKSB7XG4gICAgICAgIGxldmVsLS07XG4gICAgICB9XG4gICAgICBpZiAoaXNTdGFydGluZyhwYXJ0LnZhbHVlLCBlbGVtZW50KSkge1xuICAgICAgICBsZXZlbCsrO1xuICAgICAgfVxuICAgICAgaWYgKGxldmVsID09PSAwKSB7XG4gICAgICAgIHJldHVybiBpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGdldExlZnQocGFyc2VkLCBlbGVtZW50LCBpbmRleCkge1xuICB2YXIgdmFsID0gZ2V0TGVmdE9yTnVsbChwYXJzZWQsIGVsZW1lbnQsIGluZGV4KTtcbiAgaWYgKHZhbCAhPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWw7XG4gIH1cbiAgdGhyb3dYbWxUYWdOb3RGb3VuZCh7XG4gICAgcG9zaXRpb246IFwibGVmdFwiLFxuICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgcGFyc2VkOiBwYXJzZWQsXG4gICAgaW5kZXg6IGluZGV4XG4gIH0pO1xufVxuZnVuY3Rpb24gZ2V0TGVmdE9yTnVsbChwYXJzZWQsIGVsZW1lbnRzLCBpbmRleCkge1xuICBpZiAodHlwZW9mIGVsZW1lbnRzID09PSBcInN0cmluZ1wiKSB7XG4gICAgZWxlbWVudHMgPSBbZWxlbWVudHNdO1xuICB9XG4gIHZhciBsZXZlbCA9IDE7XG4gIGZvciAodmFyIGkgPSBpbmRleDsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcGFydCA9IHBhcnNlZFtpXTtcbiAgICBmb3IgKHZhciBfaTEyID0gMCwgX2VsZW1lbnRzNCA9IGVsZW1lbnRzOyBfaTEyIDwgX2VsZW1lbnRzNC5sZW5ndGg7IF9pMTIrKykge1xuICAgICAgdmFyIGVsZW1lbnQgPSBfZWxlbWVudHM0W19pMTJdO1xuICAgICAgaWYgKGlzU3RhcnRpbmcocGFydC52YWx1ZSwgZWxlbWVudCkpIHtcbiAgICAgICAgbGV2ZWwtLTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0VuZGluZyhwYXJ0LnZhbHVlLCBlbGVtZW50KSkge1xuICAgICAgICBsZXZlbCsrO1xuICAgICAgfVxuICAgICAgaWYgKGxldmVsID09PSAwKSB7XG4gICAgICAgIHJldHVybiBpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLypcbiAqIFN0cnlrZXIgZGlzYWJsZSBhbGwgOiBiZWNhdXNlIHRob3NlIGFyZSBmdW5jdGlvbnMgdGhhdCBkZXBlbmQgb24gdGhlIHBhcnNlZFxuICogc3RydWN0dXJlIGJhc2VkIGFuZCB3ZSBkb24ndCB3YW50IG1pbmltYWwgY29kZSBoZXJlLCBidXQgcmF0aGVyIGNvZGUgdGhhdFxuICogbWFrZXMgdGhpbmdzIGNsZWFyLlxuICovXG5mdW5jdGlvbiBpc1RhZ1N0YXJ0KHRhZ1R5cGUsIF9yZWYzKSB7XG4gIHZhciB0eXBlID0gX3JlZjMudHlwZSxcbiAgICB0YWcgPSBfcmVmMy50YWcsXG4gICAgcG9zaXRpb24gPSBfcmVmMy5wb3NpdGlvbjtcbiAgcmV0dXJuIHR5cGUgPT09IFwidGFnXCIgJiYgdGFnID09PSB0YWdUeXBlICYmIChwb3NpdGlvbiA9PT0gXCJzdGFydFwiIHx8IHBvc2l0aW9uID09PSBcInNlbGZjbG9zaW5nXCIpO1xufVxuZnVuY3Rpb24gaXNUYWdFbmQodGFnVHlwZSwgX3JlZjQpIHtcbiAgdmFyIHR5cGUgPSBfcmVmNC50eXBlLFxuICAgIHRhZyA9IF9yZWY0LnRhZyxcbiAgICBwb3NpdGlvbiA9IF9yZWY0LnBvc2l0aW9uO1xuICByZXR1cm4gdHlwZSA9PT0gXCJ0YWdcIiAmJiB0YWcgPT09IHRhZ1R5cGUgJiYgcG9zaXRpb24gPT09IFwiZW5kXCI7XG59XG5mdW5jdGlvbiBpc1BhcmFncmFwaFN0YXJ0KF9yZWY1KSB7XG4gIHZhciB0eXBlID0gX3JlZjUudHlwZSxcbiAgICB0YWcgPSBfcmVmNS50YWcsXG4gICAgcG9zaXRpb24gPSBfcmVmNS5wb3NpdGlvbjtcbiAgcmV0dXJuIFtcInc6cFwiLCBcImE6cFwiXS5pbmRleE9mKHRhZykgIT09IC0xICYmIHR5cGUgPT09IFwidGFnXCIgJiYgcG9zaXRpb24gPT09IFwic3RhcnRcIjtcbn1cbmZ1bmN0aW9uIGlzUGFyYWdyYXBoRW5kKF9yZWY2KSB7XG4gIHZhciB0eXBlID0gX3JlZjYudHlwZSxcbiAgICB0YWcgPSBfcmVmNi50YWcsXG4gICAgcG9zaXRpb24gPSBfcmVmNi5wb3NpdGlvbjtcbiAgcmV0dXJuIFtcInc6cFwiLCBcImE6cFwiXS5pbmRleE9mKHRhZykgIT09IC0xICYmIHR5cGUgPT09IFwidGFnXCIgJiYgcG9zaXRpb24gPT09IFwiZW5kXCI7XG59XG5mdW5jdGlvbiBpc1RleHRTdGFydChfcmVmNykge1xuICB2YXIgdHlwZSA9IF9yZWY3LnR5cGUsXG4gICAgcG9zaXRpb24gPSBfcmVmNy5wb3NpdGlvbixcbiAgICB0ZXh0ID0gX3JlZjcudGV4dDtcbiAgcmV0dXJuIHRleHQgJiYgdHlwZSA9PT0gXCJ0YWdcIiAmJiBwb3NpdGlvbiA9PT0gXCJzdGFydFwiO1xufVxuZnVuY3Rpb24gaXNUZXh0RW5kKF9yZWY4KSB7XG4gIHZhciB0eXBlID0gX3JlZjgudHlwZSxcbiAgICBwb3NpdGlvbiA9IF9yZWY4LnBvc2l0aW9uLFxuICAgIHRleHQgPSBfcmVmOC50ZXh0O1xuICByZXR1cm4gdGV4dCAmJiB0eXBlID09PSBcInRhZ1wiICYmIHBvc2l0aW9uID09PSBcImVuZFwiO1xufVxuZnVuY3Rpb24gaXNDb250ZW50KF9yZWY5KSB7XG4gIHZhciB0eXBlID0gX3JlZjkudHlwZSxcbiAgICBwb3NpdGlvbiA9IF9yZWY5LnBvc2l0aW9uO1xuICByZXR1cm4gdHlwZSA9PT0gXCJwbGFjZWhvbGRlclwiIHx8IHR5cGUgPT09IFwiY29udGVudFwiICYmIHBvc2l0aW9uID09PSBcImluc2lkZXRhZ1wiO1xufVxuZnVuY3Rpb24gaXNNb2R1bGUoX3JlZjEwLCBtb2R1bGVzKSB7XG4gIHZhciBtb2R1bGUgPSBfcmVmMTAubW9kdWxlLFxuICAgIHR5cGUgPSBfcmVmMTAudHlwZTtcbiAgaWYgKCEobW9kdWxlcyBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgIG1vZHVsZXMgPSBbbW9kdWxlc107XG4gIH1cbiAgcmV0dXJuIHR5cGUgPT09IFwicGxhY2Vob2xkZXJcIiAmJiBtb2R1bGVzLmluZGV4T2YobW9kdWxlKSAhPT0gLTE7XG59XG4vLyBTdHJ5a2VyIHJlc3RvcmUgYWxsXG5cbnZhciBjb3JydXB0Q2hhcmFjdGVycyA9IC9bXFx4MDAtXFx4MDhcXHgwQlxceDBDXFx4MEUtXFx4MUZdLztcbi8qXG4gKiAwMCAgICBOVUwgJ1xcMCcgKG51bGwgY2hhcmFjdGVyKVxuICogMDEgICAgU09IIChzdGFydCBvZiBoZWFkaW5nKVxuICogMDIgICAgU1RYIChzdGFydCBvZiB0ZXh0KVxuICogMDMgICAgRVRYIChlbmQgb2YgdGV4dClcbiAqIDA0ICAgIEVPVCAoZW5kIG9mIHRyYW5zbWlzc2lvbilcbiAqIDA1ICAgIEVOUSAoZW5xdWlyeSlcbiAqIDA2ICAgIEFDSyAoYWNrbm93bGVkZ2UpXG4gKiAwNyAgICBCRUwgJ1xcYScgKGJlbGwpXG4gKiAwOCAgICBCUyAgJ1xcYicgKGJhY2tzcGFjZSlcbiAqIDBCICAgIFZUICAnXFx2JyAodmVydGljYWwgdGFiKVxuICogMEMgICAgRkYgICdcXGYnIChmb3JtIGZlZWQpXG4gKiAwRSAgICBTTyAgKHNoaWZ0IG91dClcbiAqIDBGICAgIFNJICAoc2hpZnQgaW4pXG4gKiAxMCAgICBETEUgKGRhdGEgbGluayBlc2NhcGUpXG4gKiAxMSAgICBEQzEgKGRldmljZSBjb250cm9sIDEpXG4gKiAxMiAgICBEQzIgKGRldmljZSBjb250cm9sIDIpXG4gKiAxMyAgICBEQzMgKGRldmljZSBjb250cm9sIDMpXG4gKiAxNCAgICBEQzQgKGRldmljZSBjb250cm9sIDQpXG4gKiAxNSAgICBOQUsgKG5lZ2F0aXZlIGFjay4pXG4gKiAxNiAgICBTWU4gKHN5bmNocm9ub3VzIGlkbGUpXG4gKiAxNyAgICBFVEIgKGVuZCBvZiB0cmFucy4gYmxrKVxuICogMTggICAgQ0FOIChjYW5jZWwpXG4gKiAxOSAgICBFTSAgKGVuZCBvZiBtZWRpdW0pXG4gKiAxQSAgICBTVUIgKHN1YnN0aXR1dGUpXG4gKiAxQiAgICBFU0MgKGVzY2FwZSlcbiAqIDFDICAgIEZTICAoZmlsZSBzZXBhcmF0b3IpXG4gKiAxRCAgICBHUyAgKGdyb3VwIHNlcGFyYXRvcilcbiAqIDFFICAgIFJTICAocmVjb3JkIHNlcGFyYXRvcilcbiAqIDFGICAgIFVTICAodW5pdCBzZXBhcmF0b3IpXG4gKi9cbmZ1bmN0aW9uIGhhc0NvcnJ1cHRDaGFyYWN0ZXJzKHN0cmluZykge1xuICByZXR1cm4gY29ycnVwdENoYXJhY3RlcnMudGVzdChzdHJpbmcpO1xufVxuZnVuY3Rpb24gcmVtb3ZlQ29ycnVwdENoYXJhY3RlcnMoc3RyaW5nKSB7XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSBcInN0cmluZ1wiKSB7XG4gICAgc3RyaW5nID0gU3RyaW5nKHN0cmluZyk7XG4gIH1cbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKGNvcnJ1cHRDaGFyYWN0ZXJzLCBcIlwiKTtcbn1cbmZ1bmN0aW9uIGludmVydE1hcChtYXApIHtcbiAgdmFyIGludmVydGVkTWFwID0ge307XG4gIGZvciAodmFyIGtleSBpbiBtYXApIHtcbiAgICB2YXIgdmFsdWUgPSBtYXBba2V5XTtcbiAgICBpbnZlcnRlZE1hcFt2YWx1ZV0gfHwgKGludmVydGVkTWFwW3ZhbHVlXSA9IFtdKTtcbiAgICBpbnZlcnRlZE1hcFt2YWx1ZV0ucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiBpbnZlcnRlZE1hcDtcbn1cbi8qXG4gKiBUaGlzIGVuc3VyZXMgdGhhdCB0aGUgc29ydCBpcyBzdGFibGUuIFRoZSBkZWZhdWx0IEFycmF5LnNvcnQgb2YgdGhlIGJyb3dzZXJcbiAqIGlzIG5vdCBzdGFibGUgaW4gZmlyZWZveCwgYXMgdGhlIEpTIHNwZWMgZG9lcyBub3QgZW5mb3JjZSB0aGUgc29ydCB0byBiZVxuICogc3RhYmxlLlxuICovXG5mdW5jdGlvbiBzdGFibGVTb3J0KGFyciwgY29tcGFyZSkge1xuICAvLyBTdHJ5a2VyIGRpc2FibGUgYWxsIDogaW4gcHJldmlvdXMgdmVyc2lvbnMgb2YgQ2hyb21lLCBzb3J0IHdhcyBub3Qgc3RhYmxlIGJ5IGl0c2VsZiwgc28gd2UgaGFkIHRvIGFkZCB0aGlzLiBUaGlzIGlzIHRvIHN1cHBvcnQgb2xkZXIgdmVyc2lvbnMgb2YgSlMgcnVubmVycy5cbiAgcmV0dXJuIGFyci5tYXAoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGl0ZW06IGl0ZW0sXG4gICAgICBpbmRleDogaW5kZXhcbiAgICB9O1xuICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGNvbXBhcmUoYS5pdGVtLCBiLml0ZW0pIHx8IGEuaW5kZXggLSBiLmluZGV4O1xuICB9KS5tYXAoZnVuY3Rpb24gKF9yZWYxMSkge1xuICAgIHZhciBpdGVtID0gX3JlZjExLml0ZW07XG4gICAgcmV0dXJuIGl0ZW07XG4gIH0pO1xuICAvLyBTdHJ5a2VyIHJlc3RvcmUgYWxsXG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZW5kc1dpdGg6IGVuZHNXaXRoLFxuICBzdGFydHNXaXRoOiBzdGFydHNXaXRoLFxuICBpc0NvbnRlbnQ6IGlzQ29udGVudCxcbiAgaXNQYXJhZ3JhcGhTdGFydDogaXNQYXJhZ3JhcGhTdGFydCxcbiAgaXNQYXJhZ3JhcGhFbmQ6IGlzUGFyYWdyYXBoRW5kLFxuICBpc1RhZ1N0YXJ0OiBpc1RhZ1N0YXJ0LFxuICBpc1RhZ0VuZDogaXNUYWdFbmQsXG4gIGlzVGV4dFN0YXJ0OiBpc1RleHRTdGFydCxcbiAgaXNUZXh0RW5kOiBpc1RleHRFbmQsXG4gIGlzU3RhcnRpbmc6IGlzU3RhcnRpbmcsXG4gIGlzRW5kaW5nOiBpc0VuZGluZyxcbiAgaXNNb2R1bGU6IGlzTW9kdWxlLFxuICB1bmlxOiB1bmlxLFxuICBnZXREdXBsaWNhdGVzOiBnZXREdXBsaWNhdGVzLFxuICBjaHVua0J5OiBjaHVua0J5LFxuICBsYXN0OiBsYXN0LFxuICBmaXJzdDogZmlyc3QsXG4gIHhtbDJzdHI6IHhtbDJzdHIsXG4gIHN0cjJ4bWw6IHN0cjJ4bWwsXG4gIGdldFJpZ2h0T3JOdWxsOiBnZXRSaWdodE9yTnVsbCxcbiAgZ2V0UmlnaHQ6IGdldFJpZ2h0LFxuICBnZXRMZWZ0T3JOdWxsOiBnZXRMZWZ0T3JOdWxsLFxuICBnZXRMZWZ0OiBnZXRMZWZ0LFxuICBwcmVnTWF0Y2hBbGw6IHByZWdNYXRjaEFsbCxcbiAgY29udmVydFNwYWNlczogY29udmVydFNwYWNlcyxcbiAgY2hhck1hcFJlZ2V4ZXM6IGNoYXJNYXBSZWdleGVzLFxuICBoYXNDb3JydXB0Q2hhcmFjdGVyczogaGFzQ29ycnVwdENoYXJhY3RlcnMsXG4gIHJlbW92ZUNvcnJ1cHRDaGFyYWN0ZXJzOiByZW1vdmVDb3JydXB0Q2hhcmFjdGVycyxcbiAgZ2V0RGVmYXVsdHM6IGdldERlZmF1bHRzLFxuICB3b3JkVG9VdGY4OiB3b3JkVG9VdGY4LFxuICB1dGY4VG9Xb3JkOiB1dGY4VG9Xb3JkLFxuICBjb25jYXRBcnJheXM6IGNvbmNhdEFycmF5cyxcbiAgcHVzaEFycmF5OiBwdXNoQXJyYXksXG4gIGludmVydE1hcDogaW52ZXJ0TWFwLFxuICBjaGFyTWFwOiBjaGFyTWFwLFxuICBnZXRTaW5nbGVBdHRyaWJ1dGU6IGdldFNpbmdsZUF0dHJpYnV0ZSxcbiAgc2V0U2luZ2xlQXR0cmlidXRlOiBzZXRTaW5nbGVBdHRyaWJ1dGUsXG4gIGlzV2hpdGVTcGFjZTogaXNXaGl0ZVNwYWNlLFxuICBzdGFibGVTb3J0OiBzdGFibGVTb3J0XG59OyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/doc-utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/docxtemplater.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/docxtemplater.js ***!
  \************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar _excluded = [\"modules\"];\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar DocUtils = __webpack_require__(/*! ./doc-utils.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/doc-utils.js\");\nDocUtils.traits = __webpack_require__(/*! ./traits.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/traits.js\");\nDocUtils.moduleWrapper = __webpack_require__(/*! ./module-wrapper.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/module-wrapper.js\");\nvar createScope = __webpack_require__(/*! ./scope-manager.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/scope-manager.js\");\nvar Lexer = __webpack_require__(/*! ./lexer.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/lexer.js\");\nvar commonModule = __webpack_require__(/*! ./modules/common.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/modules/common.js\");\nfunction deprecatedMessage(obj, message) {\n  if (obj.hideDeprecations === true) {\n    return;\n  }\n  // eslint-disable-next-line no-console\n  console.warn(message);\n}\nfunction deprecatedMethod(obj, method) {\n  if (obj.hideDeprecations === true) {\n    return;\n  }\n  return deprecatedMessage(obj, \"Deprecated method \\\".\".concat(method, \"\\\", view upgrade guide : https://docxtemplater.com/docs/api/#upgrade-guide, stack : \").concat(new Error().stack));\n}\nvar _require = __webpack_require__(/*! ./errors.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/errors.js\"),\n  throwMultiError = _require.throwMultiError,\n  throwResolveBeforeCompile = _require.throwResolveBeforeCompile,\n  throwRenderInvalidTemplate = _require.throwRenderInvalidTemplate,\n  throwRenderTwice = _require.throwRenderTwice,\n  XTInternalError = _require.XTInternalError,\n  XTTemplateError = _require.XTTemplateError,\n  throwFileTypeNotIdentified = _require.throwFileTypeNotIdentified,\n  throwFileTypeNotHandled = _require.throwFileTypeNotHandled,\n  throwApiVersionError = _require.throwApiVersionError;\nvar logErrors = __webpack_require__(/*! ./error-logger.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/error-logger.js\");\nvar collectContentTypes = __webpack_require__(/*! ./collect-content-types.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/collect-content-types.js\");\nvar getDefaults = DocUtils.getDefaults,\n  str2xml = DocUtils.str2xml,\n  xml2str = DocUtils.xml2str,\n  moduleWrapper = DocUtils.moduleWrapper,\n  concatArrays = DocUtils.concatArrays,\n  uniq = DocUtils.uniq,\n  getDuplicates = DocUtils.getDuplicates,\n  stableSort = DocUtils.stableSort,\n  pushArray = DocUtils.pushArray;\nvar ctXML = \"[Content_Types].xml\";\nvar relsFile = \"_rels/.rels\";\nvar currentModuleApiVersion = [3, 44, 0];\nfunction dropUnsupportedFileTypesModules(doc) {\n  doc.modules = doc.modules.filter(function (module) {\n    if (!module.supportedFileTypes) {\n      return true;\n    }\n    if (!Array.isArray(module.supportedFileTypes)) {\n      throw new Error(\"The supportedFileTypes field of the module must be an array\");\n    }\n    var isSupportedModule = module.supportedFileTypes.includes(doc.fileType);\n    if (!isSupportedModule) {\n      module.on(\"detached\");\n    }\n    return isSupportedModule;\n  });\n}\nfunction verifyErrors(doc) {\n  var compiled = doc.compiled;\n  doc.errors = concatArrays(Object.keys(compiled).map(function (name) {\n    return compiled[name].allErrors;\n  }));\n  if (doc.errors.length !== 0) {\n    if (doc.options.errorLogging) {\n      logErrors(doc.errors, doc.options.errorLogging);\n    }\n    throwMultiError(doc.errors);\n  }\n}\nvar Docxtemplater = /*#__PURE__*/function () {\n  function Docxtemplater(zip) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$modules = _ref.modules,\n      modules = _ref$modules === void 0 ? [] : _ref$modules,\n      options = _objectWithoutProperties(_ref, _excluded);\n    _classCallCheck(this, Docxtemplater);\n    this.targets = [];\n    this.rendered = false;\n    this.scopeManagers = {};\n    this.compiled = {};\n    this.modules = [commonModule()];\n    this.xmlDocuments = {};\n    if (arguments.length === 0) {\n      deprecatedMessage(this, \"Deprecated docxtemplater constructor with no arguments, view upgrade guide : https://docxtemplater.com/docs/api/#upgrade-guide, stack : \".concat(new Error().stack));\n      this.hideDeprecations = true;\n      this.setOptions(options);\n    } else {\n      this.hideDeprecations = true;\n      this.setOptions(options);\n      if (!zip || !zip.files || typeof zip.file !== \"function\") {\n        throw new Error(\"The first argument of docxtemplater's constructor must be a valid zip file (jszip v2 or pizzip v3)\");\n      }\n      if (!Array.isArray(modules)) {\n        throw new Error(\"The modules argument of docxtemplater's constructor must be an array\");\n      }\n      for (var _i2 = 0; _i2 < modules.length; _i2++) {\n        var _module = modules[_i2];\n        this.attachModule(_module);\n      }\n      this.loadZip(zip);\n      this.compile();\n      this.v4Constructor = true;\n    }\n    this.hideDeprecations = false;\n  }\n  return _createClass(Docxtemplater, [{\n    key: \"verifyApiVersion\",\n    value: function verifyApiVersion(neededVersion) {\n      neededVersion = neededVersion.split(\".\").map(function (i) {\n        return parseInt(i, 10);\n      });\n      if (neededVersion.length !== 3) {\n        throwApiVersionError(\"neededVersion is not a valid version\", {\n          neededVersion: neededVersion,\n          explanation: \"the neededVersion must be an array of length 3\"\n        });\n      }\n      if (neededVersion[0] !== currentModuleApiVersion[0]) {\n        throwApiVersionError(\"The major api version do not match, you probably have to update docxtemplater with npm install --save docxtemplater\", {\n          neededVersion: neededVersion,\n          currentModuleApiVersion: currentModuleApiVersion,\n          explanation: \"moduleAPIVersionMismatch : needed=\".concat(neededVersion.join(\".\"), \", current=\").concat(currentModuleApiVersion.join(\".\"))\n        });\n      }\n      if (neededVersion[1] > currentModuleApiVersion[1]) {\n        throwApiVersionError(\"The minor api version is not uptodate, you probably have to update docxtemplater with npm install --save docxtemplater\", {\n          neededVersion: neededVersion,\n          currentModuleApiVersion: currentModuleApiVersion,\n          explanation: \"moduleAPIVersionMismatch : needed=\".concat(neededVersion.join(\".\"), \", current=\").concat(currentModuleApiVersion.join(\".\"))\n        });\n      }\n      if (neededVersion[1] === currentModuleApiVersion[1] && neededVersion[2] > currentModuleApiVersion[2]) {\n        throwApiVersionError(\"The patch api version is not uptodate, you probably have to update docxtemplater with npm install --save docxtemplater\", {\n          neededVersion: neededVersion,\n          currentModuleApiVersion: currentModuleApiVersion,\n          explanation: \"moduleAPIVersionMismatch : needed=\".concat(neededVersion.join(\".\"), \", current=\").concat(currentModuleApiVersion.join(\".\"))\n        });\n      }\n      return true;\n    }\n  }, {\n    key: \"setModules\",\n    value: function setModules(obj) {\n      for (var _i4 = 0, _this$modules2 = this.modules; _i4 < _this$modules2.length; _i4++) {\n        var _module2 = _this$modules2[_i4];\n        _module2.set(obj);\n      }\n    }\n  }, {\n    key: \"sendEvent\",\n    value: function sendEvent(eventName) {\n      for (var _i6 = 0, _this$modules4 = this.modules; _i6 < _this$modules4.length; _i6++) {\n        var _module3 = _this$modules4[_i6];\n        _module3.on(eventName);\n      }\n    }\n  }, {\n    key: \"attachModule\",\n    value: function attachModule(module) {\n      if (this.v4Constructor) {\n        throw new XTInternalError(\"attachModule() should not be called manually when using the v4 constructor\");\n      }\n      deprecatedMethod(this, \"attachModule\");\n      var moduleType = _typeof(module);\n      if (moduleType === \"function\") {\n        throw new XTInternalError(\"Cannot attach a class/function as a module. Most probably you forgot to instantiate the module by using `new` on the module.\");\n      }\n      if (!module || moduleType !== \"object\") {\n        throw new XTInternalError(\"Cannot attachModule with a falsy value\");\n      }\n      if (module.requiredAPIVersion) {\n        this.verifyApiVersion(module.requiredAPIVersion);\n      }\n      if (module.attached === true) {\n        if (typeof module.clone === \"function\") {\n          module = module.clone();\n        } else {\n          throw new Error(\"Cannot attach a module that was already attached : \\\"\".concat(module.name, \"\\\". The most likely cause is that you are instantiating the module at the root level, and using it for multiple instances of Docxtemplater\"));\n        }\n      }\n      module.attached = true;\n      var wrappedModule = moduleWrapper(module);\n      this.modules.push(wrappedModule);\n      wrappedModule.on(\"attached\");\n      if (this.fileType) {\n        dropUnsupportedFileTypesModules(this);\n      }\n      return this;\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      var _this$delimiters, _this$delimiters2;\n      if (this.v4Constructor) {\n        throw new Error(\"setOptions() should not be called manually when using the v4 constructor\");\n      }\n      deprecatedMethod(this, \"setOptions\");\n      if (!options) {\n        throw new Error(\"setOptions should be called with an object as first parameter\");\n      }\n      this.options = {};\n      var defaults = getDefaults();\n      for (var key in defaults) {\n        var defaultValue = defaults[key];\n        this.options[key] = options[key] != null ? options[key] : this[key] || defaultValue;\n        this[key] = this.options[key];\n      }\n      (_this$delimiters = this.delimiters).start && (_this$delimiters.start = DocUtils.utf8ToWord(this.delimiters.start));\n      (_this$delimiters2 = this.delimiters).end && (_this$delimiters2.end = DocUtils.utf8ToWord(this.delimiters.end));\n      return this;\n    }\n  }, {\n    key: \"loadZip\",\n    value: function loadZip(zip) {\n      if (this.v4Constructor) {\n        throw new Error(\"loadZip() should not be called manually when using the v4 constructor\");\n      }\n      deprecatedMethod(this, \"loadZip\");\n      if (zip.loadAsync) {\n        throw new XTInternalError(\"Docxtemplater doesn't handle JSZip version >=3, please use pizzip\");\n      }\n      this.zip = zip;\n      this.updateFileTypeConfig();\n      this.modules = concatArrays([this.fileTypeConfig.baseModules.map(function (moduleFunction) {\n        return moduleFunction();\n      }), this.modules]);\n      for (var _i8 = 0, _this$modules6 = this.modules; _i8 < _this$modules6.length; _i8++) {\n        var _module4 = _this$modules6[_i8];\n        _module4.zip = this.zip;\n        _module4.docxtemplater = this;\n      }\n      dropUnsupportedFileTypesModules(this);\n      return this;\n    }\n  }, {\n    key: \"precompileFile\",\n    value: function precompileFile(fileName) {\n      var currentFile = this.createTemplateClass(fileName);\n      currentFile.preparse();\n      this.compiled[fileName] = currentFile;\n    }\n  }, {\n    key: \"compileFile\",\n    value: function compileFile(fileName) {\n      this.compiled[fileName].parse();\n    }\n  }, {\n    key: \"getScopeManager\",\n    value: function getScopeManager(to, currentFile, tags) {\n      var _this$scopeManagers;\n      (_this$scopeManagers = this.scopeManagers)[to] || (_this$scopeManagers[to] = createScope({\n        tags: tags,\n        parser: this.parser,\n        cachedParsers: currentFile.cachedParsers\n      }));\n      return this.scopeManagers[to];\n    }\n  }, {\n    key: \"resolveData\",\n    value: function resolveData(data) {\n      var _this = this;\n      deprecatedMethod(this, \"resolveData\");\n      var errors = [];\n      if (!Object.keys(this.compiled).length) {\n        throwResolveBeforeCompile();\n      }\n      return Promise.resolve(data).then(function (data) {\n        _this.data = data;\n        _this.setModules({\n          data: _this.data,\n          Lexer: Lexer\n        });\n        _this.mapper = _this.modules.reduce(function (value, module) {\n          return module.getRenderedMap(value);\n        }, {});\n        return Promise.all(Object.keys(_this.mapper).map(function (to) {\n          var _this$mapper$to = _this.mapper[to],\n            from = _this$mapper$to.from,\n            data = _this$mapper$to.data;\n          return Promise.resolve(data).then(function (data) {\n            var currentFile = _this.compiled[from];\n            currentFile.filePath = to;\n            currentFile.scopeManager = _this.getScopeManager(to, currentFile, data);\n            return currentFile.resolveTags(data).then(function (result) {\n              currentFile.scopeManager.finishedResolving = true;\n              return result;\n            }, function (errs) {\n              Array.prototype.push.apply(errors, errs);\n            });\n          });\n        })).then(function (resolved) {\n          if (errors.length !== 0) {\n            if (_this.options.errorLogging) {\n              logErrors(errors, _this.options.errorLogging);\n            }\n            throwMultiError(errors);\n          }\n          return concatArrays(resolved);\n        });\n      });\n    }\n  }, {\n    key: \"reorderModules\",\n    value: function reorderModules() {\n      /**\n       * Modules will be sorted according to priority.\n       *\n       * Input example:\n       * [\n       *   { priority: 1, name: \"FooMod\" },\n       *   { priority: -1, name: \"XMod\" },\n       *   { priority: 4, name: \"OtherMod\" }\n       * ]\n       *\n       * Output example (sorted by priority in descending order):\n       * [\n       *   { priority: 4, name: \"OtherMod\" },\n       *   { priority: 1, name: \"FooMod\" },\n       *   { priority: -1, name: \"XMod\" }\n       * ]\n       */\n      this.modules = stableSort(this.modules, function (m1, m2) {\n        return (m2.priority || 0) - (m1.priority || 0);\n      });\n    }\n  }, {\n    key: \"throwIfDuplicateModules\",\n    value: function throwIfDuplicateModules() {\n      var duplicates = getDuplicates(this.modules.map(function (_ref2) {\n        var name = _ref2.name;\n        return name;\n      }));\n      if (duplicates.length > 0) {\n        throw new XTInternalError(\"Detected duplicate module \\\"\".concat(duplicates[0], \"\\\"\"));\n      }\n    }\n  }, {\n    key: \"compile\",\n    value: function compile() {\n      var _this2 = this;\n      deprecatedMethod(this, \"compile\");\n      this.updateFileTypeConfig();\n      this.throwIfDuplicateModules();\n      this.reorderModules();\n      if (Object.keys(this.compiled).length) {\n        return this;\n      }\n      this.options = this.modules.reduce(function (options, module) {\n        return module.optionsTransformer(options, _this2);\n      }, this.options);\n      this.options.xmlFileNames = uniq(this.options.xmlFileNames);\n      for (var _i10 = 0, _this$options$xmlFile2 = this.options.xmlFileNames; _i10 < _this$options$xmlFile2.length; _i10++) {\n        var fileName = _this$options$xmlFile2[_i10];\n        var content = this.zip.files[fileName].asText();\n        this.xmlDocuments[fileName] = str2xml(content);\n      }\n      this.setModules({\n        zip: this.zip,\n        xmlDocuments: this.xmlDocuments\n      });\n      this.getTemplatedFiles();\n      /*\n       * Loop inside all templatedFiles (ie xml files with content).\n       * Sometimes they don't exist (footer.xml for example)\n       */\n      for (var _i12 = 0, _this$templatedFiles2 = this.templatedFiles; _i12 < _this$templatedFiles2.length; _i12++) {\n        var _fileName = _this$templatedFiles2[_i12];\n        if (this.zip.files[_fileName] != null) {\n          this.precompileFile(_fileName);\n        }\n      }\n      for (var _i14 = 0, _this$templatedFiles4 = this.templatedFiles; _i14 < _this$templatedFiles4.length; _i14++) {\n        var _fileName2 = _this$templatedFiles4[_i14];\n        if (this.zip.files[_fileName2] != null) {\n          this.compileFile(_fileName2);\n        }\n      }\n      this.setModules({\n        compiled: this.compiled\n      });\n      verifyErrors(this);\n      return this;\n    }\n  }, {\n    key: \"getRelsTypes\",\n    value: function getRelsTypes() {\n      var rootRels = this.zip.files[relsFile];\n      var rootRelsXml = rootRels ? str2xml(rootRels.asText()) : null;\n      var rootRelationships = rootRelsXml ? rootRelsXml.getElementsByTagName(\"Relationship\") : [];\n      var relsTypes = {};\n      for (var _i16 = 0; _i16 < rootRelationships.length; _i16++) {\n        var relation = rootRelationships[_i16];\n        relsTypes[relation.getAttribute(\"Target\")] = relation.getAttribute(\"Type\");\n      }\n      return relsTypes;\n    }\n  }, {\n    key: \"getContentTypes\",\n    value: function getContentTypes() {\n      var contentTypes = this.zip.files[ctXML];\n      var contentTypeXml = contentTypes ? str2xml(contentTypes.asText()) : null;\n      var overrides = contentTypeXml ? contentTypeXml.getElementsByTagName(\"Override\") : null;\n      var defaults = contentTypeXml ? contentTypeXml.getElementsByTagName(\"Default\") : null;\n      return {\n        overrides: overrides,\n        defaults: defaults,\n        contentTypes: contentTypes,\n        contentTypeXml: contentTypeXml\n      };\n    }\n  }, {\n    key: \"updateFileTypeConfig\",\n    value: function updateFileTypeConfig() {\n      var fileType;\n      if (this.zip.files.mimetype) {\n        fileType = \"odt\";\n      }\n      this.relsTypes = this.getRelsTypes();\n      var _this$getContentTypes = this.getContentTypes(),\n        overrides = _this$getContentTypes.overrides,\n        defaults = _this$getContentTypes.defaults,\n        contentTypes = _this$getContentTypes.contentTypes,\n        contentTypeXml = _this$getContentTypes.contentTypeXml;\n      if (contentTypeXml) {\n        this.filesContentTypes = collectContentTypes(overrides, defaults, this.zip);\n        this.invertedContentTypes = DocUtils.invertMap(this.filesContentTypes);\n        this.setModules({\n          contentTypes: this.contentTypes,\n          invertedContentTypes: this.invertedContentTypes\n        });\n      }\n      for (var _i18 = 0, _this$modules8 = this.modules; _i18 < _this$modules8.length; _i18++) {\n        var _module5 = _this$modules8[_i18];\n        fileType = _module5.getFileType({\n          zip: this.zip,\n          contentTypes: contentTypes,\n          contentTypeXml: contentTypeXml,\n          overrides: overrides,\n          defaults: defaults,\n          doc: this\n        }) || fileType;\n      }\n      if (fileType === \"odt\") {\n        throwFileTypeNotHandled(fileType);\n      }\n      if (!fileType) {\n        throwFileTypeNotIdentified(this.zip);\n      }\n      for (var _i20 = 0, _this$modules10 = this.modules; _i20 < _this$modules10.length; _i20++) {\n        var _module6 = _this$modules10[_i20];\n        for (var _i22 = 0, _ref4 = _module6.xmlContentTypes || []; _i22 < _ref4.length; _i22++) {\n          var contentType = _ref4[_i22];\n          pushArray(this.options.xmlFileNames, this.invertedContentTypes[contentType] || []);\n        }\n      }\n      this.fileType = fileType;\n      dropUnsupportedFileTypesModules(this);\n      this.fileTypeConfig = this.options.fileTypeConfig || this.fileTypeConfig;\n      if (!this.fileTypeConfig) {\n        if (Docxtemplater.FileTypeConfig[this.fileType]) {\n          this.fileTypeConfig = Docxtemplater.FileTypeConfig[this.fileType]();\n        } else {\n          /*\n           * Error case handled since v3.60.2\n           * Throw specific error when trying to template xlsx file without xlsxmodule\n           */\n          var message = \"Filetype \\\"\".concat(this.fileType, \"\\\" is not supported\");\n          var id = \"filetype_not_supported\";\n          if (this.fileType === \"xlsx\") {\n            message = \"Filetype \\\"\".concat(this.fileType, \"\\\" is supported only with the paid XlsxModule\");\n            id = \"xlsx_filetype_needs_xlsx_module\";\n          }\n          var err = new XTTemplateError(message);\n          err.properties = {\n            id: id,\n            explanation: message\n          };\n          throw err;\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"renderAsync\",\n    value: function renderAsync(data) {\n      var _this3 = this;\n      this.hideDeprecations = true;\n      var promise = this.resolveData(data);\n      this.hideDeprecations = false;\n      return promise.then(function () {\n        return _this3.render();\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render(data) {\n      if (this.rendered) {\n        throwRenderTwice();\n      }\n      this.rendered = true;\n      if (Object.keys(this.compiled).length === 0) {\n        this.compile();\n      }\n      if (this.errors.length > 0) {\n        throwRenderInvalidTemplate();\n      }\n      if (arguments.length > 0) {\n        this.data = data;\n      }\n      this.setModules({\n        data: this.data,\n        Lexer: Lexer\n      });\n      this.mapper || (this.mapper = this.modules.reduce(function (value, module) {\n        return module.getRenderedMap(value);\n      }, {}));\n      var output = [];\n      for (var to in this.mapper) {\n        var _this$mapper$to2 = this.mapper[to],\n          from = _this$mapper$to2.from,\n          _data = _this$mapper$to2.data;\n        var currentFile = this.compiled[from];\n        currentFile.scopeManager = this.getScopeManager(to, currentFile, _data);\n        currentFile.render(to);\n        output.push([to, currentFile.content, currentFile]);\n        delete currentFile.content;\n      }\n      for (var _i24 = 0; _i24 < output.length; _i24++) {\n        var outputPart = output[_i24];\n        var _outputPart = _slicedToArray(outputPart, 3),\n          content = _outputPart[1],\n          _currentFile = _outputPart[2];\n        for (var _i26 = 0, _this$modules12 = this.modules; _i26 < _this$modules12.length; _i26++) {\n          var _module7 = _this$modules12[_i26];\n          if (_module7.preZip) {\n            var result = _module7.preZip(content, _currentFile);\n            if (typeof result === \"string\") {\n              outputPart[1] = result;\n            }\n          }\n        }\n      }\n      for (var _i28 = 0; _i28 < output.length; _i28++) {\n        var _output$_i = _slicedToArray(output[_i28], 2),\n          _to = _output$_i[0],\n          _content = _output$_i[1];\n        this.zip.file(_to, _content, {\n          createFolders: true\n        });\n      }\n      verifyErrors(this);\n      this.sendEvent(\"syncing-zip\");\n      this.syncZip();\n      // The synced-zip event is used in the subtemplate module for example\n      this.sendEvent(\"synced-zip\");\n      return this;\n    }\n  }, {\n    key: \"syncZip\",\n    value: function syncZip() {\n      for (var fileName in this.xmlDocuments) {\n        this.zip.remove(fileName);\n        var content = xml2str(this.xmlDocuments[fileName]);\n        this.zip.file(fileName, content, {\n          createFolders: true\n        });\n      }\n    }\n  }, {\n    key: \"setData\",\n    value: function setData(data) {\n      deprecatedMethod(this, \"setData\");\n      this.data = data;\n      return this;\n    }\n  }, {\n    key: \"getZip\",\n    value: function getZip() {\n      return this.zip;\n    }\n  }, {\n    key: \"createTemplateClass\",\n    value: function createTemplateClass(path) {\n      var content = this.zip.files[path].asText();\n      return this.createTemplateClassFromContent(content, path);\n    }\n  }, {\n    key: \"createTemplateClassFromContent\",\n    value: function createTemplateClassFromContent(content, filePath) {\n      var xmltOptions = {\n        filePath: filePath,\n        contentType: this.filesContentTypes[filePath],\n        relsType: this.relsTypes[filePath]\n      };\n      var defaults = getDefaults();\n      var defaultKeys = pushArray(Object.keys(defaults), [\"filesContentTypes\", \"fileTypeConfig\", \"fileType\", \"modules\"]);\n      for (var _i30 = 0; _i30 < defaultKeys.length; _i30++) {\n        var key = defaultKeys[_i30];\n        xmltOptions[key] = this[key];\n      }\n      return new Docxtemplater.XmlTemplater(content, xmltOptions);\n    }\n  }, {\n    key: \"getFullText\",\n    value: function getFullText(path) {\n      return this.createTemplateClass(path || this.fileTypeConfig.textPath(this)).getFullText();\n    }\n  }, {\n    key: \"getTemplatedFiles\",\n    value: function getTemplatedFiles() {\n      this.templatedFiles = this.fileTypeConfig.getTemplatedFiles(this.zip);\n      pushArray(this.templatedFiles, this.targets);\n      this.templatedFiles = uniq(this.templatedFiles);\n      return this.templatedFiles;\n    }\n  }]);\n}();\nDocxtemplater.DocUtils = DocUtils;\nDocxtemplater.Errors = __webpack_require__(/*! ./errors.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/errors.js\");\nDocxtemplater.XmlTemplater = __webpack_require__(/*! ./xml-templater.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/xml-templater.js\");\nDocxtemplater.FileTypeConfig = __webpack_require__(/*! ./file-type-config.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/file-type-config.js\");\nDocxtemplater.XmlMatcher = __webpack_require__(/*! ./xml-matcher.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/xml-matcher.js\");\nmodule.exports = Docxtemplater;\nmodule.exports[\"default\"] = Docxtemplater;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/docxtemplater.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/error-logger.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/error-logger.js ***!
  \***********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar _require = __webpack_require__(/*! ./doc-utils.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/doc-utils.js\"),\n  pushArray = _require.pushArray;\n// The error thrown here contains additional information when logged with JSON.stringify (it contains a properties object containing all suberrors).\nfunction replaceErrors(key, value) {\n  if (value instanceof Error) {\n    return pushArray(Object.getOwnPropertyNames(value), [\"stack\"]).reduce(function (error, key) {\n      error[key] = value[key];\n      if (key === \"stack\") {\n        // This is used because in Firefox, stack is not an own property\n        error[key] = value[key].toString();\n      }\n      return error;\n    }, {});\n  }\n  return value;\n}\nfunction logger(error, logging) {\n  // eslint-disable-next-line no-console\n  console.log(JSON.stringify({\n    error: error\n  }, replaceErrors, logging === \"json\" ? 2 : null));\n  if (error.properties && error.properties.errors instanceof Array) {\n    var errorMessages = error.properties.errors.map(function (error) {\n      return error.properties.explanation;\n    }).join(\"\\n\");\n    // eslint-disable-next-line no-console\n    console.log(\"errorMessages\", errorMessages);\n    /*\n     * errorMessages is a humanly readable message looking like this :\n     * 'The tag beginning with \"foobar\" is unopened'\n     */\n  }\n}\nmodule.exports = logger;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZG9jeHRlbXBsYXRlckAzLjYwLjIvbm9kZV9tb2R1bGVzL2RvY3h0ZW1wbGF0ZXIvanMvZXJyb3ItbG9nZ2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGVBQWUsbUJBQU8sQ0FBQyxrSEFBZ0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssSUFBSTtBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9icmFuZG9uYnJld2VyL0RvY3VtZW50cy9MaW5ndW9zaXR5L0xpbmd1b3NpdHkvbm9kZV9tb2R1bGVzLy5wbnBtL2RvY3h0ZW1wbGF0ZXJAMy42MC4yL25vZGVfbW9kdWxlcy9kb2N4dGVtcGxhdGVyL2pzL2Vycm9yLWxvZ2dlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZShcIi4vZG9jLXV0aWxzLmpzXCIpLFxuICBwdXNoQXJyYXkgPSBfcmVxdWlyZS5wdXNoQXJyYXk7XG4vLyBUaGUgZXJyb3IgdGhyb3duIGhlcmUgY29udGFpbnMgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiB3aGVuIGxvZ2dlZCB3aXRoIEpTT04uc3RyaW5naWZ5IChpdCBjb250YWlucyBhIHByb3BlcnRpZXMgb2JqZWN0IGNvbnRhaW5pbmcgYWxsIHN1YmVycm9ycykuXG5mdW5jdGlvbiByZXBsYWNlRXJyb3JzKGtleSwgdmFsdWUpIHtcbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gcHVzaEFycmF5KE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHZhbHVlKSwgW1wic3RhY2tcIl0pLnJlZHVjZShmdW5jdGlvbiAoZXJyb3IsIGtleSkge1xuICAgICAgZXJyb3Jba2V5XSA9IHZhbHVlW2tleV07XG4gICAgICBpZiAoa2V5ID09PSBcInN0YWNrXCIpIHtcbiAgICAgICAgLy8gVGhpcyBpcyB1c2VkIGJlY2F1c2UgaW4gRmlyZWZveCwgc3RhY2sgaXMgbm90IGFuIG93biBwcm9wZXJ0eVxuICAgICAgICBlcnJvcltrZXldID0gdmFsdWVba2V5XS50b1N0cmluZygpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVycm9yO1xuICAgIH0sIHt9KTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBsb2dnZXIoZXJyb3IsIGxvZ2dpbmcpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoe1xuICAgIGVycm9yOiBlcnJvclxuICB9LCByZXBsYWNlRXJyb3JzLCBsb2dnaW5nID09PSBcImpzb25cIiA/IDIgOiBudWxsKSk7XG4gIGlmIChlcnJvci5wcm9wZXJ0aWVzICYmIGVycm9yLnByb3BlcnRpZXMuZXJyb3JzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICB2YXIgZXJyb3JNZXNzYWdlcyA9IGVycm9yLnByb3BlcnRpZXMuZXJyb3JzLm1hcChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBlcnJvci5wcm9wZXJ0aWVzLmV4cGxhbmF0aW9uO1xuICAgIH0pLmpvaW4oXCJcXG5cIik7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmxvZyhcImVycm9yTWVzc2FnZXNcIiwgZXJyb3JNZXNzYWdlcyk7XG4gICAgLypcbiAgICAgKiBlcnJvck1lc3NhZ2VzIGlzIGEgaHVtYW5seSByZWFkYWJsZSBtZXNzYWdlIGxvb2tpbmcgbGlrZSB0aGlzIDpcbiAgICAgKiAnVGhlIHRhZyBiZWdpbm5pbmcgd2l0aCBcImZvb2JhclwiIGlzIHVub3BlbmVkJ1xuICAgICAqL1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGxvZ2dlcjsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/error-logger.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/errors.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/errors.js ***!
  \*****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar _require = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/utils.js\"),\n  last = _require.last,\n  first = _require.first;\nfunction XTError(message) {\n  this.name = \"GenericError\";\n  this.message = message;\n  this.stack = new Error(message).stack;\n}\nXTError.prototype = Error.prototype;\nfunction XTTemplateError(message) {\n  this.name = \"TemplateError\";\n  this.message = message;\n  this.stack = new Error(message).stack;\n}\nXTTemplateError.prototype = new XTError();\nfunction XTRenderingError(message) {\n  this.name = \"RenderingError\";\n  this.message = message;\n  this.stack = new Error(message).stack;\n}\nXTRenderingError.prototype = new XTError();\nfunction XTScopeParserError(message) {\n  this.name = \"ScopeParserError\";\n  this.message = message;\n  this.stack = new Error(message).stack;\n}\nXTScopeParserError.prototype = new XTError();\nfunction XTInternalError(message) {\n  this.name = \"InternalError\";\n  this.properties = {\n    explanation: \"InternalError\"\n  };\n  this.message = message;\n  this.stack = new Error(message).stack;\n}\nXTInternalError.prototype = new XTError();\nfunction XTAPIVersionError(message) {\n  this.name = \"APIVersionError\";\n  this.properties = {\n    explanation: \"APIVersionError\"\n  };\n  this.message = message;\n  this.stack = new Error(message).stack;\n}\nXTAPIVersionError.prototype = new XTError();\nfunction throwApiVersionError(msg, properties) {\n  var err = new XTAPIVersionError(msg);\n  err.properties = _objectSpread({\n    id: \"api_version_error\"\n  }, properties);\n  throw err;\n}\nfunction throwMultiError(errors) {\n  var err = new XTTemplateError(\"Multi error\");\n  err.properties = {\n    errors: errors,\n    id: \"multi_error\",\n    explanation: \"The template has multiple errors\"\n  };\n  throw err;\n}\nfunction getUnopenedTagException(options) {\n  var err = new XTTemplateError(\"Unopened tag\");\n  err.properties = {\n    xtag: last(options.xtag.split(\" \")),\n    id: \"unopened_tag\",\n    context: options.xtag,\n    offset: options.offset,\n    lIndex: options.lIndex,\n    explanation: \"The tag beginning with \\\"\".concat(options.xtag.substr(0, 10), \"\\\" is unopened\")\n  };\n  return err;\n}\nfunction getDuplicateOpenTagException(options) {\n  var err = new XTTemplateError(\"Duplicate open tag, expected one open tag\");\n  err.properties = {\n    xtag: first(options.xtag.split(\" \")),\n    id: \"duplicate_open_tag\",\n    context: options.xtag,\n    offset: options.offset,\n    lIndex: options.lIndex,\n    explanation: \"The tag beginning with \\\"\".concat(options.xtag.substr(0, 10), \"\\\" has duplicate open tags\")\n  };\n  return err;\n}\nfunction getDuplicateCloseTagException(options) {\n  var err = new XTTemplateError(\"Duplicate close tag, expected one close tag\");\n  err.properties = {\n    xtag: first(options.xtag.split(\" \")),\n    id: \"duplicate_close_tag\",\n    context: options.xtag,\n    offset: options.offset,\n    lIndex: options.lIndex,\n    explanation: \"The tag ending with \\\"\".concat(options.xtag.substr(0, 10), \"\\\" has duplicate close tags\")\n  };\n  return err;\n}\nfunction getUnclosedTagException(options) {\n  var err = new XTTemplateError(\"Unclosed tag\");\n  err.properties = {\n    xtag: first(options.xtag.split(\" \")).substr(1),\n    id: \"unclosed_tag\",\n    context: options.xtag,\n    offset: options.offset,\n    lIndex: options.lIndex,\n    explanation: \"The tag beginning with \\\"\".concat(options.xtag.substr(0, 10), \"\\\" is unclosed\")\n  };\n  return err;\n}\nfunction throwXmlTagNotFound(options) {\n  var err = new XTTemplateError(\"No tag \\\"\".concat(options.element, \"\\\" was found at the \").concat(options.position));\n  var part = options.parsed[options.index];\n  err.properties = {\n    id: \"no_xml_tag_found_at_\".concat(options.position),\n    explanation: \"No tag \\\"\".concat(options.element, \"\\\" was found at the \").concat(options.position),\n    offset: part.offset,\n    part: part,\n    parsed: options.parsed,\n    index: options.index,\n    element: options.element\n  };\n  throw err;\n}\nfunction getCorruptCharactersException(_ref) {\n  var tag = _ref.tag,\n    value = _ref.value,\n    offset = _ref.offset;\n  var err = new XTRenderingError(\"There are some XML corrupt characters\");\n  err.properties = {\n    id: \"invalid_xml_characters\",\n    xtag: tag,\n    value: value,\n    offset: offset,\n    explanation: \"There are some corrupt characters for the field \".concat(tag)\n  };\n  return err;\n}\nfunction getInvalidRawXMLValueException(_ref2) {\n  var tag = _ref2.tag,\n    value = _ref2.value,\n    offset = _ref2.offset;\n  var err = new XTRenderingError(\"Non string values are not allowed for rawXML tags\");\n  err.properties = {\n    id: \"invalid_raw_xml_value\",\n    xtag: tag,\n    value: value,\n    offset: offset,\n    explanation: \"The value of the raw tag : '\".concat(tag, \"' is not a string\")\n  };\n  return err;\n}\nfunction throwExpandNotFound(options) {\n  var _options$part = options.part,\n    value = _options$part.value,\n    offset = _options$part.offset,\n    _options$id = options.id,\n    id = _options$id === void 0 ? \"raw_tag_outerxml_invalid\" : _options$id,\n    _options$message = options.message,\n    message = _options$message === void 0 ? \"Raw tag not in paragraph\" : _options$message;\n  var part = options.part;\n  var _options$explanation = options.explanation,\n    explanation = _options$explanation === void 0 ? \"The tag \\\"\".concat(value, \"\\\" is not inside a paragraph\") : _options$explanation;\n  if (typeof explanation === \"function\") {\n    explanation = explanation(part);\n  }\n  var err = new XTTemplateError(message);\n  err.properties = {\n    id: id,\n    explanation: explanation,\n    rootError: options.rootError,\n    xtag: value,\n    offset: offset,\n    postparsed: options.postparsed,\n    expandTo: options.expandTo,\n    index: options.index\n  };\n  throw err;\n}\nfunction throwRawTagShouldBeOnlyTextInParagraph(options) {\n  var err = new XTTemplateError(\"Raw tag should be the only text in paragraph\");\n  var tag = options.part.value;\n  err.properties = {\n    id: \"raw_xml_tag_should_be_only_text_in_paragraph\",\n    explanation: \"The raw tag \\\"\".concat(tag, \"\\\" should be the only text in this paragraph. This means that this tag should not be surrounded by any text or spaces.\"),\n    xtag: tag,\n    offset: options.part.offset,\n    paragraphParts: options.paragraphParts\n  };\n  throw err;\n}\nfunction getUnmatchedLoopException(part) {\n  var location = part.location,\n    offset = part.offset,\n    square = part.square;\n  var t = location === \"start\" ? \"unclosed\" : \"unopened\";\n  var T = location === \"start\" ? \"Unclosed\" : \"Unopened\";\n  var err = new XTTemplateError(\"\".concat(T, \" loop\"));\n  var tag = part.value;\n  err.properties = {\n    id: \"\".concat(t, \"_loop\"),\n    explanation: \"The loop with tag \\\"\".concat(tag, \"\\\" is \").concat(t),\n    xtag: tag,\n    offset: offset\n  };\n  if (square) {\n    err.properties.square = square;\n  }\n  return err;\n}\nfunction getUnbalancedLoopException(pair, lastPair) {\n  var err = new XTTemplateError(\"Unbalanced loop tag\");\n  var lastL = lastPair[0].part.value;\n  var lastR = lastPair[1].part.value;\n  var l = pair[0].part.value;\n  var r = pair[1].part.value;\n  err.properties = {\n    id: \"unbalanced_loop_tags\",\n    explanation: \"Unbalanced loop tags {#\".concat(lastL, \"}{/\").concat(lastR, \"}{#\").concat(l, \"}{/\").concat(r, \"}\"),\n    offset: [lastPair[0].part.offset, pair[1].part.offset],\n    lastPair: {\n      left: lastPair[0].part.value,\n      right: lastPair[1].part.value\n    },\n    pair: {\n      left: pair[0].part.value,\n      right: pair[1].part.value\n    }\n  };\n  return err;\n}\nfunction getClosingTagNotMatchOpeningTag(_ref3) {\n  var tags = _ref3.tags;\n  var err = new XTTemplateError(\"Closing tag does not match opening tag\");\n  err.properties = {\n    id: \"closing_tag_does_not_match_opening_tag\",\n    explanation: \"The tag \\\"\".concat(tags[0].value, \"\\\" is closed by the tag \\\"\").concat(tags[1].value, \"\\\"\"),\n    openingtag: first(tags).value,\n    offset: [first(tags).offset, last(tags).offset],\n    closingtag: last(tags).value\n  };\n  return err;\n}\nfunction getScopeCompilationError(_ref4) {\n  var tag = _ref4.tag,\n    rootError = _ref4.rootError,\n    offset = _ref4.offset;\n  var err = new XTScopeParserError(\"Scope parser compilation failed\");\n  err.properties = {\n    id: \"scopeparser_compilation_failed\",\n    offset: offset,\n    xtag: tag,\n    explanation: \"The scope parser for the tag \\\"\".concat(tag, \"\\\" failed to compile\"),\n    rootError: rootError\n  };\n  return err;\n}\nfunction getScopeParserExecutionError(_ref5) {\n  var tag = _ref5.tag,\n    scope = _ref5.scope,\n    error = _ref5.error,\n    offset = _ref5.offset;\n  var err = new XTScopeParserError(\"Scope parser execution failed\");\n  err.properties = {\n    id: \"scopeparser_execution_failed\",\n    explanation: \"The scope parser for the tag \".concat(tag, \" failed to execute\"),\n    scope: scope,\n    offset: offset,\n    xtag: tag,\n    rootError: error\n  };\n  return err;\n}\nfunction getLoopPositionProducesInvalidXMLError(_ref6) {\n  var tag = _ref6.tag,\n    offset = _ref6.offset;\n  var err = new XTTemplateError(\"The position of the loop tags \\\"\".concat(tag, \"\\\" would produce invalid XML\"));\n  err.properties = {\n    xtag: tag,\n    id: \"loop_position_invalid\",\n    explanation: \"The tags \\\"\".concat(tag, \"\\\" are misplaced in the document, for example one of them is in a table and the other one outside the table\"),\n    offset: offset\n  };\n  return err;\n}\nfunction throwUnimplementedTagType(part, index) {\n  var errorMsg = \"Unimplemented tag type \\\"\".concat(part.type, \"\\\"\");\n  if (part.module) {\n    errorMsg += \" \\\"\".concat(part.module, \"\\\"\");\n  }\n  var err = new XTTemplateError(errorMsg);\n  err.properties = {\n    part: part,\n    index: index,\n    id: \"unimplemented_tag_type\"\n  };\n  throw err;\n}\nfunction throwMalformedXml() {\n  var err = new XTInternalError(\"Malformed xml\");\n  err.properties = {\n    explanation: \"The template contains malformed xml\",\n    id: \"malformed_xml\"\n  };\n  throw err;\n}\nfunction throwResolveBeforeCompile() {\n  var err = new XTInternalError(\"You must run `.compile()` before running `.resolveData()`\");\n  err.properties = {\n    id: \"resolve_before_compile\",\n    explanation: \"You must run `.compile()` before running `.resolveData()`\"\n  };\n  throw err;\n}\nfunction throwRenderInvalidTemplate() {\n  var err = new XTInternalError(\"You should not call .render on a document that had compilation errors\");\n  err.properties = {\n    id: \"render_on_invalid_template\",\n    explanation: \"You should not call .render on a document that had compilation errors\"\n  };\n  throw err;\n}\nfunction throwRenderTwice() {\n  var err = new XTInternalError(\"You should not call .render twice on the same docxtemplater instance\");\n  err.properties = {\n    id: \"render_twice\",\n    explanation: \"You should not call .render twice on the same docxtemplater instance\"\n  };\n  throw err;\n}\nfunction throwFileTypeNotIdentified(zip) {\n  var files = Object.keys(zip.files).slice(0, 10);\n  var msg = \"\";\n  if (files.length === 0) {\n    msg = \"Empty zip file\";\n  } else {\n    msg = \"Zip file contains : \".concat(files.join(\",\"));\n  }\n  var err = new XTInternalError(\"The filetype for this file could not be identified, is this file corrupted ? \".concat(msg));\n  err.properties = {\n    id: \"filetype_not_identified\",\n    explanation: \"The filetype for this file could not be identified, is this file corrupted ? \".concat(msg)\n  };\n  throw err;\n}\nfunction throwXmlInvalid(content, offset) {\n  var err = new XTTemplateError(\"An XML file has invalid xml\");\n  err.properties = {\n    id: \"file_has_invalid_xml\",\n    content: content,\n    offset: offset,\n    explanation: \"The docx contains invalid XML, it is most likely corrupt\"\n  };\n  throw err;\n}\nfunction throwFileTypeNotHandled(fileType) {\n  var err = new XTInternalError(\"The filetype \\\"\".concat(fileType, \"\\\" is not handled by docxtemplater\"));\n  err.properties = {\n    id: \"filetype_not_handled\",\n    explanation: \"The file you are trying to generate is of type \\\"\".concat(fileType, \"\\\", but only docx and pptx formats are handled\"),\n    fileType: fileType\n  };\n  throw err;\n}\nmodule.exports = {\n  XTError: XTError,\n  XTTemplateError: XTTemplateError,\n  XTInternalError: XTInternalError,\n  XTScopeParserError: XTScopeParserError,\n  XTAPIVersionError: XTAPIVersionError,\n  // Remove this alias in v4\n  RenderingError: XTRenderingError,\n  XTRenderingError: XTRenderingError,\n  getClosingTagNotMatchOpeningTag: getClosingTagNotMatchOpeningTag,\n  getLoopPositionProducesInvalidXMLError: getLoopPositionProducesInvalidXMLError,\n  getScopeCompilationError: getScopeCompilationError,\n  getScopeParserExecutionError: getScopeParserExecutionError,\n  getUnclosedTagException: getUnclosedTagException,\n  getUnopenedTagException: getUnopenedTagException,\n  getUnmatchedLoopException: getUnmatchedLoopException,\n  getDuplicateCloseTagException: getDuplicateCloseTagException,\n  getDuplicateOpenTagException: getDuplicateOpenTagException,\n  getCorruptCharactersException: getCorruptCharactersException,\n  getInvalidRawXMLValueException: getInvalidRawXMLValueException,\n  getUnbalancedLoopException: getUnbalancedLoopException,\n  throwApiVersionError: throwApiVersionError,\n  throwFileTypeNotHandled: throwFileTypeNotHandled,\n  throwFileTypeNotIdentified: throwFileTypeNotIdentified,\n  throwMalformedXml: throwMalformedXml,\n  throwMultiError: throwMultiError,\n  throwExpandNotFound: throwExpandNotFound,\n  throwRawTagShouldBeOnlyTextInParagraph: throwRawTagShouldBeOnlyTextInParagraph,\n  throwUnimplementedTagType: throwUnimplementedTagType,\n  throwXmlTagNotFound: throwXmlTagNotFound,\n  throwXmlInvalid: throwXmlInvalid,\n  throwResolveBeforeCompile: throwResolveBeforeCompile,\n  throwRenderInvalidTemplate: throwRenderInvalidTemplate,\n  throwRenderTwice: throwRenderTwice\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/file-type-config.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/file-type-config.js ***!
  \***************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar loopModule = __webpack_require__(/*! ./modules/loop.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/modules/loop.js\");\nvar spacePreserveModule = __webpack_require__(/*! ./modules/space-preserve.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/modules/space-preserve.js\");\nvar rawXmlModule = __webpack_require__(/*! ./modules/rawxml.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/modules/rawxml.js\");\nvar expandPairTrait = __webpack_require__(/*! ./modules/expand-pair-trait.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/modules/expand-pair-trait.js\");\nvar render = __webpack_require__(/*! ./modules/render.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/modules/render.js\");\nfunction DocXFileTypeConfig() {\n  return {\n    getTemplatedFiles: function getTemplatedFiles() {\n      return [];\n    },\n    textPath: function textPath(doc) {\n      return doc.textTarget;\n    },\n    tagsXmlTextArray: [\"Company\", \"HyperlinkBase\", \"Manager\", \"cp:category\", \"cp:keywords\", \"dc:creator\", \"dc:description\", \"dc:subject\", \"dc:title\", \"cp:contentStatus\", \"w:t\", \"a:t\", \"m:t\", \"vt:lpstr\", \"vt:lpwstr\"],\n    tagsXmlLexedArray: [\"w:proofState\", \"w:tc\", \"w:tr\", \"w:tbl\", \"w:body\", \"w:document\", \"w:p\", \"w:r\", \"w:br\", \"w:rPr\", \"w:pPr\", \"w:spacing\", \"w:sdtContent\", \"w:sdt\", \"w:drawing\", \"w:sectPr\", \"w:type\", \"w:headerReference\", \"w:footerReference\", \"w:bookmarkStart\", \"w:bookmarkEnd\", \"w:commentRangeStart\", \"w:commentRangeEnd\", \"w:commentReference\"],\n    droppedTagsInsidePlaceholder: [\"w:p\", \"w:br\", \"w:bookmarkStart\", \"w:bookmarkEnd\"],\n    expandTags: [{\n      contains: \"w:tc\",\n      expand: \"w:tr\"\n    }],\n    onParagraphLoop: [{\n      contains: \"w:p\",\n      expand: \"w:p\",\n      onlyTextInTag: true\n    }],\n    tagRawXml: \"w:p\",\n    baseModules: [loopModule, spacePreserveModule, expandPairTrait, rawXmlModule, render],\n    tagShouldContain: [{\n      tag: \"w:sdtContent\",\n      shouldContain: [\"w:p\", \"w:r\", \"w:commentRangeStart\", \"w:sdt\"],\n      value: \"<w:p></w:p>\"\n    }, {\n      tag: \"w:tc\",\n      shouldContain: [\"w:p\"],\n      value: \"<w:p></w:p>\"\n    }, {\n      tag: \"w:tr\",\n      shouldContain: [\"w:tc\"],\n      drop: true\n    }, {\n      tag: \"w:tbl\",\n      shouldContain: [\"w:tr\"],\n      drop: true\n    }]\n  };\n}\nfunction PptXFileTypeConfig() {\n  return {\n    getTemplatedFiles: function getTemplatedFiles() {\n      return [];\n    },\n    textPath: function textPath(doc) {\n      return doc.textTarget;\n    },\n    tagsXmlTextArray: [\"Company\", \"HyperlinkBase\", \"Manager\", \"cp:category\", \"cp:keywords\", \"dc:creator\", \"dc:description\", \"dc:subject\", \"dc:title\", \"a:t\", \"m:t\", \"vt:lpstr\", \"vt:lpwstr\"],\n    tagsXmlLexedArray: [\"p:sp\", \"a:tc\", \"a:tr\", \"a:tbl\", \"a:graphicData\", \"a:p\", \"a:r\", \"a:rPr\", \"p:txBody\", \"a:txBody\", \"a:off\", \"a:ext\", \"p:graphicFrame\", \"p:xfrm\", \"a16:rowId\", \"a:endParaRPr\"],\n    droppedTagsInsidePlaceholder: [\"a:p\", \"a:endParaRPr\"],\n    expandTags: [{\n      contains: \"a:tc\",\n      expand: \"a:tr\"\n    }],\n    onParagraphLoop: [{\n      contains: \"a:p\",\n      expand: \"a:p\",\n      onlyTextInTag: true\n    }],\n    tagRawXml: \"p:sp\",\n    baseModules: [loopModule, expandPairTrait, rawXmlModule, render],\n    tagShouldContain: [{\n      tag: \"a:tbl\",\n      shouldContain: [\"a:tr\"],\n      dropParent: \"p:graphicFrame\"\n    }, {\n      tag: \"p:txBody\",\n      shouldContain: [\"a:p\"],\n      value: \"<a:p></a:p>\"\n    }, {\n      tag: \"a:txBody\",\n      shouldContain: [\"a:p\"],\n      value: \"<a:p></a:p>\"\n    }]\n  };\n}\nmodule.exports = {\n  docx: DocXFileTypeConfig,\n  pptx: PptXFileTypeConfig\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZG9jeHRlbXBsYXRlckAzLjYwLjIvbm9kZV9tb2R1bGVzL2RvY3h0ZW1wbGF0ZXIvanMvZmlsZS10eXBlLWNvbmZpZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixpQkFBaUIsbUJBQU8sQ0FBQyx3SEFBbUI7QUFDNUMsMEJBQTBCLG1CQUFPLENBQUMsNElBQTZCO0FBQy9ELG1CQUFtQixtQkFBTyxDQUFDLDRIQUFxQjtBQUNoRCxzQkFBc0IsbUJBQU8sQ0FBQyxrSkFBZ0M7QUFDOUQsYUFBYSxtQkFBTyxDQUFDLDRIQUFxQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2JyYW5kb25icmV3ZXIvRG9jdW1lbnRzL0xpbmd1b3NpdHkvTGluZ3Vvc2l0eS9ub2RlX21vZHVsZXMvLnBucG0vZG9jeHRlbXBsYXRlckAzLjYwLjIvbm9kZV9tb2R1bGVzL2RvY3h0ZW1wbGF0ZXIvanMvZmlsZS10eXBlLWNvbmZpZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIGxvb3BNb2R1bGUgPSByZXF1aXJlKFwiLi9tb2R1bGVzL2xvb3AuanNcIik7XG52YXIgc3BhY2VQcmVzZXJ2ZU1vZHVsZSA9IHJlcXVpcmUoXCIuL21vZHVsZXMvc3BhY2UtcHJlc2VydmUuanNcIik7XG52YXIgcmF3WG1sTW9kdWxlID0gcmVxdWlyZShcIi4vbW9kdWxlcy9yYXd4bWwuanNcIik7XG52YXIgZXhwYW5kUGFpclRyYWl0ID0gcmVxdWlyZShcIi4vbW9kdWxlcy9leHBhbmQtcGFpci10cmFpdC5qc1wiKTtcbnZhciByZW5kZXIgPSByZXF1aXJlKFwiLi9tb2R1bGVzL3JlbmRlci5qc1wiKTtcbmZ1bmN0aW9uIERvY1hGaWxlVHlwZUNvbmZpZygpIHtcbiAgcmV0dXJuIHtcbiAgICBnZXRUZW1wbGF0ZWRGaWxlczogZnVuY3Rpb24gZ2V0VGVtcGxhdGVkRmlsZXMoKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfSxcbiAgICB0ZXh0UGF0aDogZnVuY3Rpb24gdGV4dFBhdGgoZG9jKSB7XG4gICAgICByZXR1cm4gZG9jLnRleHRUYXJnZXQ7XG4gICAgfSxcbiAgICB0YWdzWG1sVGV4dEFycmF5OiBbXCJDb21wYW55XCIsIFwiSHlwZXJsaW5rQmFzZVwiLCBcIk1hbmFnZXJcIiwgXCJjcDpjYXRlZ29yeVwiLCBcImNwOmtleXdvcmRzXCIsIFwiZGM6Y3JlYXRvclwiLCBcImRjOmRlc2NyaXB0aW9uXCIsIFwiZGM6c3ViamVjdFwiLCBcImRjOnRpdGxlXCIsIFwiY3A6Y29udGVudFN0YXR1c1wiLCBcInc6dFwiLCBcImE6dFwiLCBcIm06dFwiLCBcInZ0Omxwc3RyXCIsIFwidnQ6bHB3c3RyXCJdLFxuICAgIHRhZ3NYbWxMZXhlZEFycmF5OiBbXCJ3OnByb29mU3RhdGVcIiwgXCJ3OnRjXCIsIFwidzp0clwiLCBcInc6dGJsXCIsIFwidzpib2R5XCIsIFwidzpkb2N1bWVudFwiLCBcInc6cFwiLCBcInc6clwiLCBcInc6YnJcIiwgXCJ3OnJQclwiLCBcInc6cFByXCIsIFwidzpzcGFjaW5nXCIsIFwidzpzZHRDb250ZW50XCIsIFwidzpzZHRcIiwgXCJ3OmRyYXdpbmdcIiwgXCJ3OnNlY3RQclwiLCBcInc6dHlwZVwiLCBcInc6aGVhZGVyUmVmZXJlbmNlXCIsIFwidzpmb290ZXJSZWZlcmVuY2VcIiwgXCJ3OmJvb2ttYXJrU3RhcnRcIiwgXCJ3OmJvb2ttYXJrRW5kXCIsIFwidzpjb21tZW50UmFuZ2VTdGFydFwiLCBcInc6Y29tbWVudFJhbmdlRW5kXCIsIFwidzpjb21tZW50UmVmZXJlbmNlXCJdLFxuICAgIGRyb3BwZWRUYWdzSW5zaWRlUGxhY2Vob2xkZXI6IFtcInc6cFwiLCBcInc6YnJcIiwgXCJ3OmJvb2ttYXJrU3RhcnRcIiwgXCJ3OmJvb2ttYXJrRW5kXCJdLFxuICAgIGV4cGFuZFRhZ3M6IFt7XG4gICAgICBjb250YWluczogXCJ3OnRjXCIsXG4gICAgICBleHBhbmQ6IFwidzp0clwiXG4gICAgfV0sXG4gICAgb25QYXJhZ3JhcGhMb29wOiBbe1xuICAgICAgY29udGFpbnM6IFwidzpwXCIsXG4gICAgICBleHBhbmQ6IFwidzpwXCIsXG4gICAgICBvbmx5VGV4dEluVGFnOiB0cnVlXG4gICAgfV0sXG4gICAgdGFnUmF3WG1sOiBcInc6cFwiLFxuICAgIGJhc2VNb2R1bGVzOiBbbG9vcE1vZHVsZSwgc3BhY2VQcmVzZXJ2ZU1vZHVsZSwgZXhwYW5kUGFpclRyYWl0LCByYXdYbWxNb2R1bGUsIHJlbmRlcl0sXG4gICAgdGFnU2hvdWxkQ29udGFpbjogW3tcbiAgICAgIHRhZzogXCJ3OnNkdENvbnRlbnRcIixcbiAgICAgIHNob3VsZENvbnRhaW46IFtcInc6cFwiLCBcInc6clwiLCBcInc6Y29tbWVudFJhbmdlU3RhcnRcIiwgXCJ3OnNkdFwiXSxcbiAgICAgIHZhbHVlOiBcIjx3OnA+PC93OnA+XCJcbiAgICB9LCB7XG4gICAgICB0YWc6IFwidzp0Y1wiLFxuICAgICAgc2hvdWxkQ29udGFpbjogW1widzpwXCJdLFxuICAgICAgdmFsdWU6IFwiPHc6cD48L3c6cD5cIlxuICAgIH0sIHtcbiAgICAgIHRhZzogXCJ3OnRyXCIsXG4gICAgICBzaG91bGRDb250YWluOiBbXCJ3OnRjXCJdLFxuICAgICAgZHJvcDogdHJ1ZVxuICAgIH0sIHtcbiAgICAgIHRhZzogXCJ3OnRibFwiLFxuICAgICAgc2hvdWxkQ29udGFpbjogW1widzp0clwiXSxcbiAgICAgIGRyb3A6IHRydWVcbiAgICB9XVxuICB9O1xufVxuZnVuY3Rpb24gUHB0WEZpbGVUeXBlQ29uZmlnKCkge1xuICByZXR1cm4ge1xuICAgIGdldFRlbXBsYXRlZEZpbGVzOiBmdW5jdGlvbiBnZXRUZW1wbGF0ZWRGaWxlcygpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9LFxuICAgIHRleHRQYXRoOiBmdW5jdGlvbiB0ZXh0UGF0aChkb2MpIHtcbiAgICAgIHJldHVybiBkb2MudGV4dFRhcmdldDtcbiAgICB9LFxuICAgIHRhZ3NYbWxUZXh0QXJyYXk6IFtcIkNvbXBhbnlcIiwgXCJIeXBlcmxpbmtCYXNlXCIsIFwiTWFuYWdlclwiLCBcImNwOmNhdGVnb3J5XCIsIFwiY3A6a2V5d29yZHNcIiwgXCJkYzpjcmVhdG9yXCIsIFwiZGM6ZGVzY3JpcHRpb25cIiwgXCJkYzpzdWJqZWN0XCIsIFwiZGM6dGl0bGVcIiwgXCJhOnRcIiwgXCJtOnRcIiwgXCJ2dDpscHN0clwiLCBcInZ0Omxwd3N0clwiXSxcbiAgICB0YWdzWG1sTGV4ZWRBcnJheTogW1wicDpzcFwiLCBcImE6dGNcIiwgXCJhOnRyXCIsIFwiYTp0YmxcIiwgXCJhOmdyYXBoaWNEYXRhXCIsIFwiYTpwXCIsIFwiYTpyXCIsIFwiYTpyUHJcIiwgXCJwOnR4Qm9keVwiLCBcImE6dHhCb2R5XCIsIFwiYTpvZmZcIiwgXCJhOmV4dFwiLCBcInA6Z3JhcGhpY0ZyYW1lXCIsIFwicDp4ZnJtXCIsIFwiYTE2OnJvd0lkXCIsIFwiYTplbmRQYXJhUlByXCJdLFxuICAgIGRyb3BwZWRUYWdzSW5zaWRlUGxhY2Vob2xkZXI6IFtcImE6cFwiLCBcImE6ZW5kUGFyYVJQclwiXSxcbiAgICBleHBhbmRUYWdzOiBbe1xuICAgICAgY29udGFpbnM6IFwiYTp0Y1wiLFxuICAgICAgZXhwYW5kOiBcImE6dHJcIlxuICAgIH1dLFxuICAgIG9uUGFyYWdyYXBoTG9vcDogW3tcbiAgICAgIGNvbnRhaW5zOiBcImE6cFwiLFxuICAgICAgZXhwYW5kOiBcImE6cFwiLFxuICAgICAgb25seVRleHRJblRhZzogdHJ1ZVxuICAgIH1dLFxuICAgIHRhZ1Jhd1htbDogXCJwOnNwXCIsXG4gICAgYmFzZU1vZHVsZXM6IFtsb29wTW9kdWxlLCBleHBhbmRQYWlyVHJhaXQsIHJhd1htbE1vZHVsZSwgcmVuZGVyXSxcbiAgICB0YWdTaG91bGRDb250YWluOiBbe1xuICAgICAgdGFnOiBcImE6dGJsXCIsXG4gICAgICBzaG91bGRDb250YWluOiBbXCJhOnRyXCJdLFxuICAgICAgZHJvcFBhcmVudDogXCJwOmdyYXBoaWNGcmFtZVwiXG4gICAgfSwge1xuICAgICAgdGFnOiBcInA6dHhCb2R5XCIsXG4gICAgICBzaG91bGRDb250YWluOiBbXCJhOnBcIl0sXG4gICAgICB2YWx1ZTogXCI8YTpwPjwvYTpwPlwiXG4gICAgfSwge1xuICAgICAgdGFnOiBcImE6dHhCb2R5XCIsXG4gICAgICBzaG91bGRDb250YWluOiBbXCJhOnBcIl0sXG4gICAgICB2YWx1ZTogXCI8YTpwPjwvYTpwPlwiXG4gICAgfV1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBkb2N4OiBEb2NYRmlsZVR5cGVDb25maWcsXG4gIHBwdHg6IFBwdFhGaWxlVHlwZUNvbmZpZ1xufTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/file-type-config.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/filetypes.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/filetypes.js ***!
  \********************************************************************************************/
/***/ ((module) => {

eval("\n\nvar docxContentType = \"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml\";\nvar docxmContentType = \"application/vnd.ms-word.document.macroEnabled.main+xml\";\nvar dotxContentType = \"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml\";\nvar dotmContentType = \"application/vnd.ms-word.template.macroEnabledTemplate.main+xml\";\nvar headerContentType = \"application/vnd.openxmlformats-officedocument.wordprocessingml.header+xml\";\nvar footnotesContentType = \"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml\";\nvar commentsContentType = \"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml\";\nvar footerContentType = \"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml\";\nvar pptxContentType = \"application/vnd.openxmlformats-officedocument.presentationml.slide+xml\";\nvar pptxSlideMaster = \"application/vnd.openxmlformats-officedocument.presentationml.slideMaster+xml\";\nvar pptxSlideLayout = \"application/vnd.openxmlformats-officedocument.presentationml.slideLayout+xml\";\nvar pptxPresentationContentType = \"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml\";\nvar xlsxContentType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\";\nvar xlsmContentType = \"application/vnd.ms-excel.sheet.macroEnabled.main+xml\";\nvar xlsxWorksheetContentType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\";\n/*\n * This is used for the main part of the document, ie usually that would be the\n * type of word/document.xml\n */\nvar main = [docxContentType, docxmContentType, dotxContentType, dotmContentType];\nvar filetypes = {\n  main: main,\n  docx: [headerContentType].concat(main, [footerContentType, footnotesContentType, commentsContentType]),\n  pptx: [pptxContentType, pptxSlideMaster, pptxSlideLayout, pptxPresentationContentType],\n  xlsx: [xlsxContentType, xlsmContentType, xlsxWorksheetContentType]\n};\nmodule.exports = filetypes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZG9jeHRlbXBsYXRlckAzLjYwLjIvbm9kZV9tb2R1bGVzL2RvY3h0ZW1wbGF0ZXIvanMvZmlsZXR5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2JyYW5kb25icmV3ZXIvRG9jdW1lbnRzL0xpbmd1b3NpdHkvTGluZ3Vvc2l0eS9ub2RlX21vZHVsZXMvLnBucG0vZG9jeHRlbXBsYXRlckAzLjYwLjIvbm9kZV9tb2R1bGVzL2RvY3h0ZW1wbGF0ZXIvanMvZmlsZXR5cGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgZG9jeENvbnRlbnRUeXBlID0gXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5kb2N1bWVudC5tYWluK3htbFwiO1xudmFyIGRvY3htQ29udGVudFR5cGUgPSBcImFwcGxpY2F0aW9uL3ZuZC5tcy13b3JkLmRvY3VtZW50Lm1hY3JvRW5hYmxlZC5tYWluK3htbFwiO1xudmFyIGRvdHhDb250ZW50VHlwZSA9IFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwudGVtcGxhdGUubWFpbit4bWxcIjtcbnZhciBkb3RtQ29udGVudFR5cGUgPSBcImFwcGxpY2F0aW9uL3ZuZC5tcy13b3JkLnRlbXBsYXRlLm1hY3JvRW5hYmxlZFRlbXBsYXRlLm1haW4reG1sXCI7XG52YXIgaGVhZGVyQ29udGVudFR5cGUgPSBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLmhlYWRlcit4bWxcIjtcbnZhciBmb290bm90ZXNDb250ZW50VHlwZSA9IFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuZm9vdG5vdGVzK3htbFwiO1xudmFyIGNvbW1lbnRzQ29udGVudFR5cGUgPSBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLmNvbW1lbnRzK3htbFwiO1xudmFyIGZvb3RlckNvbnRlbnRUeXBlID0gXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5mb290ZXIreG1sXCI7XG52YXIgcHB0eENvbnRlbnRUeXBlID0gXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwuc2xpZGUreG1sXCI7XG52YXIgcHB0eFNsaWRlTWFzdGVyID0gXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwuc2xpZGVNYXN0ZXIreG1sXCI7XG52YXIgcHB0eFNsaWRlTGF5b3V0ID0gXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwuc2xpZGVMYXlvdXQreG1sXCI7XG52YXIgcHB0eFByZXNlbnRhdGlvbkNvbnRlbnRUeXBlID0gXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwucHJlc2VudGF0aW9uLm1haW4reG1sXCI7XG52YXIgeGxzeENvbnRlbnRUeXBlID0gXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5zaGVldC5tYWluK3htbFwiO1xudmFyIHhsc21Db250ZW50VHlwZSA9IFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLnNoZWV0Lm1hY3JvRW5hYmxlZC5tYWluK3htbFwiO1xudmFyIHhsc3hXb3Jrc2hlZXRDb250ZW50VHlwZSA9IFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwud29ya3NoZWV0K3htbFwiO1xuLypcbiAqIFRoaXMgaXMgdXNlZCBmb3IgdGhlIG1haW4gcGFydCBvZiB0aGUgZG9jdW1lbnQsIGllIHVzdWFsbHkgdGhhdCB3b3VsZCBiZSB0aGVcbiAqIHR5cGUgb2Ygd29yZC9kb2N1bWVudC54bWxcbiAqL1xudmFyIG1haW4gPSBbZG9jeENvbnRlbnRUeXBlLCBkb2N4bUNvbnRlbnRUeXBlLCBkb3R4Q29udGVudFR5cGUsIGRvdG1Db250ZW50VHlwZV07XG52YXIgZmlsZXR5cGVzID0ge1xuICBtYWluOiBtYWluLFxuICBkb2N4OiBbaGVhZGVyQ29udGVudFR5cGVdLmNvbmNhdChtYWluLCBbZm9vdGVyQ29udGVudFR5cGUsIGZvb3Rub3Rlc0NvbnRlbnRUeXBlLCBjb21tZW50c0NvbnRlbnRUeXBlXSksXG4gIHBwdHg6IFtwcHR4Q29udGVudFR5cGUsIHBwdHhTbGlkZU1hc3RlciwgcHB0eFNsaWRlTGF5b3V0LCBwcHR4UHJlc2VudGF0aW9uQ29udGVudFR5cGVdLFxuICB4bHN4OiBbeGxzeENvbnRlbnRUeXBlLCB4bHNtQ29udGVudFR5cGUsIHhsc3hXb3Jrc2hlZXRDb250ZW50VHlwZV1cbn07XG5tb2R1bGUuZXhwb3J0cyA9IGZpbGV0eXBlczsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/filetypes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/get-resolved-id.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/get-resolved-id.js ***!
  \**************************************************************************************************/
/***/ ((module) => {

eval("\n\nfunction getResolvedId(part, options) {\n  if (part.lIndex == null) {\n    return null;\n  }\n  var path = options.scopeManager.scopePathItem;\n  if (part.parentPart) {\n    path = path.slice(0, path.length - 1);\n  }\n  var res = options.filePath + \"@\" + part.lIndex.toString() + \"-\" + path.join(\"-\");\n  return res;\n}\nmodule.exports = getResolvedId;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZG9jeHRlbXBsYXRlckAzLjYwLjIvbm9kZV9tb2R1bGVzL2RvY3h0ZW1wbGF0ZXIvanMvZ2V0LXJlc29sdmVkLWlkLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2JyYW5kb25icmV3ZXIvRG9jdW1lbnRzL0xpbmd1b3NpdHkvTGluZ3Vvc2l0eS9ub2RlX21vZHVsZXMvLnBucG0vZG9jeHRlbXBsYXRlckAzLjYwLjIvbm9kZV9tb2R1bGVzL2RvY3h0ZW1wbGF0ZXIvanMvZ2V0LXJlc29sdmVkLWlkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBnZXRSZXNvbHZlZElkKHBhcnQsIG9wdGlvbnMpIHtcbiAgaWYgKHBhcnQubEluZGV4ID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB2YXIgcGF0aCA9IG9wdGlvbnMuc2NvcGVNYW5hZ2VyLnNjb3BlUGF0aEl0ZW07XG4gIGlmIChwYXJ0LnBhcmVudFBhcnQpIHtcbiAgICBwYXRoID0gcGF0aC5zbGljZSgwLCBwYXRoLmxlbmd0aCAtIDEpO1xuICB9XG4gIHZhciByZXMgPSBvcHRpb25zLmZpbGVQYXRoICsgXCJAXCIgKyBwYXJ0LmxJbmRleC50b1N0cmluZygpICsgXCItXCIgKyBwYXRoLmpvaW4oXCItXCIpO1xuICByZXR1cm4gcmVzO1xufVxubW9kdWxlLmV4cG9ydHMgPSBnZXRSZXNvbHZlZElkOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/get-resolved-id.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/join-uncorrupt.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/join-uncorrupt.js ***!
  \*************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar _require = __webpack_require__(/*! ./doc-utils.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/doc-utils.js\"),\n  startsWith = _require.startsWith,\n  endsWith = _require.endsWith,\n  isStarting = _require.isStarting,\n  isEnding = _require.isEnding,\n  isWhiteSpace = _require.isWhiteSpace;\nvar filetypes = __webpack_require__(/*! ./filetypes.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/filetypes.js\");\nfunction addEmptyParagraphAfterTable(parts) {\n  var lastNonEmpty = \"\";\n  for (var i = 0, len = parts.length; i < len; i++) {\n    var p = parts[i];\n    if (isWhiteSpace(p) || startsWith(p, \"<w:bookmarkEnd\")) {\n      continue;\n    }\n    if (endsWith(lastNonEmpty, \"</w:tbl>\")) {\n      if (!startsWith(p, \"<w:p\") && !startsWith(p, \"<w:tbl\") && !startsWith(p, \"<w:sectPr\")) {\n        p = \"<w:p/>\".concat(p);\n      }\n    }\n    lastNonEmpty = p;\n    parts[i] = p;\n  }\n  return parts;\n}\n\n// eslint-disable-next-line complexity\nfunction joinUncorrupt(parts, options) {\n  var contains = options.fileTypeConfig.tagShouldContain || [];\n  /*\n   * Before doing this \"uncorruption\" method here, this was done with the\n   * `part.emptyValue` trick, however, there were some corruptions that were\n   * not handled, for example with a template like this :\n   *\n   * ------------------------------------------------\n   * | {-w:p falsy}My para{/falsy}   |              |\n   * | {-w:p falsy}My para{/falsy}   |              |\n   * ------------------------------------------------\n   */\n  var collecting = \"\";\n  var currentlyCollecting = -1;\n  if (filetypes.docx.indexOf(options.contentType) !== -1) {\n    parts = addEmptyParagraphAfterTable(parts);\n  }\n  var startIndex = -1;\n  for (var j = 0, len2 = contains.length; j < len2; j++) {\n    var _contains$j = contains[j],\n      tag = _contains$j.tag,\n      shouldContain = _contains$j.shouldContain,\n      value = _contains$j.value,\n      drop = _contains$j.drop,\n      dropParent = _contains$j.dropParent;\n    for (var i = 0, len = parts.length; i < len; i++) {\n      var part = parts[i];\n      if (currentlyCollecting === j) {\n        if (isEnding(part, tag)) {\n          currentlyCollecting = -1;\n          if (dropParent) {\n            var start = -1;\n            for (var k = startIndex; k > 0; k--) {\n              if (isStarting(parts[k], dropParent)) {\n                start = k;\n                break;\n              }\n            }\n            for (var _k = start; _k <= parts.length; _k++) {\n              if (isEnding(parts[_k], dropParent)) {\n                parts[_k] = \"\";\n                break;\n              }\n              parts[_k] = \"\";\n            }\n          } else {\n            for (var _k2 = startIndex; _k2 <= i; _k2++) {\n              parts[_k2] = \"\";\n            }\n            if (!drop) {\n              parts[i] = collecting + value + part;\n            }\n          }\n        }\n        collecting += part;\n        for (var _k3 = 0, len3 = shouldContain.length; _k3 < len3; _k3++) {\n          var sc = shouldContain[_k3];\n          if (isStarting(part, sc)) {\n            currentlyCollecting = -1;\n            break;\n          }\n        }\n      }\n      if (currentlyCollecting === -1 && isStarting(part, tag) &&\n      /*\n       * To verify that the part doesn't have multiple tags,\n       * such as <w:tc><w:p>\n       */\n      part.substr(1).indexOf(\"<\") === -1) {\n        // self-closing tag such as <w:t/>\n        if (part[part.length - 2] === \"/\") {\n          parts[i] = \"\";\n        } else {\n          startIndex = i;\n          currentlyCollecting = j;\n          collecting = part;\n        }\n      }\n    }\n  }\n  return parts;\n}\nmodule.exports = joinUncorrupt;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZG9jeHRlbXBsYXRlckAzLjYwLjIvbm9kZV9tb2R1bGVzL2RvY3h0ZW1wbGF0ZXIvanMvam9pbi11bmNvcnJ1cHQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZUFBZSxtQkFBTyxDQUFDLGtIQUFnQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG1CQUFPLENBQUMsa0hBQWdCO0FBQ3hDO0FBQ0E7QUFDQSxzQ0FBc0MsU0FBUztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsV0FBVyxRQUFRLFVBQVU7QUFDckMsUUFBUSxXQUFXLFFBQVEsVUFBVTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLFVBQVU7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLFNBQVM7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLE9BQU87QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxvQkFBb0I7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaLHVDQUF1QyxVQUFVO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsWUFBWTtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2JyYW5kb25icmV3ZXIvRG9jdW1lbnRzL0xpbmd1b3NpdHkvTGluZ3Vvc2l0eS9ub2RlX21vZHVsZXMvLnBucG0vZG9jeHRlbXBsYXRlckAzLjYwLjIvbm9kZV9tb2R1bGVzL2RvY3h0ZW1wbGF0ZXIvanMvam9pbi11bmNvcnJ1cHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoXCIuL2RvYy11dGlscy5qc1wiKSxcbiAgc3RhcnRzV2l0aCA9IF9yZXF1aXJlLnN0YXJ0c1dpdGgsXG4gIGVuZHNXaXRoID0gX3JlcXVpcmUuZW5kc1dpdGgsXG4gIGlzU3RhcnRpbmcgPSBfcmVxdWlyZS5pc1N0YXJ0aW5nLFxuICBpc0VuZGluZyA9IF9yZXF1aXJlLmlzRW5kaW5nLFxuICBpc1doaXRlU3BhY2UgPSBfcmVxdWlyZS5pc1doaXRlU3BhY2U7XG52YXIgZmlsZXR5cGVzID0gcmVxdWlyZShcIi4vZmlsZXR5cGVzLmpzXCIpO1xuZnVuY3Rpb24gYWRkRW1wdHlQYXJhZ3JhcGhBZnRlclRhYmxlKHBhcnRzKSB7XG4gIHZhciBsYXN0Tm9uRW1wdHkgPSBcIlwiO1xuICBmb3IgKHZhciBpID0gMCwgbGVuID0gcGFydHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICB2YXIgcCA9IHBhcnRzW2ldO1xuICAgIGlmIChpc1doaXRlU3BhY2UocCkgfHwgc3RhcnRzV2l0aChwLCBcIjx3OmJvb2ttYXJrRW5kXCIpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGVuZHNXaXRoKGxhc3ROb25FbXB0eSwgXCI8L3c6dGJsPlwiKSkge1xuICAgICAgaWYgKCFzdGFydHNXaXRoKHAsIFwiPHc6cFwiKSAmJiAhc3RhcnRzV2l0aChwLCBcIjx3OnRibFwiKSAmJiAhc3RhcnRzV2l0aChwLCBcIjx3OnNlY3RQclwiKSkge1xuICAgICAgICBwID0gXCI8dzpwLz5cIi5jb25jYXQocCk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3ROb25FbXB0eSA9IHA7XG4gICAgcGFydHNbaV0gPSBwO1xuICB9XG4gIHJldHVybiBwYXJ0cztcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbmZ1bmN0aW9uIGpvaW5VbmNvcnJ1cHQocGFydHMsIG9wdGlvbnMpIHtcbiAgdmFyIGNvbnRhaW5zID0gb3B0aW9ucy5maWxlVHlwZUNvbmZpZy50YWdTaG91bGRDb250YWluIHx8IFtdO1xuICAvKlxuICAgKiBCZWZvcmUgZG9pbmcgdGhpcyBcInVuY29ycnVwdGlvblwiIG1ldGhvZCBoZXJlLCB0aGlzIHdhcyBkb25lIHdpdGggdGhlXG4gICAqIGBwYXJ0LmVtcHR5VmFsdWVgIHRyaWNrLCBob3dldmVyLCB0aGVyZSB3ZXJlIHNvbWUgY29ycnVwdGlvbnMgdGhhdCB3ZXJlXG4gICAqIG5vdCBoYW5kbGVkLCBmb3IgZXhhbXBsZSB3aXRoIGEgdGVtcGxhdGUgbGlrZSB0aGlzIDpcbiAgICpcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIHwgey13OnAgZmFsc3l9TXkgcGFyYXsvZmFsc3l9ICAgfCAgICAgICAgICAgICAgfFxuICAgKiB8IHstdzpwIGZhbHN5fU15IHBhcmF7L2ZhbHN5fSAgIHwgICAgICAgICAgICAgIHxcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuICB2YXIgY29sbGVjdGluZyA9IFwiXCI7XG4gIHZhciBjdXJyZW50bHlDb2xsZWN0aW5nID0gLTE7XG4gIGlmIChmaWxldHlwZXMuZG9jeC5pbmRleE9mKG9wdGlvbnMuY29udGVudFR5cGUpICE9PSAtMSkge1xuICAgIHBhcnRzID0gYWRkRW1wdHlQYXJhZ3JhcGhBZnRlclRhYmxlKHBhcnRzKTtcbiAgfVxuICB2YXIgc3RhcnRJbmRleCA9IC0xO1xuICBmb3IgKHZhciBqID0gMCwgbGVuMiA9IGNvbnRhaW5zLmxlbmd0aDsgaiA8IGxlbjI7IGorKykge1xuICAgIHZhciBfY29udGFpbnMkaiA9IGNvbnRhaW5zW2pdLFxuICAgICAgdGFnID0gX2NvbnRhaW5zJGoudGFnLFxuICAgICAgc2hvdWxkQ29udGFpbiA9IF9jb250YWlucyRqLnNob3VsZENvbnRhaW4sXG4gICAgICB2YWx1ZSA9IF9jb250YWlucyRqLnZhbHVlLFxuICAgICAgZHJvcCA9IF9jb250YWlucyRqLmRyb3AsXG4gICAgICBkcm9wUGFyZW50ID0gX2NvbnRhaW5zJGouZHJvcFBhcmVudDtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gcGFydHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZhciBwYXJ0ID0gcGFydHNbaV07XG4gICAgICBpZiAoY3VycmVudGx5Q29sbGVjdGluZyA9PT0gaikge1xuICAgICAgICBpZiAoaXNFbmRpbmcocGFydCwgdGFnKSkge1xuICAgICAgICAgIGN1cnJlbnRseUNvbGxlY3RpbmcgPSAtMTtcbiAgICAgICAgICBpZiAoZHJvcFBhcmVudCkge1xuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gLTE7XG4gICAgICAgICAgICBmb3IgKHZhciBrID0gc3RhcnRJbmRleDsgayA+IDA7IGstLSkge1xuICAgICAgICAgICAgICBpZiAoaXNTdGFydGluZyhwYXJ0c1trXSwgZHJvcFBhcmVudCkpIHtcbiAgICAgICAgICAgICAgICBzdGFydCA9IGs7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIF9rID0gc3RhcnQ7IF9rIDw9IHBhcnRzLmxlbmd0aDsgX2srKykge1xuICAgICAgICAgICAgICBpZiAoaXNFbmRpbmcocGFydHNbX2tdLCBkcm9wUGFyZW50KSkge1xuICAgICAgICAgICAgICAgIHBhcnRzW19rXSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcGFydHNbX2tdID0gXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yICh2YXIgX2syID0gc3RhcnRJbmRleDsgX2syIDw9IGk7IF9rMisrKSB7XG4gICAgICAgICAgICAgIHBhcnRzW19rMl0gPSBcIlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFkcm9wKSB7XG4gICAgICAgICAgICAgIHBhcnRzW2ldID0gY29sbGVjdGluZyArIHZhbHVlICsgcGFydDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29sbGVjdGluZyArPSBwYXJ0O1xuICAgICAgICBmb3IgKHZhciBfazMgPSAwLCBsZW4zID0gc2hvdWxkQ29udGFpbi5sZW5ndGg7IF9rMyA8IGxlbjM7IF9rMysrKSB7XG4gICAgICAgICAgdmFyIHNjID0gc2hvdWxkQ29udGFpbltfazNdO1xuICAgICAgICAgIGlmIChpc1N0YXJ0aW5nKHBhcnQsIHNjKSkge1xuICAgICAgICAgICAgY3VycmVudGx5Q29sbGVjdGluZyA9IC0xO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudGx5Q29sbGVjdGluZyA9PT0gLTEgJiYgaXNTdGFydGluZyhwYXJ0LCB0YWcpICYmXG4gICAgICAvKlxuICAgICAgICogVG8gdmVyaWZ5IHRoYXQgdGhlIHBhcnQgZG9lc24ndCBoYXZlIG11bHRpcGxlIHRhZ3MsXG4gICAgICAgKiBzdWNoIGFzIDx3OnRjPjx3OnA+XG4gICAgICAgKi9cbiAgICAgIHBhcnQuc3Vic3RyKDEpLmluZGV4T2YoXCI8XCIpID09PSAtMSkge1xuICAgICAgICAvLyBzZWxmLWNsb3NpbmcgdGFnIHN1Y2ggYXMgPHc6dC8+XG4gICAgICAgIGlmIChwYXJ0W3BhcnQubGVuZ3RoIC0gMl0gPT09IFwiL1wiKSB7XG4gICAgICAgICAgcGFydHNbaV0gPSBcIlwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0YXJ0SW5kZXggPSBpO1xuICAgICAgICAgIGN1cnJlbnRseUNvbGxlY3RpbmcgPSBqO1xuICAgICAgICAgIGNvbGxlY3RpbmcgPSBwYXJ0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBwYXJ0cztcbn1cbm1vZHVsZS5leHBvcnRzID0gam9pblVuY29ycnVwdDsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/join-uncorrupt.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/lexer.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/lexer.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar _require = __webpack_require__(/*! ./errors.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/errors.js\"),\n  getUnclosedTagException = _require.getUnclosedTagException,\n  getUnopenedTagException = _require.getUnopenedTagException,\n  getDuplicateOpenTagException = _require.getDuplicateOpenTagException,\n  getDuplicateCloseTagException = _require.getDuplicateCloseTagException,\n  throwMalformedXml = _require.throwMalformedXml,\n  throwXmlInvalid = _require.throwXmlInvalid,\n  XTTemplateError = _require.XTTemplateError;\nvar _require2 = __webpack_require__(/*! ./doc-utils.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/doc-utils.js\"),\n  isTextStart = _require2.isTextStart,\n  isTextEnd = _require2.isTextEnd,\n  wordToUtf8 = _require2.wordToUtf8;\nvar DELIMITER_NONE = 0,\n  DELIMITER_EQUAL = 1,\n  DELIMITER_START = 2,\n  DELIMITER_END = 3;\nfunction inRange(range, match) {\n  return range[0] <= match.offset && match.offset < range[1];\n}\nfunction updateInTextTag(part, inTextTag) {\n  if (isTextStart(part)) {\n    if (inTextTag) {\n      throwMalformedXml();\n    }\n    return true;\n  }\n  if (isTextEnd(part)) {\n    if (!inTextTag) {\n      throwMalformedXml();\n    }\n    return false;\n  }\n  return inTextTag;\n}\nfunction getTag(tag) {\n  var position = \"\";\n  var start = 1;\n  var end = tag.indexOf(\" \");\n  if (tag[tag.length - 2] === \"/\") {\n    position = \"selfclosing\";\n    if (end === -1) {\n      end = tag.length - 2;\n    }\n  } else if (tag[1] === \"/\") {\n    start = 2;\n    position = \"end\";\n    if (end === -1) {\n      end = tag.length - 1;\n    }\n  } else {\n    position = \"start\";\n    if (end === -1) {\n      end = tag.length - 1;\n    }\n  }\n  return {\n    tag: tag.slice(start, end),\n    position: position\n  };\n}\nfunction tagMatcher(content, textMatchArray, othersMatchArray) {\n  var cursor = 0;\n  var contentLength = content.length;\n  var allMatches = {};\n  for (var _i2 = 0; _i2 < textMatchArray.length; _i2++) {\n    var m = textMatchArray[_i2];\n    allMatches[m] = true;\n  }\n  for (var _i4 = 0; _i4 < othersMatchArray.length; _i4++) {\n    var _m = othersMatchArray[_i4];\n    allMatches[_m] = false;\n  }\n  var totalMatches = [];\n  while (cursor < contentLength) {\n    cursor = content.indexOf(\"<\", cursor);\n    if (cursor === -1) {\n      break;\n    }\n    var offset = cursor;\n    var nextOpening = content.indexOf(\"<\", cursor + 1);\n    cursor = content.indexOf(\">\", cursor);\n    if (cursor === -1 || nextOpening !== -1 && cursor > nextOpening) {\n      throwXmlInvalid(content, offset);\n    }\n    var tagText = content.slice(offset, cursor + 1);\n    var _getTag = getTag(tagText),\n      tag = _getTag.tag,\n      position = _getTag.position;\n    var text = allMatches[tag];\n    if (text == null) {\n      continue;\n    }\n    totalMatches.push({\n      type: \"tag\",\n      position: position,\n      text: text,\n      offset: offset,\n      value: tagText,\n      tag: tag\n    });\n  }\n  return totalMatches;\n}\nfunction getDelimiterErrors(delimiterMatches, fullText, syntaxOptions) {\n  var errors = [];\n  var inDelimiter = false;\n  var lastDelimiterMatch = {\n    offset: 0\n  };\n  var xtag;\n  var delimiterWithErrors = delimiterMatches.reduce(function (delimiterAcc, currDelimiterMatch) {\n    var position = currDelimiterMatch.position;\n    var delimiterOffset = currDelimiterMatch.offset;\n    var lastDelimiterOffset = lastDelimiterMatch.offset;\n    var lastDelimiterLength = lastDelimiterMatch.length;\n    xtag = fullText.substr(lastDelimiterOffset, delimiterOffset - lastDelimiterOffset);\n    if (inDelimiter && position === \"start\") {\n      if (lastDelimiterOffset + lastDelimiterLength === delimiterOffset) {\n        xtag = fullText.substr(lastDelimiterOffset, delimiterOffset - lastDelimiterOffset + lastDelimiterLength + 4);\n        if (!syntaxOptions.allowUnclosedTag) {\n          errors.push(getDuplicateOpenTagException({\n            xtag: xtag,\n            offset: lastDelimiterOffset\n          }));\n          lastDelimiterMatch = currDelimiterMatch;\n          delimiterAcc.push(_objectSpread(_objectSpread({}, currDelimiterMatch), {}, {\n            error: true\n          }));\n          return delimiterAcc;\n        }\n      }\n      if (!syntaxOptions.allowUnclosedTag) {\n        errors.push(getUnclosedTagException({\n          xtag: wordToUtf8(xtag),\n          offset: lastDelimiterOffset\n        }));\n        lastDelimiterMatch = currDelimiterMatch;\n        delimiterAcc.push(_objectSpread(_objectSpread({}, currDelimiterMatch), {}, {\n          error: true\n        }));\n        return delimiterAcc;\n      }\n      delimiterAcc.pop();\n    }\n    if (!inDelimiter && position === \"end\") {\n      if (syntaxOptions.allowUnopenedTag) {\n        return delimiterAcc;\n      }\n      if (lastDelimiterOffset + lastDelimiterLength === delimiterOffset) {\n        xtag = fullText.substr(lastDelimiterOffset - 4, delimiterOffset - lastDelimiterOffset + lastDelimiterLength + 4);\n        errors.push(getDuplicateCloseTagException({\n          xtag: xtag,\n          offset: lastDelimiterOffset\n        }));\n        lastDelimiterMatch = currDelimiterMatch;\n        delimiterAcc.push(_objectSpread(_objectSpread({}, currDelimiterMatch), {}, {\n          error: true\n        }));\n        return delimiterAcc;\n      }\n      errors.push(getUnopenedTagException({\n        xtag: xtag,\n        offset: delimiterOffset\n      }));\n      lastDelimiterMatch = currDelimiterMatch;\n      delimiterAcc.push(_objectSpread(_objectSpread({}, currDelimiterMatch), {}, {\n        error: true\n      }));\n      return delimiterAcc;\n    }\n    inDelimiter = position === \"start\";\n    lastDelimiterMatch = currDelimiterMatch;\n    delimiterAcc.push(currDelimiterMatch);\n    return delimiterAcc;\n  }, []);\n  if (inDelimiter) {\n    var lastDelimiterOffset = lastDelimiterMatch.offset;\n    xtag = fullText.substr(lastDelimiterOffset, fullText.length - lastDelimiterOffset);\n    if (!syntaxOptions.allowUnclosedTag) {\n      errors.push(getUnclosedTagException({\n        xtag: wordToUtf8(xtag),\n        offset: lastDelimiterOffset\n      }));\n    } else {\n      delimiterWithErrors.pop();\n    }\n  }\n  return {\n    delimiterWithErrors: delimiterWithErrors,\n    errors: errors\n  };\n}\nfunction compareOffsets(startOffset, endOffset) {\n  if (startOffset === -1 && endOffset === -1) {\n    return DELIMITER_NONE;\n  }\n  if (startOffset === endOffset) {\n    return DELIMITER_EQUAL;\n  }\n  if (startOffset === -1 || endOffset === -1) {\n    return endOffset < startOffset ? DELIMITER_START : DELIMITER_END;\n  }\n  return startOffset < endOffset ? DELIMITER_START : DELIMITER_END;\n}\nfunction splitDelimiters(inside) {\n  var newDelimiters = inside.split(\" \");\n  if (newDelimiters.length !== 2) {\n    var err = new XTTemplateError(\"New Delimiters cannot be parsed\");\n    err.properties = {\n      id: \"change_delimiters_invalid\",\n      explanation: \"Cannot parser delimiters\"\n    };\n    throw err;\n  }\n  var _newDelimiters = _slicedToArray(newDelimiters, 2),\n    start = _newDelimiters[0],\n    end = _newDelimiters[1];\n  if (start.length === 0 || end.length === 0) {\n    var _err = new XTTemplateError(\"New Delimiters cannot be parsed\");\n    _err.properties = {\n      id: \"change_delimiters_invalid\",\n      explanation: \"Cannot parser delimiters\"\n    };\n    throw _err;\n  }\n  return [start, end];\n}\nfunction getAllDelimiterIndexes(fullText, delimiters, syntaxOptions) {\n  var indexes = [];\n  var start = delimiters.start,\n    end = delimiters.end;\n  var offset = -1;\n  var insideTag = false;\n  if (start == null && end == null) {\n    // Special case of delimiter set to null/null, no templating is done\n    return [];\n  }\n  while (true) {\n    var startOffset = fullText.indexOf(start, offset + 1);\n    var endOffset = fullText.indexOf(end, offset + 1);\n    var position = null;\n    var len = void 0;\n    var compareResult = compareOffsets(startOffset, endOffset);\n    if (compareResult === DELIMITER_EQUAL) {\n      compareResult = insideTag ? DELIMITER_END : DELIMITER_START;\n    }\n    switch (compareResult) {\n      case DELIMITER_NONE:\n        return indexes;\n      case DELIMITER_END:\n        insideTag = false;\n        offset = endOffset;\n        position = \"end\";\n        len = end.length;\n        break;\n      case DELIMITER_START:\n        insideTag = true;\n        offset = startOffset;\n        position = \"start\";\n        len = start.length;\n        break;\n    }\n    /*\n     * If tag starts with =, such as {=[ ]=}\n     * then the delimiters will change right after that tag.\n     *\n     * For example, with the following template :\n     *\n     * Hello {foo}, {=[ ]=}what's up with [name] ?\n     *\n     * The \"foo\" tag is a normal tag, the \"=[ ]=\" is a tag to change the\n     * delimiters to \"[\" and \"]\", and the last \"name\" is a tag with the new\n     * delimiters\n     */\n    if (syntaxOptions.changeDelimiterPrefix && compareResult === DELIMITER_START && fullText[offset + start.length] === syntaxOptions.changeDelimiterPrefix) {\n      indexes.push({\n        offset: startOffset,\n        position: \"start\",\n        length: start.length,\n        changedelimiter: true\n      });\n      var nextEqual = fullText.indexOf(syntaxOptions.changeDelimiterPrefix, offset + start.length + 1);\n      var nextEndOffset = fullText.indexOf(end, nextEqual + 1);\n      indexes.push({\n        offset: nextEndOffset,\n        position: \"end\",\n        length: end.length,\n        changedelimiter: true\n      });\n      var _insideTag = fullText.substr(offset + start.length + 1, nextEqual - offset - start.length - 1);\n      var _splitDelimiters = splitDelimiters(_insideTag);\n      var _splitDelimiters2 = _slicedToArray(_splitDelimiters, 2);\n      start = _splitDelimiters2[0];\n      end = _splitDelimiters2[1];\n      offset = nextEndOffset;\n      continue;\n    }\n    indexes.push({\n      offset: offset,\n      position: position,\n      length: len\n    });\n  }\n}\nfunction parseDelimiters(innerContentParts, delimiters, syntaxOptions) {\n  var full = innerContentParts.map(function (p) {\n    return p.value;\n  }).join(\"\");\n  var delimiterMatches = getAllDelimiterIndexes(full, delimiters, syntaxOptions);\n  var offset = 0;\n  var ranges = innerContentParts.map(function (part) {\n    offset += part.value.length;\n    return {\n      offset: offset - part.value.length,\n      lIndex: part.lIndex\n    };\n  });\n  var _getDelimiterErrors = getDelimiterErrors(delimiterMatches, full, syntaxOptions),\n    delimiterWithErrors = _getDelimiterErrors.delimiterWithErrors,\n    errors = _getDelimiterErrors.errors;\n  var cutNext = 0;\n  var delimiterIndex = 0;\n  var parsed = ranges.map(function (p, i) {\n    var offset = p.offset;\n    var range = [offset, offset + innerContentParts[i].value.length];\n    var partContent = innerContentParts[i].value;\n    var delimitersInOffset = [];\n    while (delimiterIndex < delimiterWithErrors.length && inRange(range, delimiterWithErrors[delimiterIndex])) {\n      delimitersInOffset.push(delimiterWithErrors[delimiterIndex]);\n      delimiterIndex++;\n    }\n    var parts = [];\n    var cursor = 0;\n    if (cutNext > 0) {\n      cursor = cutNext;\n      cutNext = 0;\n    }\n    for (var _i6 = 0; _i6 < delimitersInOffset.length; _i6++) {\n      var delimiterInOffset = delimitersInOffset[_i6];\n      var _value = partContent.substr(cursor, delimiterInOffset.offset - offset - cursor);\n      if (delimiterInOffset.changedelimiter) {\n        if (delimiterInOffset.position === \"start\") {\n          if (_value.length > 0) {\n            parts.push({\n              type: \"content\",\n              value: _value\n            });\n          }\n        } else {\n          cursor = delimiterInOffset.offset - offset + delimiterInOffset.length;\n        }\n        continue;\n      }\n      if (_value.length > 0) {\n        parts.push({\n          type: \"content\",\n          value: _value\n        });\n        cursor += _value.length;\n      }\n      var delimiterPart = {\n        type: \"delimiter\",\n        position: delimiterInOffset.position,\n        offset: cursor + offset\n      };\n      parts.push(delimiterPart);\n      cursor = delimiterInOffset.offset - offset + delimiterInOffset.length;\n    }\n    cutNext = cursor - partContent.length;\n    var value = partContent.substr(cursor);\n    if (value.length > 0) {\n      parts.push({\n        type: \"content\",\n        value: value\n      });\n    }\n    return parts;\n  }, this);\n  return {\n    parsed: parsed,\n    errors: errors\n  };\n}\nfunction isInsideContent(part) {\n  // Stryker disable all : because the part.position === \"insidetag\" would be enough but we want to make the API future proof\n  return part.type === \"content\" && part.position === \"insidetag\";\n  // Stryker restore all\n}\nfunction getContentParts(xmlparsed) {\n  return xmlparsed.filter(isInsideContent);\n}\nfunction decodeContentParts(xmlparsed, fileType) {\n  var inTextTag = false;\n  for (var _i8 = 0; _i8 < xmlparsed.length; _i8++) {\n    var part = xmlparsed[_i8];\n    inTextTag = updateInTextTag(part, inTextTag);\n    if (part.type === \"content\") {\n      part.position = inTextTag ? \"insidetag\" : \"outsidetag\";\n    }\n    if (fileType !== \"text\" && isInsideContent(part)) {\n      part.value = part.value.replace(/>/g, \"&gt;\");\n    }\n  }\n}\nmodule.exports = {\n  parseDelimiters: parseDelimiters,\n  parse: function parse(xmllexed, delimiters, syntax, fileType) {\n    decodeContentParts(xmllexed, fileType);\n    var _parseDelimiters = parseDelimiters(getContentParts(xmllexed), delimiters, syntax),\n      delimiterParsed = _parseDelimiters.parsed,\n      errors = _parseDelimiters.errors;\n    var lexed = [];\n    var index = 0;\n    var lIndex = 0;\n    for (var _i10 = 0; _i10 < xmllexed.length; _i10++) {\n      var part = xmllexed[_i10];\n      if (isInsideContent(part)) {\n        for (var _i12 = 0, _delimiterParsed$inde2 = delimiterParsed[index]; _i12 < _delimiterParsed$inde2.length; _i12++) {\n          var p = _delimiterParsed$inde2[_i12];\n          if (p.type === \"content\") {\n            p.position = \"insidetag\";\n          }\n          p.lIndex = lIndex++;\n        }\n        Array.prototype.push.apply(lexed, delimiterParsed[index]);\n        index++;\n      } else {\n        part.lIndex = lIndex++;\n        lexed.push(part);\n      }\n    }\n    return {\n      errors: errors,\n      lexed: lexed\n    };\n  },\n  xmlparse: function xmlparse(content, xmltags) {\n    var matches = tagMatcher(content, xmltags.text, xmltags.other);\n    var cursor = 0;\n    var parsed = matches.reduce(function (parsed, match) {\n      if (content.length > cursor && match.offset - cursor > 0) {\n        parsed.push({\n          type: \"content\",\n          value: content.substr(cursor, match.offset - cursor)\n        });\n      }\n      cursor = match.offset + match.value.length;\n      delete match.offset;\n      parsed.push(match);\n      return parsed;\n    }, []);\n    if (content.length > cursor) {\n      parsed.push({\n        type: \"content\",\n        value: content.substr(cursor)\n      });\n    }\n    return parsed;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/lexer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/merge-sort.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/merge-sort.js ***!
  \*********************************************************************************************/
/***/ ((module) => {

eval("\n\nfunction getMinFromArrays(arrays, state) {\n  var minIndex = -1;\n  for (var i = 0, l = arrays.length; i < l; i++) {\n    if (state[i] >= arrays[i].length) {\n      continue;\n    }\n    if (minIndex === -1 || arrays[i][state[i]].offset < arrays[minIndex][state[minIndex]].offset) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n}\nmodule.exports = function (arrays) {\n  var totalLength = arrays.reduce(function (sum, array) {\n    return sum + array.length;\n  }, 0);\n  arrays = arrays.filter(function (array) {\n    return array.length > 0;\n  });\n  var resultArray = new Array(totalLength);\n  var state = arrays.map(function () {\n    return 0;\n  });\n  for (var i = 0; i < totalLength; i++) {\n    var arrayIndex = getMinFromArrays(arrays, state);\n    resultArray[i] = arrays[arrayIndex][state[arrayIndex]];\n    state[arrayIndex]++;\n  }\n  return resultArray;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZG9jeHRlbXBsYXRlckAzLjYwLjIvbm9kZV9tb2R1bGVzL2RvY3h0ZW1wbGF0ZXIvanMvbWVyZ2Utc29ydC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0EscUNBQXFDLE9BQU87QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvYnJhbmRvbmJyZXdlci9Eb2N1bWVudHMvTGluZ3Vvc2l0eS9MaW5ndW9zaXR5L25vZGVfbW9kdWxlcy8ucG5wbS9kb2N4dGVtcGxhdGVyQDMuNjAuMi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy9tZXJnZS1zb3J0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBnZXRNaW5Gcm9tQXJyYXlzKGFycmF5cywgc3RhdGUpIHtcbiAgdmFyIG1pbkluZGV4ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJyYXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChzdGF0ZVtpXSA+PSBhcnJheXNbaV0ubGVuZ3RoKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKG1pbkluZGV4ID09PSAtMSB8fCBhcnJheXNbaV1bc3RhdGVbaV1dLm9mZnNldCA8IGFycmF5c1ttaW5JbmRleF1bc3RhdGVbbWluSW5kZXhdXS5vZmZzZXQpIHtcbiAgICAgIG1pbkluZGV4ID0gaTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1pbkluZGV4O1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJyYXlzKSB7XG4gIHZhciB0b3RhbExlbmd0aCA9IGFycmF5cy5yZWR1Y2UoZnVuY3Rpb24gKHN1bSwgYXJyYXkpIHtcbiAgICByZXR1cm4gc3VtICsgYXJyYXkubGVuZ3RoO1xuICB9LCAwKTtcbiAgYXJyYXlzID0gYXJyYXlzLmZpbHRlcihmdW5jdGlvbiAoYXJyYXkpIHtcbiAgICByZXR1cm4gYXJyYXkubGVuZ3RoID4gMDtcbiAgfSk7XG4gIHZhciByZXN1bHRBcnJheSA9IG5ldyBBcnJheSh0b3RhbExlbmd0aCk7XG4gIHZhciBzdGF0ZSA9IGFycmF5cy5tYXAoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAwO1xuICB9KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b3RhbExlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGFycmF5SW5kZXggPSBnZXRNaW5Gcm9tQXJyYXlzKGFycmF5cywgc3RhdGUpO1xuICAgIHJlc3VsdEFycmF5W2ldID0gYXJyYXlzW2FycmF5SW5kZXhdW3N0YXRlW2FycmF5SW5kZXhdXTtcbiAgICBzdGF0ZVthcnJheUluZGV4XSsrO1xuICB9XG4gIHJldHVybiByZXN1bHRBcnJheTtcbn07Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/merge-sort.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/module-wrapper.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/module-wrapper.js ***!
  \*************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar _require = __webpack_require__(/*! ./errors.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/errors.js\"),\n  XTInternalError = _require.XTInternalError;\nfunction emptyFun() {}\nfunction identity(i) {\n  return i;\n}\nmodule.exports = function (module) {\n  var defaults = {\n    set: emptyFun,\n    matchers: function matchers() {\n      return [];\n    },\n    parse: emptyFun,\n    render: emptyFun,\n    getTraits: emptyFun,\n    getFileType: emptyFun,\n    nullGetter: emptyFun,\n    optionsTransformer: identity,\n    postrender: identity,\n    errorsTransformer: identity,\n    getRenderedMap: identity,\n    preparse: identity,\n    postparse: identity,\n    on: emptyFun,\n    resolve: emptyFun,\n    preResolve: emptyFun\n  };\n  if (Object.keys(defaults).every(function (key) {\n    return !module[key];\n  })) {\n    var err = new XTInternalError(\"This module cannot be wrapped, because it doesn't define any of the necessary functions\");\n    err.properties = {\n      id: \"module_cannot_be_wrapped\",\n      explanation: \"This module cannot be wrapped, because it doesn't define any of the necessary functions\"\n    };\n    throw err;\n  }\n  for (var key in defaults) {\n    module[key] || (module[key] = defaults[key]);\n  }\n  return module;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZG9jeHRlbXBsYXRlckAzLjYwLjIvbm9kZV9tb2R1bGVzL2RvY3h0ZW1wbGF0ZXIvanMvbW9kdWxlLXdyYXBwZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZUFBZSxtQkFBTyxDQUFDLDRHQUFhO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvYnJhbmRvbmJyZXdlci9Eb2N1bWVudHMvTGluZ3Vvc2l0eS9MaW5ndW9zaXR5L25vZGVfbW9kdWxlcy8ucG5wbS9kb2N4dGVtcGxhdGVyQDMuNjAuMi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy9tb2R1bGUtd3JhcHBlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZShcIi4vZXJyb3JzLmpzXCIpLFxuICBYVEludGVybmFsRXJyb3IgPSBfcmVxdWlyZS5YVEludGVybmFsRXJyb3I7XG5mdW5jdGlvbiBlbXB0eUZ1bigpIHt9XG5mdW5jdGlvbiBpZGVudGl0eShpKSB7XG4gIHJldHVybiBpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobW9kdWxlKSB7XG4gIHZhciBkZWZhdWx0cyA9IHtcbiAgICBzZXQ6IGVtcHR5RnVuLFxuICAgIG1hdGNoZXJzOiBmdW5jdGlvbiBtYXRjaGVycygpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9LFxuICAgIHBhcnNlOiBlbXB0eUZ1bixcbiAgICByZW5kZXI6IGVtcHR5RnVuLFxuICAgIGdldFRyYWl0czogZW1wdHlGdW4sXG4gICAgZ2V0RmlsZVR5cGU6IGVtcHR5RnVuLFxuICAgIG51bGxHZXR0ZXI6IGVtcHR5RnVuLFxuICAgIG9wdGlvbnNUcmFuc2Zvcm1lcjogaWRlbnRpdHksXG4gICAgcG9zdHJlbmRlcjogaWRlbnRpdHksXG4gICAgZXJyb3JzVHJhbnNmb3JtZXI6IGlkZW50aXR5LFxuICAgIGdldFJlbmRlcmVkTWFwOiBpZGVudGl0eSxcbiAgICBwcmVwYXJzZTogaWRlbnRpdHksXG4gICAgcG9zdHBhcnNlOiBpZGVudGl0eSxcbiAgICBvbjogZW1wdHlGdW4sXG4gICAgcmVzb2x2ZTogZW1wdHlGdW4sXG4gICAgcHJlUmVzb2x2ZTogZW1wdHlGdW5cbiAgfTtcbiAgaWYgKE9iamVjdC5rZXlzKGRlZmF1bHRzKS5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICFtb2R1bGVba2V5XTtcbiAgfSkpIHtcbiAgICB2YXIgZXJyID0gbmV3IFhUSW50ZXJuYWxFcnJvcihcIlRoaXMgbW9kdWxlIGNhbm5vdCBiZSB3cmFwcGVkLCBiZWNhdXNlIGl0IGRvZXNuJ3QgZGVmaW5lIGFueSBvZiB0aGUgbmVjZXNzYXJ5IGZ1bmN0aW9uc1wiKTtcbiAgICBlcnIucHJvcGVydGllcyA9IHtcbiAgICAgIGlkOiBcIm1vZHVsZV9jYW5ub3RfYmVfd3JhcHBlZFwiLFxuICAgICAgZXhwbGFuYXRpb246IFwiVGhpcyBtb2R1bGUgY2Fubm90IGJlIHdyYXBwZWQsIGJlY2F1c2UgaXQgZG9lc24ndCBkZWZpbmUgYW55IG9mIHRoZSBuZWNlc3NhcnkgZnVuY3Rpb25zXCJcbiAgICB9O1xuICAgIHRocm93IGVycjtcbiAgfVxuICBmb3IgKHZhciBrZXkgaW4gZGVmYXVsdHMpIHtcbiAgICBtb2R1bGVba2V5XSB8fCAobW9kdWxlW2tleV0gPSBkZWZhdWx0c1trZXldKTtcbiAgfVxuICByZXR1cm4gbW9kdWxlO1xufTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/module-wrapper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/modules/common.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/modules/common.js ***!
  \*************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar wrapper = __webpack_require__(/*! ../module-wrapper.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/module-wrapper.js\");\nvar filetypes = __webpack_require__(/*! ../filetypes.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/filetypes.js\");\nvar _require = __webpack_require__(/*! ../content-types.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/content-types.js\"),\n  settingsContentType = _require.settingsContentType,\n  coreContentType = _require.coreContentType,\n  appContentType = _require.appContentType,\n  customContentType = _require.customContentType,\n  diagramDataContentType = _require.diagramDataContentType,\n  diagramDrawingContentType = _require.diagramDrawingContentType;\nvar commonContentTypes = [settingsContentType, coreContentType, appContentType, customContentType, diagramDataContentType, diagramDrawingContentType];\nvar Common = /*#__PURE__*/function () {\n  function Common() {\n    _classCallCheck(this, Common);\n    this.name = \"Common\";\n  }\n  return _createClass(Common, [{\n    key: \"getFileType\",\n    value: function getFileType(_ref) {\n      var doc = _ref.doc;\n      var invertedContentTypes = doc.invertedContentTypes;\n      if (!invertedContentTypes) {\n        return;\n      }\n      for (var _i2 = 0; _i2 < commonContentTypes.length; _i2++) {\n        var ct = commonContentTypes[_i2];\n        if (invertedContentTypes[ct]) {\n          Array.prototype.push.apply(doc.targets, invertedContentTypes[ct]);\n        }\n      }\n      var keys = [\"docx\", \"pptx\", \"xlsx\"];\n      var ftCandidate;\n      for (var _i4 = 0; _i4 < keys.length; _i4++) {\n        var key = keys[_i4];\n        var contentTypes = filetypes[key];\n        for (var _i6 = 0; _i6 < contentTypes.length; _i6++) {\n          var _ct = contentTypes[_i6];\n          if (invertedContentTypes[_ct]) {\n            for (var _i8 = 0, _invertedContentTypes2 = invertedContentTypes[_ct]; _i8 < _invertedContentTypes2.length; _i8++) {\n              var target = _invertedContentTypes2[_i8];\n              if (doc.relsTypes[target] && [\"http://purl.oclc.org/ooxml/officeDocument/relationships/officeDocument\", \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\"].indexOf(doc.relsTypes[target]) === -1) {\n                continue;\n              }\n              ftCandidate = key;\n              if (filetypes.main.indexOf(_ct) !== -1 || _ct === filetypes.pptx[0]) {\n                doc.textTarget || (doc.textTarget = target);\n              }\n              if (ftCandidate === \"xlsx\") {\n                continue;\n              }\n              doc.targets.push(target);\n            }\n          }\n        }\n        if (ftCandidate) {\n          return ftCandidate;\n        }\n      }\n      return ftCandidate;\n    }\n  }]);\n}();\nmodule.exports = function () {\n  return wrapper(new Common());\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZG9jeHRlbXBsYXRlckAzLjYwLjIvbm9kZV9tb2R1bGVzL2RvY3h0ZW1wbGF0ZXIvanMvbW9kdWxlcy9jb21tb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsc0JBQXNCLDJCQUEyQixvR0FBb0csbUJBQW1CLGlCQUFpQixzSEFBc0g7QUFDL1MsaUNBQWlDO0FBQ2pDLG1DQUFtQyxnQkFBZ0IsY0FBYyxPQUFPLGNBQWM7QUFDdEYsaUNBQWlDLHFIQUFxSCxjQUFjO0FBQ3BLLDZCQUE2QixtQ0FBbUM7QUFDaEUsOEJBQThCLDRDQUE0QywrQkFBK0Isb0JBQW9CLG1DQUFtQyxzQ0FBc0MsdUVBQXVFO0FBQzdRLGNBQWMsbUJBQU8sQ0FBQyw2SEFBc0I7QUFDNUMsZ0JBQWdCLG1CQUFPLENBQUMsbUhBQWlCO0FBQ3pDLGVBQWUsbUJBQU8sQ0FBQywySEFBcUI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixpQ0FBaUM7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsbUJBQW1CO0FBQzNDO0FBQ0E7QUFDQSwwQkFBMEIsMkJBQTJCO0FBQ3JEO0FBQ0E7QUFDQSxrRkFBa0YscUNBQXFDO0FBQ3ZIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvYnJhbmRvbmJyZXdlci9Eb2N1bWVudHMvTGluZ3Vvc2l0eS9MaW5ndW9zaXR5L25vZGVfbW9kdWxlcy8ucG5wbS9kb2N4dGVtcGxhdGVyQDMuNjAuMi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy9tb2R1bGVzL2NvbW1vbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHsgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykgeyB2YXIgbyA9IHJbdF07IG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7IHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxudmFyIHdyYXBwZXIgPSByZXF1aXJlKFwiLi4vbW9kdWxlLXdyYXBwZXIuanNcIik7XG52YXIgZmlsZXR5cGVzID0gcmVxdWlyZShcIi4uL2ZpbGV0eXBlcy5qc1wiKTtcbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoXCIuLi9jb250ZW50LXR5cGVzLmpzXCIpLFxuICBzZXR0aW5nc0NvbnRlbnRUeXBlID0gX3JlcXVpcmUuc2V0dGluZ3NDb250ZW50VHlwZSxcbiAgY29yZUNvbnRlbnRUeXBlID0gX3JlcXVpcmUuY29yZUNvbnRlbnRUeXBlLFxuICBhcHBDb250ZW50VHlwZSA9IF9yZXF1aXJlLmFwcENvbnRlbnRUeXBlLFxuICBjdXN0b21Db250ZW50VHlwZSA9IF9yZXF1aXJlLmN1c3RvbUNvbnRlbnRUeXBlLFxuICBkaWFncmFtRGF0YUNvbnRlbnRUeXBlID0gX3JlcXVpcmUuZGlhZ3JhbURhdGFDb250ZW50VHlwZSxcbiAgZGlhZ3JhbURyYXdpbmdDb250ZW50VHlwZSA9IF9yZXF1aXJlLmRpYWdyYW1EcmF3aW5nQ29udGVudFR5cGU7XG52YXIgY29tbW9uQ29udGVudFR5cGVzID0gW3NldHRpbmdzQ29udGVudFR5cGUsIGNvcmVDb250ZW50VHlwZSwgYXBwQ29udGVudFR5cGUsIGN1c3RvbUNvbnRlbnRUeXBlLCBkaWFncmFtRGF0YUNvbnRlbnRUeXBlLCBkaWFncmFtRHJhd2luZ0NvbnRlbnRUeXBlXTtcbnZhciBDb21tb24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDb21tb24oKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbW1vbik7XG4gICAgdGhpcy5uYW1lID0gXCJDb21tb25cIjtcbiAgfVxuICByZXR1cm4gX2NyZWF0ZUNsYXNzKENvbW1vbiwgW3tcbiAgICBrZXk6IFwiZ2V0RmlsZVR5cGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RmlsZVR5cGUoX3JlZikge1xuICAgICAgdmFyIGRvYyA9IF9yZWYuZG9jO1xuICAgICAgdmFyIGludmVydGVkQ29udGVudFR5cGVzID0gZG9jLmludmVydGVkQ29udGVudFR5cGVzO1xuICAgICAgaWYgKCFpbnZlcnRlZENvbnRlbnRUeXBlcykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBjb21tb25Db250ZW50VHlwZXMubGVuZ3RoOyBfaTIrKykge1xuICAgICAgICB2YXIgY3QgPSBjb21tb25Db250ZW50VHlwZXNbX2kyXTtcbiAgICAgICAgaWYgKGludmVydGVkQ29udGVudFR5cGVzW2N0XSkge1xuICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGRvYy50YXJnZXRzLCBpbnZlcnRlZENvbnRlbnRUeXBlc1tjdF0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIga2V5cyA9IFtcImRvY3hcIiwgXCJwcHR4XCIsIFwieGxzeFwiXTtcbiAgICAgIHZhciBmdENhbmRpZGF0ZTtcbiAgICAgIGZvciAodmFyIF9pNCA9IDA7IF9pNCA8IGtleXMubGVuZ3RoOyBfaTQrKykge1xuICAgICAgICB2YXIga2V5ID0ga2V5c1tfaTRdO1xuICAgICAgICB2YXIgY29udGVudFR5cGVzID0gZmlsZXR5cGVzW2tleV07XG4gICAgICAgIGZvciAodmFyIF9pNiA9IDA7IF9pNiA8IGNvbnRlbnRUeXBlcy5sZW5ndGg7IF9pNisrKSB7XG4gICAgICAgICAgdmFyIF9jdCA9IGNvbnRlbnRUeXBlc1tfaTZdO1xuICAgICAgICAgIGlmIChpbnZlcnRlZENvbnRlbnRUeXBlc1tfY3RdKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBfaTggPSAwLCBfaW52ZXJ0ZWRDb250ZW50VHlwZXMyID0gaW52ZXJ0ZWRDb250ZW50VHlwZXNbX2N0XTsgX2k4IDwgX2ludmVydGVkQ29udGVudFR5cGVzMi5sZW5ndGg7IF9pOCsrKSB7XG4gICAgICAgICAgICAgIHZhciB0YXJnZXQgPSBfaW52ZXJ0ZWRDb250ZW50VHlwZXMyW19pOF07XG4gICAgICAgICAgICAgIGlmIChkb2MucmVsc1R5cGVzW3RhcmdldF0gJiYgW1wiaHR0cDovL3B1cmwub2NsYy5vcmcvb294bWwvb2ZmaWNlRG9jdW1lbnQvcmVsYXRpb25zaGlwcy9vZmZpY2VEb2N1bWVudFwiLCBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvb2ZmaWNlRG9jdW1lbnRcIl0uaW5kZXhPZihkb2MucmVsc1R5cGVzW3RhcmdldF0pID09PSAtMSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGZ0Q2FuZGlkYXRlID0ga2V5O1xuICAgICAgICAgICAgICBpZiAoZmlsZXR5cGVzLm1haW4uaW5kZXhPZihfY3QpICE9PSAtMSB8fCBfY3QgPT09IGZpbGV0eXBlcy5wcHR4WzBdKSB7XG4gICAgICAgICAgICAgICAgZG9jLnRleHRUYXJnZXQgfHwgKGRvYy50ZXh0VGFyZ2V0ID0gdGFyZ2V0KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoZnRDYW5kaWRhdGUgPT09IFwieGxzeFwiKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZG9jLnRhcmdldHMucHVzaCh0YXJnZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZnRDYW5kaWRhdGUpIHtcbiAgICAgICAgICByZXR1cm4gZnRDYW5kaWRhdGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmdENhbmRpZGF0ZTtcbiAgICB9XG4gIH1dKTtcbn0oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gd3JhcHBlcihuZXcgQ29tbW9uKCkpO1xufTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/modules/common.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/modules/expand-pair-trait.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/modules/expand-pair-trait.js ***!
  \************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar traitName = \"expandPair\";\nvar mergeSort = __webpack_require__(/*! ../merge-sort.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/merge-sort.js\");\nvar _require = __webpack_require__(/*! ../doc-utils.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/doc-utils.js\"),\n  getLeft = _require.getLeft,\n  getRight = _require.getRight,\n  pushArray = _require.pushArray;\nvar wrapper = __webpack_require__(/*! ../module-wrapper.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/module-wrapper.js\");\nvar _require2 = __webpack_require__(/*! ../traits.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/traits.js\"),\n  getExpandToDefault = _require2.getExpandToDefault;\nvar _require3 = __webpack_require__(/*! ../errors.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/errors.js\"),\n  getUnmatchedLoopException = _require3.getUnmatchedLoopException,\n  getClosingTagNotMatchOpeningTag = _require3.getClosingTagNotMatchOpeningTag,\n  getUnbalancedLoopException = _require3.getUnbalancedLoopException;\nfunction getOpenCountChange(part) {\n  switch (part.location) {\n    case \"start\":\n      return 1;\n    case \"end\":\n      return -1;\n  }\n}\nfunction match(start, end) {\n  return start != null && end != null && (start.part.location === \"start\" && end.part.location === \"end\" && start.part.value === end.part.value || end.part.value === \"\");\n}\nfunction transformer(traits) {\n  var i = 0;\n  var errors = [];\n  while (i < traits.length) {\n    var part = traits[i].part;\n    if (part.location === \"end\") {\n      if (i === 0) {\n        traits.splice(0, 1);\n        errors.push(getUnmatchedLoopException(part));\n        return {\n          traits: traits,\n          errors: errors\n        };\n      }\n      var endIndex = i;\n      var startIndex = i - 1;\n      var offseter = 1;\n      if (match(traits[startIndex], traits[endIndex])) {\n        traits.splice(endIndex, 1);\n        traits.splice(startIndex, 1);\n        return {\n          errors: errors,\n          traits: traits\n        };\n      }\n      while (offseter < 50) {\n        var startCandidate = traits[startIndex - offseter];\n        var endCandidate = traits[endIndex + offseter];\n        if (match(startCandidate, traits[endIndex])) {\n          traits.splice(endIndex, 1);\n          traits.splice(startIndex - offseter, 1);\n          return {\n            errors: errors,\n            traits: traits\n          };\n        }\n        if (match(traits[startIndex], endCandidate)) {\n          traits.splice(endIndex + offseter, 1);\n          traits.splice(startIndex, 1);\n          return {\n            errors: errors,\n            traits: traits\n          };\n        }\n        offseter++;\n      }\n      errors.push(getClosingTagNotMatchOpeningTag({\n        tags: [traits[startIndex].part, traits[endIndex].part]\n      }));\n      traits.splice(endIndex, 1);\n      traits.splice(startIndex, 1);\n      return {\n        traits: traits,\n        errors: errors\n      };\n    }\n    i++;\n  }\n  for (var _i2 = 0; _i2 < traits.length; _i2++) {\n    var _part = traits[_i2].part;\n    errors.push(getUnmatchedLoopException(_part));\n  }\n  return {\n    traits: [],\n    errors: errors\n  };\n}\nfunction getPairs(traits) {\n  var levelTraits = {};\n  var errors = [];\n  var pairs = [];\n  var transformedTraits = [];\n  pushArray(transformedTraits, traits);\n  while (transformedTraits.length > 0) {\n    var result = transformer(transformedTraits);\n    pushArray(errors, result.errors);\n    transformedTraits = result.traits;\n  }\n\n  // Stryker disable all : because this check makes the function return quicker\n  if (errors.length > 0) {\n    return {\n      pairs: pairs,\n      errors: errors\n    };\n  }\n  // Stryker restore all\n  var countOpen = 0;\n  for (var _i4 = 0; _i4 < traits.length; _i4++) {\n    var currentTrait = traits[_i4];\n    var part = currentTrait.part;\n    var change = getOpenCountChange(part);\n    countOpen += change;\n    if (change === 1) {\n      levelTraits[countOpen] = currentTrait;\n    } else {\n      var startTrait = levelTraits[countOpen + 1];\n      if (countOpen === 0) {\n        pairs.push([startTrait, currentTrait]);\n      }\n    }\n    countOpen = countOpen >= 0 ? countOpen : 0;\n  }\n  return {\n    pairs: pairs,\n    errors: errors\n  };\n}\nvar ExpandPairTrait = /*#__PURE__*/function () {\n  function ExpandPairTrait() {\n    _classCallCheck(this, ExpandPairTrait);\n    this.name = \"ExpandPairTrait\";\n  }\n  return _createClass(ExpandPairTrait, [{\n    key: \"optionsTransformer\",\n    value: function optionsTransformer(options, docxtemplater) {\n      if (docxtemplater.options.paragraphLoop) {\n        pushArray(docxtemplater.fileTypeConfig.expandTags, docxtemplater.fileTypeConfig.onParagraphLoop);\n      }\n      this.expandTags = docxtemplater.fileTypeConfig.expandTags;\n      return options;\n    }\n  }, {\n    key: \"postparse\",\n    value: function postparse(postparsed, _ref) {\n      var _this = this;\n      var getTraits = _ref.getTraits,\n        _postparse = _ref.postparse,\n        fileType = _ref.fileType;\n      var traits = getTraits(traitName, postparsed);\n      traits = traits.map(function (trait) {\n        return trait || [];\n      });\n      traits = mergeSort(traits);\n      var _getPairs = getPairs(traits),\n        pairs = _getPairs.pairs,\n        errors = _getPairs.errors;\n      var lastRight = 0;\n      var lastPair = null;\n      var expandedPairs = pairs.map(function (pair) {\n        var expandTo = pair[0].part.expandTo;\n        if (expandTo === \"auto\" && fileType !== \"text\") {\n          var result = getExpandToDefault(postparsed, pair, _this.expandTags);\n          if (result.error) {\n            errors.push(result.error);\n          }\n          expandTo = result.value;\n        }\n        if (!expandTo || fileType === \"text\") {\n          var _left = pair[0].offset;\n          var _right = pair[1].offset;\n          if (_left < lastRight && !_this.docxtemplater.options.syntax.allowUnbalancedLoops) {\n            errors.push(getUnbalancedLoopException(pair, lastPair));\n          }\n          lastPair = pair;\n          lastRight = _right;\n          return [_left, _right];\n        }\n        var left, right;\n        try {\n          left = getLeft(postparsed, expandTo, pair[0].offset);\n        } catch (e) {\n          errors.push(e);\n        }\n        try {\n          right = getRight(postparsed, expandTo, pair[1].offset);\n        } catch (e) {\n          errors.push(e);\n        }\n        if (left < lastRight && !_this.docxtemplater.options.syntax.allowUnbalancedLoops) {\n          errors.push(getUnbalancedLoopException(pair, lastPair));\n        }\n        lastRight = right;\n        lastPair = pair;\n        return [left, right];\n      });\n\n      // Stryker disable all : because this check makes the function return quicker\n      if (errors.length > 0) {\n        return {\n          postparsed: postparsed,\n          errors: errors\n        };\n      }\n      // Stryker restore all\n      var currentPairIndex = 0;\n      var innerParts;\n      var newParsed = postparsed.reduce(function (newParsed, part, i) {\n        var inPair = currentPairIndex < pairs.length && expandedPairs[currentPairIndex][0] <= i && i <= expandedPairs[currentPairIndex][1];\n        var pair = pairs[currentPairIndex];\n        var expandedPair = expandedPairs[currentPairIndex];\n        if (!inPair) {\n          newParsed.push(part);\n          return newParsed;\n        }\n        // We're inside the pair\n        if (expandedPair[0] === i) {\n          // Start pair\n          innerParts = [];\n        }\n        if (pair[0].offset !== i && pair[1].offset !== i) {\n          // Exclude inner pair indexes\n          innerParts.push(part);\n        }\n        if (expandedPair[1] === i) {\n          // End pair\n          var basePart = postparsed[pair[0].offset];\n          basePart.subparsed = _postparse(innerParts, {\n            basePart: basePart\n          });\n          basePart.endLindex = pair[1].part.lIndex;\n          delete basePart.location;\n          delete basePart.expandTo;\n          newParsed.push(basePart);\n          currentPairIndex++;\n          var _expandedPair = expandedPairs[currentPairIndex];\n          while (_expandedPair && _expandedPair[0] < i) {\n            /*\n             * If we have :\n             * expandedPairs =[[5,72],[51,67],[90,106]]\n             * Then after treating [5,72], we need to treat [90,106]\n             * Fixed since v3.58.4\n             */\n            currentPairIndex++;\n            _expandedPair = expandedPairs[currentPairIndex];\n          }\n        }\n        return newParsed;\n      }, []);\n      return {\n        postparsed: newParsed,\n        errors: errors\n      };\n    }\n  }]);\n}();\nmodule.exports = function () {\n  return wrapper(new ExpandPairTrait());\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/modules/expand-pair-trait.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/modules/loop.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/modules/loop.js ***!
  \***********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar _require = __webpack_require__(/*! ../doc-utils.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/doc-utils.js\"),\n  chunkBy = _require.chunkBy,\n  last = _require.last,\n  isParagraphStart = _require.isParagraphStart,\n  isModule = _require.isModule,\n  pushArray = _require.pushArray,\n  isParagraphEnd = _require.isParagraphEnd,\n  isContent = _require.isContent,\n  startsWith = _require.startsWith,\n  isTagEnd = _require.isTagEnd,\n  isTagStart = _require.isTagStart,\n  getSingleAttribute = _require.getSingleAttribute,\n  setSingleAttribute = _require.setSingleAttribute;\nvar filetypes = __webpack_require__(/*! ../filetypes.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/filetypes.js\");\nvar wrapper = __webpack_require__(/*! ../module-wrapper.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/module-wrapper.js\");\nvar moduleName = \"loop\";\nfunction hasContent(parts) {\n  return parts.some(function (part) {\n    return isContent(part);\n  });\n}\nfunction getFirstMeaningFulPart(parsed) {\n  for (var _i2 = 0; _i2 < parsed.length; _i2++) {\n    var part = parsed[_i2];\n    if (part.type !== \"content\") {\n      return part;\n    }\n  }\n  return null;\n}\nfunction isInsideParagraphLoop(part) {\n  var firstMeaningfulPart = getFirstMeaningFulPart(part.subparsed);\n  return firstMeaningfulPart != null && firstMeaningfulPart.tag !== \"w:t\";\n}\nfunction getPageBreakIfApplies(part) {\n  return part.hasPageBreak && isInsideParagraphLoop(part) ? '<w:p><w:r><w:br w:type=\"page\"/></w:r></w:p>' : \"\";\n}\nfunction isEnclosedByParagraphs(parsed) {\n  return parsed.length && isParagraphStart(parsed[0]) && isParagraphEnd(last(parsed));\n}\nfunction getOffset(chunk) {\n  return hasContent(chunk) ? 0 : chunk.length;\n}\nfunction addPageBreakAtEnd(subRendered) {\n  var j = subRendered.parts.length - 1;\n  if (subRendered.parts[j] === \"</w:p>\") {\n    subRendered.parts.splice(j, 0, '<w:r><w:br w:type=\"page\"/></w:r>');\n  } else {\n    subRendered.parts.push('<w:p><w:r><w:br w:type=\"page\"/></w:r></w:p>');\n  }\n}\nfunction addPageBreakAtBeginning(subRendered) {\n  subRendered.parts.unshift('<w:p><w:r><w:br w:type=\"page\"/></w:r></w:p>');\n}\nfunction isContinuous(parts) {\n  return parts.some(function (part) {\n    return isTagStart(\"w:type\", part) && part.value.indexOf(\"continuous\") !== -1;\n  });\n}\nfunction isNextPage(parts) {\n  return parts.some(function (part) {\n    return isTagStart(\"w:type\", part) && part.value.indexOf('w:val=\"nextPage\"') !== -1;\n  });\n}\nfunction addSectionBefore(parts, sect) {\n  return pushArray([\"<w:p><w:pPr>\".concat(sect.map(function (_ref) {\n    var value = _ref.value;\n    return value;\n  }).join(\"\"), \"</w:pPr></w:p>\")], parts);\n}\nfunction addContinuousType(parts) {\n  var stop = false;\n  var inSectPr = false;\n  return parts.reduce(function (result, part) {\n    if (stop === false && startsWith(part, \"<w:sectPr\")) {\n      inSectPr = true;\n    }\n    if (inSectPr) {\n      if (startsWith(part, \"<w:type\")) {\n        stop = true;\n      }\n      if (stop === false && startsWith(part, \"</w:sectPr\")) {\n        result.push('<w:type w:val=\"continuous\"/>');\n      }\n    }\n    result.push(part);\n    return result;\n  }, []);\n}\nfunction dropHeaderFooterRefs(parts) {\n  return parts.filter(function (text) {\n    return !startsWith(text, \"<w:headerReference\") && !startsWith(text, \"<w:footerReference\");\n  });\n}\nfunction hasPageBreak(chunk) {\n  return chunk.some(function (part) {\n    return part.tag === \"w:br\" && part.value.indexOf('w:type=\"page\"') !== -1;\n  });\n}\nfunction hasImage(chunk) {\n  return chunk.some(function (_ref2) {\n    var tag = _ref2.tag;\n    return tag === \"w:drawing\";\n  });\n}\nfunction getSectPr(chunks) {\n  var collectSectPr = false;\n  var sectPrs = [];\n  for (var _i4 = 0; _i4 < chunks.length; _i4++) {\n    var part = chunks[_i4];\n    if (isTagStart(\"w:sectPr\", part)) {\n      sectPrs.push([]);\n      collectSectPr = true;\n    }\n    if (collectSectPr) {\n      sectPrs[sectPrs.length - 1].push(part);\n    }\n    if (isTagEnd(\"w:sectPr\", part)) {\n      collectSectPr = false;\n    }\n  }\n  return sectPrs;\n}\nfunction getSectPrHeaderFooterChangeCount(chunks) {\n  var collectSectPr = false;\n  var sectPrCount = 0;\n  for (var _i6 = 0; _i6 < chunks.length; _i6++) {\n    var part = chunks[_i6];\n    if (isTagStart(\"w:sectPr\", part)) {\n      collectSectPr = true;\n    }\n    if (collectSectPr) {\n      if (part.tag === \"w:headerReference\" || part.tag === \"w:footerReference\") {\n        sectPrCount++;\n        collectSectPr = false;\n      }\n    }\n    if (isTagEnd(\"w:sectPr\", part)) {\n      collectSectPr = false;\n    }\n  }\n  return sectPrCount;\n}\nfunction getLastSectPr(parsed) {\n  var sectPr = [];\n  var inSectPr = false;\n  for (var i = parsed.length - 1; i >= 0; i--) {\n    var part = parsed[i];\n    if (isTagEnd(\"w:sectPr\", part)) {\n      inSectPr = true;\n    }\n    if (isTagStart(\"w:sectPr\", part)) {\n      sectPr.unshift(part.value);\n      inSectPr = false;\n    }\n    if (inSectPr) {\n      sectPr.unshift(part.value);\n    }\n    if (isParagraphStart(part)) {\n      if (sectPr.length > 0) {\n        return sectPr.join(\"\");\n      }\n      break;\n    }\n  }\n  return \"\";\n}\nvar LoopModule = /*#__PURE__*/function () {\n  function LoopModule() {\n    _classCallCheck(this, LoopModule);\n    this.name = \"LoopModule\";\n    this.inXfrm = false;\n    this.totalSectPr = 0;\n    this.prefix = {\n      start: \"#\",\n      end: \"/\",\n      dash: /^-([^\\s]+)\\s(.+)/,\n      inverted: \"^\"\n    };\n  }\n  return _createClass(LoopModule, [{\n    key: \"optionsTransformer\",\n    value: function optionsTransformer(opts, docxtemplater) {\n      this.docxtemplater = docxtemplater;\n      return opts;\n    }\n  }, {\n    key: \"preparse\",\n    value: function preparse(parsed, _ref3) {\n      var contentType = _ref3.contentType;\n      if (filetypes.main.indexOf(contentType) !== -1) {\n        this.sects = getSectPr(parsed);\n      }\n    }\n  }, {\n    key: \"matchers\",\n    value: function matchers() {\n      var module = moduleName;\n      return [[this.prefix.start, module, {\n        expandTo: \"auto\",\n        location: \"start\",\n        inverted: false\n      }], [this.prefix.inverted, module, {\n        expandTo: \"auto\",\n        location: \"start\",\n        inverted: true\n      }], [this.prefix.end, module, {\n        location: \"end\"\n      }], [this.prefix.dash, module, function (_ref4) {\n        var _ref5 = _slicedToArray(_ref4, 3),\n          expandTo = _ref5[1],\n          value = _ref5[2];\n        return {\n          location: \"start\",\n          inverted: false,\n          expandTo: expandTo,\n          value: value\n        };\n      }]];\n    }\n  }, {\n    key: \"getTraits\",\n    value: function getTraits(traitName, parsed) {\n      // Stryker disable all : because getTraits should disappear in v4\n      if (traitName !== \"expandPair\") {\n        return;\n      }\n      // Stryker restore all\n\n      return parsed.reduce(function (tags, part, offset) {\n        if (isModule(part, moduleName) && part.subparsed == null) {\n          tags.push({\n            part: part,\n            offset: offset\n          });\n        }\n        return tags;\n      }, []);\n    }\n  }, {\n    key: \"postparse\",\n    value: function postparse(parsed, _ref6) {\n      var basePart = _ref6.basePart;\n      if (basePart && this.docxtemplater.fileType === \"docx\" && parsed.length > 0) {\n        basePart.sectPrCount = getSectPrHeaderFooterChangeCount(parsed);\n        this.totalSectPr += basePart.sectPrCount;\n        var sects = this.sects;\n        sects.some(function (sect, index) {\n          if (basePart.lIndex < sect[0].lIndex) {\n            if (index + 1 < sects.length && isContinuous(sects[index + 1])) {\n              basePart.addContinuousType = true;\n            }\n            return true;\n          }\n          if (parsed[0].lIndex < sect[0].lIndex && sect[0].lIndex < basePart.lIndex) {\n            if (isNextPage(sects[index])) {\n              basePart.addNextPage = {\n                index: index\n              };\n            }\n            return true;\n          }\n        });\n        basePart.lastParagrapSectPr = getLastSectPr(parsed);\n      }\n      if (!basePart || basePart.expandTo !== \"auto\" || basePart.module !== moduleName || !isEnclosedByParagraphs(parsed)) {\n        return parsed;\n      }\n      basePart.paragraphLoop = true;\n      var level = 0;\n      var chunks = chunkBy(parsed, function (p) {\n        if (isParagraphStart(p)) {\n          level++;\n          if (level === 1) {\n            return \"start\";\n          }\n        }\n        if (isParagraphEnd(p)) {\n          level--;\n          if (level === 0) {\n            return \"end\";\n          }\n        }\n        return null;\n      });\n      var firstChunk = chunks[0];\n      var lastChunk = last(chunks);\n      var firstOffset = getOffset(firstChunk);\n      var lastOffset = getOffset(lastChunk);\n      basePart.hasPageBreakBeginning = hasPageBreak(firstChunk);\n      basePart.hasPageBreak = hasPageBreak(lastChunk);\n      if (hasImage(firstChunk)) {\n        firstOffset = 0;\n      }\n      if (hasImage(lastChunk)) {\n        lastOffset = 0;\n      }\n      return parsed.slice(firstOffset, parsed.length - lastOffset);\n    }\n  }, {\n    key: \"resolve\",\n    value: function resolve(part, options) {\n      if (!isModule(part, moduleName)) {\n        return null;\n      }\n      var sm = options.scopeManager;\n      var promisedValue = sm.getValueAsync(part.value, {\n        part: part\n      });\n      var promises = [];\n      function loopOver(scope, i, length) {\n        var scopeManager = sm.createSubScopeManager(scope, part.value, i, part, length);\n        promises.push(options.resolve(_objectSpread(_objectSpread({}, options), {}, {\n          compiled: part.subparsed,\n          tags: {},\n          scopeManager: scopeManager\n        })));\n      }\n      var errorList = [];\n      return promisedValue.then(function (values) {\n        return new Promise(function (resolve) {\n          if (values instanceof Array) {\n            Promise.all(values).then(resolve);\n          } else {\n            resolve(values);\n          }\n        }).then(function (values) {\n          sm.loopOverValue(values, loopOver, part.inverted);\n          return Promise.all(promises).then(function (r) {\n            return r.map(function (_ref7) {\n              var resolved = _ref7.resolved,\n                errors = _ref7.errors;\n              errorList.push.apply(errorList, _toConsumableArray(errors));\n              return resolved;\n            });\n          }).then(function (value) {\n            if (errorList.length > 0) {\n              throw errorList;\n            }\n            return value;\n          });\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render(part, options) {\n      if (part.tag === \"p:xfrm\") {\n        this.inXfrm = part.position === \"start\";\n      }\n      if (part.tag === \"a:ext\" && this.inXfrm) {\n        this.lastExt = part;\n        return part;\n      }\n      if (!isModule(part, moduleName)) {\n        return null;\n      }\n      var totalValue = [];\n      var errors = [];\n      var heightOffset = 0;\n      var self = this;\n      var firstTag = part.subparsed[0];\n      var tagHeight = 0;\n      if ((firstTag === null || firstTag === void 0 ? void 0 : firstTag.tag) === \"a:tr\") {\n        tagHeight = +getSingleAttribute(firstTag.value, \"h\");\n      }\n      heightOffset -= tagHeight;\n      var a16RowIdOffset = 0;\n      var insideParagraphLoop = isInsideParagraphLoop(part);\n      function loopOver(scope, i, length) {\n        heightOffset += tagHeight;\n        var scopeManager = options.scopeManager.createSubScopeManager(scope, part.value, i, part, length);\n        for (var _i8 = 0, _part$subparsed2 = part.subparsed; _i8 < _part$subparsed2.length; _i8++) {\n          var pp = _part$subparsed2[_i8];\n          if (isTagStart(\"a16:rowId\", pp)) {\n            var val = +getSingleAttribute(pp.value, \"val\") + a16RowIdOffset;\n            a16RowIdOffset = 1;\n            pp.value = setSingleAttribute(pp.value, \"val\", val);\n          }\n        }\n        var subRendered = options.render(_objectSpread(_objectSpread({}, options), {}, {\n          compiled: part.subparsed,\n          tags: {},\n          scopeManager: scopeManager\n        }));\n        if (part.hasPageBreak && i === length - 1 && insideParagraphLoop) {\n          addPageBreakAtEnd(subRendered);\n        }\n        var isNotFirst = scopeManager.scopePathItem.some(function (i) {\n          return i !== 0;\n        });\n        if (isNotFirst) {\n          if (part.sectPrCount === 1) {\n            subRendered.parts = dropHeaderFooterRefs(subRendered.parts);\n          }\n          if (part.addContinuousType) {\n            subRendered.parts = addContinuousType(subRendered.parts);\n          }\n        } else if (part.addNextPage) {\n          subRendered.parts = addSectionBefore(subRendered.parts, self.sects[part.addNextPage.index]);\n        }\n        if (part.addNextPage) {\n          addPageBreakAtEnd(subRendered);\n        }\n        if (part.hasPageBreakBeginning && insideParagraphLoop) {\n          addPageBreakAtBeginning(subRendered);\n        }\n        for (var _i10 = 0, _subRendered$parts2 = subRendered.parts; _i10 < _subRendered$parts2.length; _i10++) {\n          var _val = _subRendered$parts2[_i10];\n          totalValue.push(_val);\n        }\n        Array.prototype.push.apply(errors, subRendered.errors);\n      }\n      var result = options.scopeManager.loopOver(part.value, loopOver, part.inverted, {\n        part: part\n      });\n      // if the loop is showing empty content\n      if (result === false) {\n        if (part.lastParagrapSectPr) {\n          if (part.paragraphLoop) {\n            return {\n              value: \"<w:p><w:pPr>\".concat(part.lastParagrapSectPr, \"</w:pPr></w:p>\")\n            };\n          }\n          return {\n            value: \"</w:t></w:r></w:p><w:p><w:pPr>\".concat(part.lastParagrapSectPr, \"</w:pPr><w:r><w:t>\")\n          };\n        }\n        return {\n          value: getPageBreakIfApplies(part) || \"\",\n          errors: errors\n        };\n      }\n      if (heightOffset !== 0) {\n        var cy = +getSingleAttribute(this.lastExt.value, \"cy\");\n        this.lastExt.value = setSingleAttribute(this.lastExt.value, \"cy\", cy + heightOffset);\n      }\n      return {\n        value: options.joinUncorrupt(totalValue, _objectSpread(_objectSpread({}, options), {}, {\n          basePart: part\n        })),\n        errors: errors\n      };\n    }\n  }]);\n}();\nmodule.exports = function () {\n  return wrapper(new LoopModule());\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/modules/loop.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/modules/rawxml.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/modules/rawxml.js ***!
  \*************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar traits = __webpack_require__(/*! ../traits.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/traits.js\");\nvar _require = __webpack_require__(/*! ../doc-utils.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/doc-utils.js\"),\n  isContent = _require.isContent;\nvar _require2 = __webpack_require__(/*! ../errors.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/errors.js\"),\n  throwRawTagShouldBeOnlyTextInParagraph = _require2.throwRawTagShouldBeOnlyTextInParagraph,\n  getInvalidRawXMLValueException = _require2.getInvalidRawXMLValueException;\nvar wrapper = __webpack_require__(/*! ../module-wrapper.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/module-wrapper.js\");\nvar moduleName = \"rawxml\";\nfunction getInner(_ref) {\n  var part = _ref.part,\n    left = _ref.left,\n    right = _ref.right,\n    postparsed = _ref.postparsed,\n    index = _ref.index;\n  var paragraphParts = postparsed.slice(left + 1, right);\n  for (var i = 0, len = paragraphParts.length; i < len; i++) {\n    if (i === index - left - 1) {\n      continue;\n    }\n    var p = paragraphParts[i];\n    if (isContent(p)) {\n      throwRawTagShouldBeOnlyTextInParagraph({\n        paragraphParts: paragraphParts,\n        part: part\n      });\n    }\n  }\n  return part;\n}\nvar RawXmlModule = /*#__PURE__*/function () {\n  function RawXmlModule() {\n    _classCallCheck(this, RawXmlModule);\n    this.name = \"RawXmlModule\";\n    this.prefix = \"@\";\n  }\n  return _createClass(RawXmlModule, [{\n    key: \"optionsTransformer\",\n    value: function optionsTransformer(options, docxtemplater) {\n      this.fileTypeConfig = docxtemplater.fileTypeConfig;\n      return options;\n    }\n  }, {\n    key: \"matchers\",\n    value: function matchers() {\n      return [[this.prefix, moduleName]];\n    }\n  }, {\n    key: \"postparse\",\n    value: function postparse(postparsed) {\n      return traits.expandToOne(postparsed, {\n        moduleName: moduleName,\n        getInner: getInner,\n        expandTo: this.fileTypeConfig.tagRawXml,\n        error: {\n          message: \"Raw tag not in paragraph\",\n          id: \"raw_tag_outerxml_invalid\",\n          explanation: function explanation(part) {\n            return \"The tag \\\"\".concat(part.value, \"\\\" is not inside a paragraph, putting raw tags inside an inline loop is disallowed.\");\n          }\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render(part, options) {\n      if (part.module !== moduleName) {\n        return null;\n      }\n      var value;\n      var errors = [];\n      try {\n        value = options.scopeManager.getValue(part.value, {\n          part: part\n        });\n        value !== null && value !== void 0 ? value : value = options.nullGetter(part);\n      } catch (e) {\n        errors.push(e);\n        return {\n          errors: errors\n        };\n      }\n      value = value ? value : \"\";\n      if (typeof value === \"string\") {\n        return {\n          value: value\n        };\n      }\n      return {\n        errors: [getInvalidRawXMLValueException({\n          tag: part.value,\n          value: value,\n          offset: part.offset\n        })]\n      };\n    }\n  }]);\n}();\nmodule.exports = function () {\n  return wrapper(new RawXmlModule());\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZG9jeHRlbXBsYXRlckAzLjYwLjIvbm9kZV9tb2R1bGVzL2RvY3h0ZW1wbGF0ZXIvanMvbW9kdWxlcy9yYXd4bWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsc0JBQXNCLDJCQUEyQixvR0FBb0csbUJBQW1CLGlCQUFpQixzSEFBc0g7QUFDL1MsaUNBQWlDO0FBQ2pDLG1DQUFtQyxnQkFBZ0IsY0FBYyxPQUFPLGNBQWM7QUFDdEYsaUNBQWlDLHFIQUFxSCxjQUFjO0FBQ3BLLDZCQUE2QixtQ0FBbUM7QUFDaEUsOEJBQThCLDRDQUE0QywrQkFBK0Isb0JBQW9CLG1DQUFtQyxzQ0FBc0MsdUVBQXVFO0FBQzdRLGFBQWEsbUJBQU8sQ0FBQyw2R0FBYztBQUNuQyxlQUFlLG1CQUFPLENBQUMsbUhBQWlCO0FBQ3hDO0FBQ0EsZ0JBQWdCLG1CQUFPLENBQUMsNkdBQWM7QUFDdEM7QUFDQTtBQUNBLGNBQWMsbUJBQU8sQ0FBQyw2SEFBc0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxTQUFTO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvYnJhbmRvbmJyZXdlci9Eb2N1bWVudHMvTGluZ3Vvc2l0eS9MaW5ndW9zaXR5L25vZGVfbW9kdWxlcy8ucG5wbS9kb2N4dGVtcGxhdGVyQDMuNjAuMi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy9tb2R1bGVzL3Jhd3htbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHsgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykgeyB2YXIgbyA9IHJbdF07IG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7IHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxudmFyIHRyYWl0cyA9IHJlcXVpcmUoXCIuLi90cmFpdHMuanNcIik7XG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKFwiLi4vZG9jLXV0aWxzLmpzXCIpLFxuICBpc0NvbnRlbnQgPSBfcmVxdWlyZS5pc0NvbnRlbnQ7XG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZShcIi4uL2Vycm9ycy5qc1wiKSxcbiAgdGhyb3dSYXdUYWdTaG91bGRCZU9ubHlUZXh0SW5QYXJhZ3JhcGggPSBfcmVxdWlyZTIudGhyb3dSYXdUYWdTaG91bGRCZU9ubHlUZXh0SW5QYXJhZ3JhcGgsXG4gIGdldEludmFsaWRSYXdYTUxWYWx1ZUV4Y2VwdGlvbiA9IF9yZXF1aXJlMi5nZXRJbnZhbGlkUmF3WE1MVmFsdWVFeGNlcHRpb247XG52YXIgd3JhcHBlciA9IHJlcXVpcmUoXCIuLi9tb2R1bGUtd3JhcHBlci5qc1wiKTtcbnZhciBtb2R1bGVOYW1lID0gXCJyYXd4bWxcIjtcbmZ1bmN0aW9uIGdldElubmVyKF9yZWYpIHtcbiAgdmFyIHBhcnQgPSBfcmVmLnBhcnQsXG4gICAgbGVmdCA9IF9yZWYubGVmdCxcbiAgICByaWdodCA9IF9yZWYucmlnaHQsXG4gICAgcG9zdHBhcnNlZCA9IF9yZWYucG9zdHBhcnNlZCxcbiAgICBpbmRleCA9IF9yZWYuaW5kZXg7XG4gIHZhciBwYXJhZ3JhcGhQYXJ0cyA9IHBvc3RwYXJzZWQuc2xpY2UobGVmdCArIDEsIHJpZ2h0KTtcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHBhcmFncmFwaFBhcnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGkgPT09IGluZGV4IC0gbGVmdCAtIDEpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB2YXIgcCA9IHBhcmFncmFwaFBhcnRzW2ldO1xuICAgIGlmIChpc0NvbnRlbnQocCkpIHtcbiAgICAgIHRocm93UmF3VGFnU2hvdWxkQmVPbmx5VGV4dEluUGFyYWdyYXBoKHtcbiAgICAgICAgcGFyYWdyYXBoUGFydHM6IHBhcmFncmFwaFBhcnRzLFxuICAgICAgICBwYXJ0OiBwYXJ0XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHBhcnQ7XG59XG52YXIgUmF3WG1sTW9kdWxlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUmF3WG1sTW9kdWxlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSYXdYbWxNb2R1bGUpO1xuICAgIHRoaXMubmFtZSA9IFwiUmF3WG1sTW9kdWxlXCI7XG4gICAgdGhpcy5wcmVmaXggPSBcIkBcIjtcbiAgfVxuICByZXR1cm4gX2NyZWF0ZUNsYXNzKFJhd1htbE1vZHVsZSwgW3tcbiAgICBrZXk6IFwib3B0aW9uc1RyYW5zZm9ybWVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9wdGlvbnNUcmFuc2Zvcm1lcihvcHRpb25zLCBkb2N4dGVtcGxhdGVyKSB7XG4gICAgICB0aGlzLmZpbGVUeXBlQ29uZmlnID0gZG9jeHRlbXBsYXRlci5maWxlVHlwZUNvbmZpZztcbiAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJtYXRjaGVyc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBtYXRjaGVycygpIHtcbiAgICAgIHJldHVybiBbW3RoaXMucHJlZml4LCBtb2R1bGVOYW1lXV07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInBvc3RwYXJzZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwb3N0cGFyc2UocG9zdHBhcnNlZCkge1xuICAgICAgcmV0dXJuIHRyYWl0cy5leHBhbmRUb09uZShwb3N0cGFyc2VkLCB7XG4gICAgICAgIG1vZHVsZU5hbWU6IG1vZHVsZU5hbWUsXG4gICAgICAgIGdldElubmVyOiBnZXRJbm5lcixcbiAgICAgICAgZXhwYW5kVG86IHRoaXMuZmlsZVR5cGVDb25maWcudGFnUmF3WG1sLFxuICAgICAgICBlcnJvcjoge1xuICAgICAgICAgIG1lc3NhZ2U6IFwiUmF3IHRhZyBub3QgaW4gcGFyYWdyYXBoXCIsXG4gICAgICAgICAgaWQ6IFwicmF3X3RhZ19vdXRlcnhtbF9pbnZhbGlkXCIsXG4gICAgICAgICAgZXhwbGFuYXRpb246IGZ1bmN0aW9uIGV4cGxhbmF0aW9uKHBhcnQpIHtcbiAgICAgICAgICAgIHJldHVybiBcIlRoZSB0YWcgXFxcIlwiLmNvbmNhdChwYXJ0LnZhbHVlLCBcIlxcXCIgaXMgbm90IGluc2lkZSBhIHBhcmFncmFwaCwgcHV0dGluZyByYXcgdGFncyBpbnNpZGUgYW4gaW5saW5lIGxvb3AgaXMgZGlzYWxsb3dlZC5cIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcihwYXJ0LCBvcHRpb25zKSB7XG4gICAgICBpZiAocGFydC5tb2R1bGUgIT09IG1vZHVsZU5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICB2YXIgZXJyb3JzID0gW107XG4gICAgICB0cnkge1xuICAgICAgICB2YWx1ZSA9IG9wdGlvbnMuc2NvcGVNYW5hZ2VyLmdldFZhbHVlKHBhcnQudmFsdWUsIHtcbiAgICAgICAgICBwYXJ0OiBwYXJ0XG4gICAgICAgIH0pO1xuICAgICAgICB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdm9pZCAwID8gdmFsdWUgOiB2YWx1ZSA9IG9wdGlvbnMubnVsbEdldHRlcihwYXJ0KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgZXJyb3JzLnB1c2goZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZXJyb3JzOiBlcnJvcnNcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gdmFsdWUgPyB2YWx1ZSA6IFwiXCI7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBlcnJvcnM6IFtnZXRJbnZhbGlkUmF3WE1MVmFsdWVFeGNlcHRpb24oe1xuICAgICAgICAgIHRhZzogcGFydC52YWx1ZSxcbiAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgb2Zmc2V0OiBwYXJ0Lm9mZnNldFxuICAgICAgICB9KV1cbiAgICAgIH07XG4gICAgfVxuICB9XSk7XG59KCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHdyYXBwZXIobmV3IFJhd1htbE1vZHVsZSgpKTtcbn07Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/modules/rawxml.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/modules/render.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/modules/render.js ***!
  \*************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar wrapper = __webpack_require__(/*! ../module-wrapper.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/module-wrapper.js\");\nvar _require = __webpack_require__(/*! ../errors.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/errors.js\"),\n  getScopeCompilationError = _require.getScopeCompilationError,\n  getCorruptCharactersException = _require.getCorruptCharactersException;\nvar _require2 = __webpack_require__(/*! ../doc-utils.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/doc-utils.js\"),\n  utf8ToWord = _require2.utf8ToWord,\n  hasCorruptCharacters = _require2.hasCorruptCharacters,\n  removeCorruptCharacters = _require2.removeCorruptCharacters;\nvar _require3 = __webpack_require__(/*! ../content-types.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/content-types.js\"),\n  settingsContentType = _require3.settingsContentType,\n  coreContentType = _require3.coreContentType,\n  appContentType = _require3.appContentType,\n  customContentType = _require3.customContentType;\nvar ftprefix = {\n  docx: \"w\",\n  pptx: \"a\"\n};\nvar Render = /*#__PURE__*/function () {\n  function Render() {\n    _classCallCheck(this, Render);\n    this.name = \"Render\";\n    this.recordRun = false;\n    this.recordedRun = [];\n  }\n  return _createClass(Render, [{\n    key: \"optionsTransformer\",\n    value: function optionsTransformer(options, docxtemplater) {\n      this.parser = docxtemplater.parser;\n      this.fileType = docxtemplater.fileType;\n      return options;\n    }\n  }, {\n    key: \"set\",\n    value: function set(obj) {\n      if (obj.compiled) {\n        this.compiled = obj.compiled;\n      }\n      if (obj.data != null) {\n        this.data = obj.data;\n      }\n    }\n  }, {\n    key: \"getRenderedMap\",\n    value: function getRenderedMap(mapper) {\n      var _this = this;\n      return Object.keys(this.compiled).reduce(function (mapper, from) {\n        mapper[from] = {\n          from: from,\n          data: _this.data\n        };\n        return mapper;\n      }, mapper);\n    }\n  }, {\n    key: \"postparse\",\n    value: function postparse(postparsed, options) {\n      var errors = [];\n      for (var _i2 = 0; _i2 < postparsed.length; _i2++) {\n        var p = postparsed[_i2];\n        if (p.type === \"placeholder\") {\n          var tag = p.value;\n          try {\n            options.cachedParsers[p.lIndex] = this.parser(tag, {\n              tag: p\n            });\n          } catch (rootError) {\n            errors.push(getScopeCompilationError({\n              tag: tag,\n              rootError: rootError,\n              offset: p.offset\n            }));\n          }\n        }\n      }\n      return {\n        postparsed: postparsed,\n        errors: errors\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render(part, _ref) {\n      var contentType = _ref.contentType,\n        scopeManager = _ref.scopeManager,\n        linebreaks = _ref.linebreaks,\n        nullGetter = _ref.nullGetter,\n        fileType = _ref.fileType,\n        stripInvalidXMLChars = _ref.stripInvalidXMLChars;\n      if (linebreaks && [settingsContentType, coreContentType, appContentType, customContentType].indexOf(contentType) !== -1) {\n        // Fixes issue tested in #docprops-linebreak\n        linebreaks = false;\n      }\n      if (linebreaks) {\n        this.recordRuns(part);\n      }\n      if (part.type !== \"placeholder\" || part.module) {\n        return;\n      }\n      var value;\n      try {\n        value = scopeManager.getValue(part.value, {\n          part: part\n        });\n      } catch (e) {\n        return {\n          errors: [e]\n        };\n      }\n      value !== null && value !== void 0 ? value : value = nullGetter(part);\n      if (typeof value === \"string\") {\n        if (stripInvalidXMLChars) {\n          value = removeCorruptCharacters(value);\n        } else if ([\"docx\", \"pptx\", \"xlsx\"].indexOf(fileType) !== -1 && hasCorruptCharacters(value)) {\n          return {\n            errors: [getCorruptCharactersException({\n              tag: part.value,\n              value: value,\n              offset: part.offset\n            })]\n          };\n        }\n      }\n      if (fileType === \"text\") {\n        return {\n          value: value\n        };\n      }\n      return {\n        value: linebreaks && typeof value === \"string\" ? this.renderLineBreaks(value) : utf8ToWord(value)\n      };\n    }\n  }, {\n    key: \"recordRuns\",\n    value: function recordRuns(part) {\n      if (part.tag === \"\".concat(ftprefix[this.fileType], \":r\")) {\n        this.recordedRun = [];\n      } else if (part.tag === \"\".concat(ftprefix[this.fileType], \":rPr\")) {\n        if (part.position === \"start\") {\n          this.recordRun = true;\n          this.recordedRun = [part.value];\n        }\n        if (part.position === \"end\" || part.position === \"selfclosing\") {\n          this.recordedRun.push(part.value);\n          this.recordRun = false;\n        }\n      } else if (this.recordRun) {\n        this.recordedRun.push(part.value);\n      }\n    }\n  }, {\n    key: \"renderLineBreaks\",\n    value: function renderLineBreaks(value) {\n      var _this2 = this;\n      var p = ftprefix[this.fileType];\n      var br = this.fileType === \"docx\" ? \"<w:r><w:br/></w:r>\" : \"<a:br/>\";\n      var lines = value.split(\"\\n\");\n      var runprops = this.recordedRun.join(\"\");\n      return lines.map(function (line) {\n        return utf8ToWord(line);\n      }).reduce(function (result, line, i) {\n        result.push(line);\n        if (i < lines.length - 1) {\n          result.push(\"</\".concat(p, \":t></\").concat(p, \":r>\").concat(br, \"<\").concat(p, \":r>\").concat(runprops, \"<\").concat(p, \":t\").concat(_this2.fileType === \"docx\" ? ' xml:space=\"preserve\"' : \"\", \">\"));\n        }\n        return result;\n      }, []);\n    }\n  }]);\n}();\nmodule.exports = function () {\n  return wrapper(new Render());\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/modules/render.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/modules/space-preserve.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/modules/space-preserve.js ***!
  \*********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar wrapper = __webpack_require__(/*! ../module-wrapper.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/module-wrapper.js\");\nvar _require = __webpack_require__(/*! ../doc-utils.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/doc-utils.js\"),\n  isTextStart = _require.isTextStart,\n  isTextEnd = _require.isTextEnd,\n  endsWith = _require.endsWith,\n  startsWith = _require.startsWith;\nvar wTpreserve = '<w:t xml:space=\"preserve\">';\nvar wTpreservelen = wTpreserve.length;\nvar wtEnd = \"</w:t>\";\nvar wtEndlen = wtEnd.length;\nfunction isWtStart(part) {\n  return isTextStart(part) && part.tag === \"w:t\";\n}\nfunction addXMLPreserve(chunk, index) {\n  var tag = chunk[index].value;\n  if (chunk[index + 1].value === \"</w:t>\") {\n    return tag;\n  }\n  if (tag.indexOf('xml:space=\"preserve\"') !== -1) {\n    return tag;\n  }\n  return tag.substr(0, tag.length - 1) + ' xml:space=\"preserve\">';\n}\nfunction isInsideLoop(meta, chunk) {\n  return meta && meta.basePart && chunk.length > 1;\n}\nvar SpacePreserve = /*#__PURE__*/function () {\n  function SpacePreserve() {\n    _classCallCheck(this, SpacePreserve);\n    this.name = \"SpacePreserveModule\";\n  }\n  return _createClass(SpacePreserve, [{\n    key: \"postparse\",\n    value: function postparse(postparsed, meta) {\n      var chunk = [],\n        inTextTag = false,\n        endLindex = 0,\n        lastTextTag = 0;\n      function isStartingPlaceHolder(part, chunk) {\n        return part.type === \"placeholder\" && chunk.length > 1;\n      }\n      var result = postparsed.reduce(function (postparsed, part) {\n        if (isWtStart(part)) {\n          inTextTag = true;\n          lastTextTag = chunk.length;\n        }\n        if (!inTextTag) {\n          postparsed.push(part);\n          return postparsed;\n        }\n        chunk.push(part);\n        if (isInsideLoop(meta, chunk)) {\n          endLindex = meta.basePart.endLindex;\n          chunk[0].value = addXMLPreserve(chunk, 0);\n        }\n        if (isStartingPlaceHolder(part, chunk)) {\n          chunk[lastTextTag].value = addXMLPreserve(chunk, lastTextTag);\n          endLindex = part.endLindex;\n        }\n        if (isTextEnd(part) && part.lIndex > endLindex) {\n          if (endLindex !== 0) {\n            chunk[lastTextTag].value = addXMLPreserve(chunk, lastTextTag);\n          }\n          Array.prototype.push.apply(postparsed, chunk);\n          chunk = [];\n          inTextTag = false;\n          endLindex = 0;\n          lastTextTag = 0;\n        }\n        return postparsed;\n      }, []);\n      Array.prototype.push.apply(result, chunk);\n      return result;\n    }\n  }, {\n    key: \"postrender\",\n    value: function postrender(parts) {\n      var lastNonEmpty = \"\";\n      var lastNonEmptyIndex = 0;\n      for (var i = 0, len = parts.length; i < len; i++) {\n        var p = parts[i];\n        if (p === \"\") {\n          continue;\n        }\n        if (endsWith(lastNonEmpty, wTpreserve) && startsWith(p, wtEnd)) {\n          parts[lastNonEmptyIndex] = lastNonEmpty.substr(0, lastNonEmpty.length - wTpreservelen) + \"<w:t/>\";\n          p = p.substr(wtEndlen);\n        }\n        lastNonEmpty = p;\n        lastNonEmptyIndex = i;\n        parts[i] = p;\n      }\n      return parts;\n    }\n  }]);\n}();\nmodule.exports = function () {\n  return wrapper(new SpacePreserve());\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZG9jeHRlbXBsYXRlckAzLjYwLjIvbm9kZV9tb2R1bGVzL2RvY3h0ZW1wbGF0ZXIvanMvbW9kdWxlcy9zcGFjZS1wcmVzZXJ2ZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixzQkFBc0IsMkJBQTJCLG9HQUFvRyxtQkFBbUIsaUJBQWlCLHNIQUFzSDtBQUMvUyxpQ0FBaUM7QUFDakMsbUNBQW1DLGdCQUFnQixjQUFjLE9BQU8sY0FBYztBQUN0RixpQ0FBaUMscUhBQXFILGNBQWM7QUFDcEssNkJBQTZCLG1DQUFtQztBQUNoRSw4QkFBOEIsNENBQTRDLCtCQUErQixvQkFBb0IsbUNBQW1DLHNDQUFzQyx1RUFBdUU7QUFDN1EsY0FBYyxtQkFBTyxDQUFDLDZIQUFzQjtBQUM1QyxlQUFlLG1CQUFPLENBQUMsbUhBQWlCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLFNBQVM7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvYnJhbmRvbmJyZXdlci9Eb2N1bWVudHMvTGluZ3Vvc2l0eS9MaW5ndW9zaXR5L25vZGVfbW9kdWxlcy8ucG5wbS9kb2N4dGVtcGxhdGVyQDMuNjAuMi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy9tb2R1bGVzL3NwYWNlLXByZXNlcnZlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soYSwgbikgeyBpZiAoIShhIGluc3RhbmNlb2YgbikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHsgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7IHZhciBvID0gclt0XTsgby5lbnVtZXJhYmxlID0gby5lbnVtZXJhYmxlIHx8ICExLCBvLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gbyAmJiAoby53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIF90b1Byb3BlcnR5S2V5KG8ua2V5KSwgbyk7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKGUsIHIsIHQpIHsgcmV0dXJuIHIgJiYgX2RlZmluZVByb3BlcnRpZXMoZS5wcm90b3R5cGUsIHIpLCB0ICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHQpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogITEgfSksIGU7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZSh0LCByKSB7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YodCkgfHwgIXQpIHJldHVybiB0OyB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHZvaWQgMCAhPT0gZSkgeyB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZihpKSkgcmV0dXJuIGk7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpOyB9XG52YXIgd3JhcHBlciA9IHJlcXVpcmUoXCIuLi9tb2R1bGUtd3JhcHBlci5qc1wiKTtcbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoXCIuLi9kb2MtdXRpbHMuanNcIiksXG4gIGlzVGV4dFN0YXJ0ID0gX3JlcXVpcmUuaXNUZXh0U3RhcnQsXG4gIGlzVGV4dEVuZCA9IF9yZXF1aXJlLmlzVGV4dEVuZCxcbiAgZW5kc1dpdGggPSBfcmVxdWlyZS5lbmRzV2l0aCxcbiAgc3RhcnRzV2l0aCA9IF9yZXF1aXJlLnN0YXJ0c1dpdGg7XG52YXIgd1RwcmVzZXJ2ZSA9ICc8dzp0IHhtbDpzcGFjZT1cInByZXNlcnZlXCI+JztcbnZhciB3VHByZXNlcnZlbGVuID0gd1RwcmVzZXJ2ZS5sZW5ndGg7XG52YXIgd3RFbmQgPSBcIjwvdzp0PlwiO1xudmFyIHd0RW5kbGVuID0gd3RFbmQubGVuZ3RoO1xuZnVuY3Rpb24gaXNXdFN0YXJ0KHBhcnQpIHtcbiAgcmV0dXJuIGlzVGV4dFN0YXJ0KHBhcnQpICYmIHBhcnQudGFnID09PSBcInc6dFwiO1xufVxuZnVuY3Rpb24gYWRkWE1MUHJlc2VydmUoY2h1bmssIGluZGV4KSB7XG4gIHZhciB0YWcgPSBjaHVua1tpbmRleF0udmFsdWU7XG4gIGlmIChjaHVua1tpbmRleCArIDFdLnZhbHVlID09PSBcIjwvdzp0PlwiKSB7XG4gICAgcmV0dXJuIHRhZztcbiAgfVxuICBpZiAodGFnLmluZGV4T2YoJ3htbDpzcGFjZT1cInByZXNlcnZlXCInKSAhPT0gLTEpIHtcbiAgICByZXR1cm4gdGFnO1xuICB9XG4gIHJldHVybiB0YWcuc3Vic3RyKDAsIHRhZy5sZW5ndGggLSAxKSArICcgeG1sOnNwYWNlPVwicHJlc2VydmVcIj4nO1xufVxuZnVuY3Rpb24gaXNJbnNpZGVMb29wKG1ldGEsIGNodW5rKSB7XG4gIHJldHVybiBtZXRhICYmIG1ldGEuYmFzZVBhcnQgJiYgY2h1bmsubGVuZ3RoID4gMTtcbn1cbnZhciBTcGFjZVByZXNlcnZlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3BhY2VQcmVzZXJ2ZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3BhY2VQcmVzZXJ2ZSk7XG4gICAgdGhpcy5uYW1lID0gXCJTcGFjZVByZXNlcnZlTW9kdWxlXCI7XG4gIH1cbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhTcGFjZVByZXNlcnZlLCBbe1xuICAgIGtleTogXCJwb3N0cGFyc2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcG9zdHBhcnNlKHBvc3RwYXJzZWQsIG1ldGEpIHtcbiAgICAgIHZhciBjaHVuayA9IFtdLFxuICAgICAgICBpblRleHRUYWcgPSBmYWxzZSxcbiAgICAgICAgZW5kTGluZGV4ID0gMCxcbiAgICAgICAgbGFzdFRleHRUYWcgPSAwO1xuICAgICAgZnVuY3Rpb24gaXNTdGFydGluZ1BsYWNlSG9sZGVyKHBhcnQsIGNodW5rKSB7XG4gICAgICAgIHJldHVybiBwYXJ0LnR5cGUgPT09IFwicGxhY2Vob2xkZXJcIiAmJiBjaHVuay5sZW5ndGggPiAxO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHBvc3RwYXJzZWQucmVkdWNlKGZ1bmN0aW9uIChwb3N0cGFyc2VkLCBwYXJ0KSB7XG4gICAgICAgIGlmIChpc1d0U3RhcnQocGFydCkpIHtcbiAgICAgICAgICBpblRleHRUYWcgPSB0cnVlO1xuICAgICAgICAgIGxhc3RUZXh0VGFnID0gY2h1bmsubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaW5UZXh0VGFnKSB7XG4gICAgICAgICAgcG9zdHBhcnNlZC5wdXNoKHBhcnQpO1xuICAgICAgICAgIHJldHVybiBwb3N0cGFyc2VkO1xuICAgICAgICB9XG4gICAgICAgIGNodW5rLnB1c2gocGFydCk7XG4gICAgICAgIGlmIChpc0luc2lkZUxvb3AobWV0YSwgY2h1bmspKSB7XG4gICAgICAgICAgZW5kTGluZGV4ID0gbWV0YS5iYXNlUGFydC5lbmRMaW5kZXg7XG4gICAgICAgICAgY2h1bmtbMF0udmFsdWUgPSBhZGRYTUxQcmVzZXJ2ZShjaHVuaywgMCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzU3RhcnRpbmdQbGFjZUhvbGRlcihwYXJ0LCBjaHVuaykpIHtcbiAgICAgICAgICBjaHVua1tsYXN0VGV4dFRhZ10udmFsdWUgPSBhZGRYTUxQcmVzZXJ2ZShjaHVuaywgbGFzdFRleHRUYWcpO1xuICAgICAgICAgIGVuZExpbmRleCA9IHBhcnQuZW5kTGluZGV4O1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1RleHRFbmQocGFydCkgJiYgcGFydC5sSW5kZXggPiBlbmRMaW5kZXgpIHtcbiAgICAgICAgICBpZiAoZW5kTGluZGV4ICE9PSAwKSB7XG4gICAgICAgICAgICBjaHVua1tsYXN0VGV4dFRhZ10udmFsdWUgPSBhZGRYTUxQcmVzZXJ2ZShjaHVuaywgbGFzdFRleHRUYWcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShwb3N0cGFyc2VkLCBjaHVuayk7XG4gICAgICAgICAgY2h1bmsgPSBbXTtcbiAgICAgICAgICBpblRleHRUYWcgPSBmYWxzZTtcbiAgICAgICAgICBlbmRMaW5kZXggPSAwO1xuICAgICAgICAgIGxhc3RUZXh0VGFnID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcG9zdHBhcnNlZDtcbiAgICAgIH0sIFtdKTtcbiAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHJlc3VsdCwgY2h1bmspO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicG9zdHJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwb3N0cmVuZGVyKHBhcnRzKSB7XG4gICAgICB2YXIgbGFzdE5vbkVtcHR5ID0gXCJcIjtcbiAgICAgIHZhciBsYXN0Tm9uRW1wdHlJbmRleCA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gcGFydHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdmFyIHAgPSBwYXJ0c1tpXTtcbiAgICAgICAgaWYgKHAgPT09IFwiXCIpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZW5kc1dpdGgobGFzdE5vbkVtcHR5LCB3VHByZXNlcnZlKSAmJiBzdGFydHNXaXRoKHAsIHd0RW5kKSkge1xuICAgICAgICAgIHBhcnRzW2xhc3ROb25FbXB0eUluZGV4XSA9IGxhc3ROb25FbXB0eS5zdWJzdHIoMCwgbGFzdE5vbkVtcHR5Lmxlbmd0aCAtIHdUcHJlc2VydmVsZW4pICsgXCI8dzp0Lz5cIjtcbiAgICAgICAgICBwID0gcC5zdWJzdHIod3RFbmRsZW4pO1xuICAgICAgICB9XG4gICAgICAgIGxhc3ROb25FbXB0eSA9IHA7XG4gICAgICAgIGxhc3ROb25FbXB0eUluZGV4ID0gaTtcbiAgICAgICAgcGFydHNbaV0gPSBwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHBhcnRzO1xuICAgIH1cbiAgfV0pO1xufSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB3cmFwcGVyKG5ldyBTcGFjZVByZXNlcnZlKCkpO1xufTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/modules/space-preserve.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/parser.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/parser.js ***!
  \*****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nvar _require = __webpack_require__(/*! ./doc-utils.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/doc-utils.js\"),\n  wordToUtf8 = _require.wordToUtf8;\nvar _require2 = __webpack_require__(/*! ./prefix-matcher.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/prefix-matcher.js\"),\n  match = _require2.match,\n  getValue = _require2.getValue,\n  getValues = _require2.getValues;\nfunction getMatchers(modules, options) {\n  var matchers = [];\n  for (var _i2 = 0; _i2 < modules.length; _i2++) {\n    var _module = modules[_i2];\n    if (_module.matchers) {\n      var mmm = _module.matchers(options);\n      if (!(mmm instanceof Array)) {\n        throw new Error(\"module matcher returns a non array\");\n      }\n      matchers.push.apply(matchers, _toConsumableArray(mmm));\n    }\n  }\n  return matchers;\n}\nfunction getMatches(matchers, placeHolderContent, options) {\n  var matches = [];\n  for (var _i4 = 0; _i4 < matchers.length; _i4++) {\n    var matcher = matchers[_i4];\n    var _matcher = _slicedToArray(matcher, 2),\n      prefix = _matcher[0],\n      _module2 = _matcher[1];\n    var properties = matcher[2] || {};\n    if (options.match(prefix, placeHolderContent)) {\n      var values = options.getValues(prefix, placeHolderContent);\n      if (typeof properties === \"function\") {\n        properties = properties(values);\n      }\n      if (!properties.value) {\n        var _values = _slicedToArray(values, 2);\n        properties.value = _values[1];\n      }\n      matches.push(_objectSpread({\n        type: \"placeholder\",\n        prefix: prefix,\n        module: _module2,\n        onMatch: properties.onMatch,\n        priority: properties.priority\n      }, properties));\n    }\n  }\n  return matches;\n}\nfunction moduleParse(placeHolderContent, options) {\n  var modules = options.modules;\n  var startOffset = options.startOffset;\n  var endLindex = options.lIndex;\n  var moduleParsed;\n  options.offset = startOffset;\n  options.match = match;\n  options.getValue = getValue;\n  options.getValues = getValues;\n  var matchers = getMatchers(modules, options);\n  var matches = getMatches(matchers, placeHolderContent, options);\n  if (matches.length > 0) {\n    var bestMatch = null;\n    for (var _i6 = 0; _i6 < matches.length; _i6++) {\n      var _match = matches[_i6];\n      _match.priority || (_match.priority = -_match.value.length);\n      if (!bestMatch || _match.priority > bestMatch.priority) {\n        bestMatch = _match;\n      }\n    }\n    bestMatch.offset = startOffset;\n    delete bestMatch.priority;\n    bestMatch.endLindex = endLindex;\n    bestMatch.lIndex = endLindex;\n    bestMatch.raw = placeHolderContent;\n    if (bestMatch.onMatch) {\n      bestMatch.onMatch(bestMatch);\n    }\n    delete bestMatch.onMatch;\n    delete bestMatch.prefix;\n    return bestMatch;\n  }\n  for (var _i8 = 0; _i8 < modules.length; _i8++) {\n    var _module3 = modules[_i8];\n    moduleParsed = _module3.parse(placeHolderContent, options);\n    if (moduleParsed) {\n      moduleParsed.offset = startOffset;\n      moduleParsed.endLindex = endLindex;\n      moduleParsed.lIndex = endLindex;\n      moduleParsed.raw = placeHolderContent;\n      return moduleParsed;\n    }\n  }\n  return {\n    type: \"placeholder\",\n    value: placeHolderContent,\n    offset: startOffset,\n    endLindex: endLindex,\n    lIndex: endLindex\n  };\n}\nvar parser = {\n  preparse: function preparse(parsed, modules, options) {\n    function preparse(parsed, options) {\n      for (var _i10 = 0; _i10 < modules.length; _i10++) {\n        var _module4 = modules[_i10];\n        parsed = _module4.preparse(parsed, options) || parsed;\n      }\n      return parsed;\n    }\n    return preparse(parsed, options);\n  },\n  parse: function parse(lexed, modules, options) {\n    var inPlaceHolder = false;\n    var placeHolderContent = \"\";\n    var startOffset;\n    var tailParts = [];\n    var droppedTags = options.fileTypeConfig.droppedTagsInsidePlaceholder || [];\n    return lexed.reduce(function (parsed, token) {\n      if (token.type === \"delimiter\") {\n        inPlaceHolder = token.position === \"start\";\n        if (token.position === \"end\") {\n          options.parse = function (placeHolderContent) {\n            return moduleParse(placeHolderContent, _objectSpread(_objectSpread(_objectSpread({}, options), token), {}, {\n              startOffset: startOffset,\n              modules: modules\n            }));\n          };\n          parsed.push(options.parse(wordToUtf8(placeHolderContent)));\n          Array.prototype.push.apply(parsed, tailParts);\n          tailParts = [];\n        }\n        if (token.position === \"start\") {\n          tailParts = [];\n          startOffset = token.offset;\n        }\n        placeHolderContent = \"\";\n        return parsed;\n      }\n      if (!inPlaceHolder) {\n        parsed.push(token);\n        return parsed;\n      }\n      if (token.type !== \"content\" || token.position !== \"insidetag\") {\n        if (droppedTags.indexOf(token.tag) !== -1) {\n          return parsed;\n        }\n        tailParts.push(token);\n        return parsed;\n      }\n      placeHolderContent += token.value;\n      return parsed;\n    }, []);\n  },\n  postparse: function postparse(postparsed, modules, options) {\n    function getTraits(traitName, postparsed) {\n      return modules.map(function (module) {\n        return module.getTraits(traitName, postparsed);\n      });\n    }\n    var errors = [];\n    function _postparse(postparsed, options) {\n      return modules.reduce(function (postparsed, module) {\n        var r = module.postparse(postparsed, _objectSpread(_objectSpread({}, options), {}, {\n          postparse: function postparse(parsed, opts) {\n            return _postparse(parsed, _objectSpread(_objectSpread({}, options), opts));\n          },\n          getTraits: getTraits\n        }));\n        if (r == null) {\n          return postparsed;\n        }\n        if (r.errors) {\n          Array.prototype.push.apply(errors, r.errors);\n          return r.postparsed;\n        }\n        return r;\n      }, postparsed);\n    }\n    return {\n      postparsed: _postparse(postparsed, options),\n      errors: errors\n    };\n  }\n};\nmodule.exports = parser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/postrender.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/postrender.js ***!
  \*********************************************************************************************/
/***/ ((module) => {

eval("\n\n/*\n * Convert string to array (typed, when possible)\n * Stryker disable all : because this is a utility function that was copied\n * from\n * https://github.com/open-xml-templating/pizzip/blob/34a840553c604980859dc6d0dcd1f89b6e5527b3/es6/utf8.js#L33\n */\nfunction string2buf(str) {\n  var c,\n    c2,\n    mPos,\n    i,\n    bufLen = 0;\n  var strLen = str.length;\n\n  // count binary size\n  for (mPos = 0; mPos < strLen; mPos++) {\n    c = str.charCodeAt(mPos);\n    if ((c & 0xfc00) === 0xd800 && mPos + 1 < strLen) {\n      c2 = str.charCodeAt(mPos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);\n        mPos++;\n      }\n    }\n    bufLen += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  var buf = new Uint8Array(bufLen);\n\n  // convert\n  for (i = 0, mPos = 0; i < bufLen; mPos++) {\n    c = str.charCodeAt(mPos);\n    if ((c & 0xfc00) === 0xd800 && mPos + 1 < strLen) {\n      c2 = str.charCodeAt(mPos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);\n        mPos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xc0 | c >>> 6;\n      buf[i++] = 0x80 | c & 0x3f;\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xe0 | c >>> 12;\n      buf[i++] = 0x80 | c >>> 6 & 0x3f;\n      buf[i++] = 0x80 | c & 0x3f;\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | c >>> 18;\n      buf[i++] = 0x80 | c >>> 12 & 0x3f;\n      buf[i++] = 0x80 | c >>> 6 & 0x3f;\n      buf[i++] = 0x80 | c & 0x3f;\n    }\n  }\n  return buf;\n}\n// Stryker restore all\n\nfunction postrender(parts, options) {\n  for (var _i2 = 0, _options$modules2 = options.modules; _i2 < _options$modules2.length; _i2++) {\n    var _module = _options$modules2[_i2];\n    parts = _module.postrender(parts, options);\n  }\n  var fullLength = 0;\n  var newParts = options.joinUncorrupt(parts, options);\n  var longStr = \"\";\n  var lenStr = 0;\n  var maxCompact = 65536;\n  var uintArrays = [];\n  for (var i = 0, len = newParts.length; i < len; i++) {\n    var part = newParts[i];\n\n    /*\n     * This condition should be hit in the integration test at :\n     * it(\"should not regress with long file (hit maxCompact value of 65536)\", function () {\n     * Stryker disable all : because this is an optimisation that won't make any tests fail\n     */\n    if (part.length + lenStr > maxCompact) {\n      var _arr = string2buf(longStr);\n      fullLength += _arr.length;\n      uintArrays.push(_arr);\n      longStr = \"\";\n    }\n    // Stryker restore all\n\n    longStr += part;\n    lenStr += part.length;\n    delete newParts[i];\n  }\n  var arr = string2buf(longStr);\n  fullLength += arr.length;\n  uintArrays.push(arr);\n  var array = new Uint8Array(fullLength);\n  var j = 0;\n\n  // Stryker disable all : because this is an optimisation that won't make any tests fail\n  for (var _i4 = 0; _i4 < uintArrays.length; _i4++) {\n    var buf = uintArrays[_i4];\n    for (var _i5 = 0; _i5 < buf.length; ++_i5) {\n      array[_i5 + j] = buf[_i5];\n    }\n    j += buf.length;\n  } // Stryker restore all\n  return array;\n}\nmodule.exports = postrender;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZG9jeHRlbXBsYXRlckAzLjYwLjIvbm9kZV9tb2R1bGVzL2RvY3h0ZW1wbGF0ZXIvanMvcG9zdHJlbmRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQixlQUFlO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSx3QkFBd0IsWUFBWTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHlEQUF5RCxnQ0FBZ0M7QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLFNBQVM7QUFDbEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9CQUFvQix5QkFBeUI7QUFDN0M7QUFDQSxzQkFBc0Isa0JBQWtCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9icmFuZG9uYnJld2VyL0RvY3VtZW50cy9MaW5ndW9zaXR5L0xpbmd1b3NpdHkvbm9kZV9tb2R1bGVzLy5wbnBtL2RvY3h0ZW1wbGF0ZXJAMy42MC4yL25vZGVfbW9kdWxlcy9kb2N4dGVtcGxhdGVyL2pzL3Bvc3RyZW5kZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gKiBDb252ZXJ0IHN0cmluZyB0byBhcnJheSAodHlwZWQsIHdoZW4gcG9zc2libGUpXG4gKiBTdHJ5a2VyIGRpc2FibGUgYWxsIDogYmVjYXVzZSB0aGlzIGlzIGEgdXRpbGl0eSBmdW5jdGlvbiB0aGF0IHdhcyBjb3BpZWRcbiAqIGZyb21cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuLXhtbC10ZW1wbGF0aW5nL3BpenppcC9ibG9iLzM0YTg0MDU1M2M2MDQ5ODA4NTlkYzZkMGRjZDFmODliNmU1NTI3YjMvZXM2L3V0ZjguanMjTDMzXG4gKi9cbmZ1bmN0aW9uIHN0cmluZzJidWYoc3RyKSB7XG4gIHZhciBjLFxuICAgIGMyLFxuICAgIG1Qb3MsXG4gICAgaSxcbiAgICBidWZMZW4gPSAwO1xuICB2YXIgc3RyTGVuID0gc3RyLmxlbmd0aDtcblxuICAvLyBjb3VudCBiaW5hcnkgc2l6ZVxuICBmb3IgKG1Qb3MgPSAwOyBtUG9zIDwgc3RyTGVuOyBtUG9zKyspIHtcbiAgICBjID0gc3RyLmNoYXJDb2RlQXQobVBvcyk7XG4gICAgaWYgKChjICYgMHhmYzAwKSA9PT0gMHhkODAwICYmIG1Qb3MgKyAxIDwgc3RyTGVuKSB7XG4gICAgICBjMiA9IHN0ci5jaGFyQ29kZUF0KG1Qb3MgKyAxKTtcbiAgICAgIGlmICgoYzIgJiAweGZjMDApID09PSAweGRjMDApIHtcbiAgICAgICAgYyA9IDB4MTAwMDAgKyAoYyAtIDB4ZDgwMCA8PCAxMCkgKyAoYzIgLSAweGRjMDApO1xuICAgICAgICBtUG9zKys7XG4gICAgICB9XG4gICAgfVxuICAgIGJ1ZkxlbiArPSBjIDwgMHg4MCA/IDEgOiBjIDwgMHg4MDAgPyAyIDogYyA8IDB4MTAwMDAgPyAzIDogNDtcbiAgfVxuXG4gIC8vIGFsbG9jYXRlIGJ1ZmZlclxuICB2YXIgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYnVmTGVuKTtcblxuICAvLyBjb252ZXJ0XG4gIGZvciAoaSA9IDAsIG1Qb3MgPSAwOyBpIDwgYnVmTGVuOyBtUG9zKyspIHtcbiAgICBjID0gc3RyLmNoYXJDb2RlQXQobVBvcyk7XG4gICAgaWYgKChjICYgMHhmYzAwKSA9PT0gMHhkODAwICYmIG1Qb3MgKyAxIDwgc3RyTGVuKSB7XG4gICAgICBjMiA9IHN0ci5jaGFyQ29kZUF0KG1Qb3MgKyAxKTtcbiAgICAgIGlmICgoYzIgJiAweGZjMDApID09PSAweGRjMDApIHtcbiAgICAgICAgYyA9IDB4MTAwMDAgKyAoYyAtIDB4ZDgwMCA8PCAxMCkgKyAoYzIgLSAweGRjMDApO1xuICAgICAgICBtUG9zKys7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjIDwgMHg4MCkge1xuICAgICAgLyogb25lIGJ5dGUgKi9cbiAgICAgIGJ1ZltpKytdID0gYztcbiAgICB9IGVsc2UgaWYgKGMgPCAweDgwMCkge1xuICAgICAgLyogdHdvIGJ5dGVzICovXG4gICAgICBidWZbaSsrXSA9IDB4YzAgfCBjID4+PiA2O1xuICAgICAgYnVmW2krK10gPSAweDgwIHwgYyAmIDB4M2Y7XG4gICAgfSBlbHNlIGlmIChjIDwgMHgxMDAwMCkge1xuICAgICAgLyogdGhyZWUgYnl0ZXMgKi9cbiAgICAgIGJ1ZltpKytdID0gMHhlMCB8IGMgPj4+IDEyO1xuICAgICAgYnVmW2krK10gPSAweDgwIHwgYyA+Pj4gNiAmIDB4M2Y7XG4gICAgICBidWZbaSsrXSA9IDB4ODAgfCBjICYgMHgzZjtcbiAgICB9IGVsc2Uge1xuICAgICAgLyogZm91ciBieXRlcyAqL1xuICAgICAgYnVmW2krK10gPSAweGYwIHwgYyA+Pj4gMTg7XG4gICAgICBidWZbaSsrXSA9IDB4ODAgfCBjID4+PiAxMiAmIDB4M2Y7XG4gICAgICBidWZbaSsrXSA9IDB4ODAgfCBjID4+PiA2ICYgMHgzZjtcbiAgICAgIGJ1ZltpKytdID0gMHg4MCB8IGMgJiAweDNmO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYnVmO1xufVxuLy8gU3RyeWtlciByZXN0b3JlIGFsbFxuXG5mdW5jdGlvbiBwb3N0cmVuZGVyKHBhcnRzLCBvcHRpb25zKSB7XG4gIGZvciAodmFyIF9pMiA9IDAsIF9vcHRpb25zJG1vZHVsZXMyID0gb3B0aW9ucy5tb2R1bGVzOyBfaTIgPCBfb3B0aW9ucyRtb2R1bGVzMi5sZW5ndGg7IF9pMisrKSB7XG4gICAgdmFyIF9tb2R1bGUgPSBfb3B0aW9ucyRtb2R1bGVzMltfaTJdO1xuICAgIHBhcnRzID0gX21vZHVsZS5wb3N0cmVuZGVyKHBhcnRzLCBvcHRpb25zKTtcbiAgfVxuICB2YXIgZnVsbExlbmd0aCA9IDA7XG4gIHZhciBuZXdQYXJ0cyA9IG9wdGlvbnMuam9pblVuY29ycnVwdChwYXJ0cywgb3B0aW9ucyk7XG4gIHZhciBsb25nU3RyID0gXCJcIjtcbiAgdmFyIGxlblN0ciA9IDA7XG4gIHZhciBtYXhDb21wYWN0ID0gNjU1MzY7XG4gIHZhciB1aW50QXJyYXlzID0gW107XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBuZXdQYXJ0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIHZhciBwYXJ0ID0gbmV3UGFydHNbaV07XG5cbiAgICAvKlxuICAgICAqIFRoaXMgY29uZGl0aW9uIHNob3VsZCBiZSBoaXQgaW4gdGhlIGludGVncmF0aW9uIHRlc3QgYXQgOlxuICAgICAqIGl0KFwic2hvdWxkIG5vdCByZWdyZXNzIHdpdGggbG9uZyBmaWxlIChoaXQgbWF4Q29tcGFjdCB2YWx1ZSBvZiA2NTUzNilcIiwgZnVuY3Rpb24gKCkge1xuICAgICAqIFN0cnlrZXIgZGlzYWJsZSBhbGwgOiBiZWNhdXNlIHRoaXMgaXMgYW4gb3B0aW1pc2F0aW9uIHRoYXQgd29uJ3QgbWFrZSBhbnkgdGVzdHMgZmFpbFxuICAgICAqL1xuICAgIGlmIChwYXJ0Lmxlbmd0aCArIGxlblN0ciA+IG1heENvbXBhY3QpIHtcbiAgICAgIHZhciBfYXJyID0gc3RyaW5nMmJ1Zihsb25nU3RyKTtcbiAgICAgIGZ1bGxMZW5ndGggKz0gX2Fyci5sZW5ndGg7XG4gICAgICB1aW50QXJyYXlzLnB1c2goX2Fycik7XG4gICAgICBsb25nU3RyID0gXCJcIjtcbiAgICB9XG4gICAgLy8gU3RyeWtlciByZXN0b3JlIGFsbFxuXG4gICAgbG9uZ1N0ciArPSBwYXJ0O1xuICAgIGxlblN0ciArPSBwYXJ0Lmxlbmd0aDtcbiAgICBkZWxldGUgbmV3UGFydHNbaV07XG4gIH1cbiAgdmFyIGFyciA9IHN0cmluZzJidWYobG9uZ1N0cik7XG4gIGZ1bGxMZW5ndGggKz0gYXJyLmxlbmd0aDtcbiAgdWludEFycmF5cy5wdXNoKGFycik7XG4gIHZhciBhcnJheSA9IG5ldyBVaW50OEFycmF5KGZ1bGxMZW5ndGgpO1xuICB2YXIgaiA9IDA7XG5cbiAgLy8gU3RyeWtlciBkaXNhYmxlIGFsbCA6IGJlY2F1c2UgdGhpcyBpcyBhbiBvcHRpbWlzYXRpb24gdGhhdCB3b24ndCBtYWtlIGFueSB0ZXN0cyBmYWlsXG4gIGZvciAodmFyIF9pNCA9IDA7IF9pNCA8IHVpbnRBcnJheXMubGVuZ3RoOyBfaTQrKykge1xuICAgIHZhciBidWYgPSB1aW50QXJyYXlzW19pNF07XG4gICAgZm9yICh2YXIgX2k1ID0gMDsgX2k1IDwgYnVmLmxlbmd0aDsgKytfaTUpIHtcbiAgICAgIGFycmF5W19pNSArIGpdID0gYnVmW19pNV07XG4gICAgfVxuICAgIGogKz0gYnVmLmxlbmd0aDtcbiAgfSAvLyBTdHJ5a2VyIHJlc3RvcmUgYWxsXG4gIHJldHVybiBhcnJheTtcbn1cbm1vZHVsZS5leHBvcnRzID0gcG9zdHJlbmRlcjsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/postrender.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/prefix-matcher.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/prefix-matcher.js ***!
  \*************************************************************************************************/
/***/ ((module) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nvar nbspRegex = new RegExp(String.fromCharCode(160), \"g\");\nfunction replaceNbsps(str) {\n  return str.replace(nbspRegex, \" \");\n}\nfunction match(condition, placeHolderContent) {\n  var type = _typeof(condition);\n  if (type === \"string\") {\n    return replaceNbsps(placeHolderContent.substr(0, condition.length)) === condition;\n  }\n  if (condition instanceof RegExp) {\n    return condition.test(replaceNbsps(placeHolderContent));\n  }\n  if (type === \"function\") {\n    return !!condition(placeHolderContent);\n  }\n}\nfunction getValue(condition, placeHolderContent) {\n  var type = _typeof(condition);\n  if (type === \"string\") {\n    return replaceNbsps(placeHolderContent).substr(condition.length);\n  }\n  if (condition instanceof RegExp) {\n    return replaceNbsps(placeHolderContent).match(condition)[1];\n  }\n  if (type === \"function\") {\n    return condition(placeHolderContent);\n  }\n}\nfunction getValues(condition, placeHolderContent) {\n  var type = _typeof(condition);\n  if (type === \"string\") {\n    return [placeHolderContent, replaceNbsps(placeHolderContent).substr(condition.length)];\n  }\n  if (condition instanceof RegExp) {\n    return replaceNbsps(placeHolderContent).match(condition);\n  }\n  if (type === \"function\") {\n    return [placeHolderContent, condition(placeHolderContent)];\n  }\n}\nmodule.exports = {\n  match: match,\n  getValue: getValue,\n  getValues: getValues\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZG9jeHRlbXBsYXRlckAzLjYwLjIvbm9kZV9tb2R1bGVzL2RvY3h0ZW1wbGF0ZXIvanMvcHJlZml4LW1hdGNoZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsc0JBQXNCLDJCQUEyQixvR0FBb0csbUJBQW1CLGlCQUFpQixzSEFBc0g7QUFDL1M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvYnJhbmRvbmJyZXdlci9Eb2N1bWVudHMvTGluZ3Vvc2l0eS9MaW5ndW9zaXR5L25vZGVfbW9kdWxlcy8ucG5wbS9kb2N4dGVtcGxhdGVyQDMuNjAuMi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy9wcmVmaXgtbWF0Y2hlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxudmFyIG5ic3BSZWdleCA9IG5ldyBSZWdFeHAoU3RyaW5nLmZyb21DaGFyQ29kZSgxNjApLCBcImdcIik7XG5mdW5jdGlvbiByZXBsYWNlTmJzcHMoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShuYnNwUmVnZXgsIFwiIFwiKTtcbn1cbmZ1bmN0aW9uIG1hdGNoKGNvbmRpdGlvbiwgcGxhY2VIb2xkZXJDb250ZW50KSB7XG4gIHZhciB0eXBlID0gX3R5cGVvZihjb25kaXRpb24pO1xuICBpZiAodHlwZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiByZXBsYWNlTmJzcHMocGxhY2VIb2xkZXJDb250ZW50LnN1YnN0cigwLCBjb25kaXRpb24ubGVuZ3RoKSkgPT09IGNvbmRpdGlvbjtcbiAgfVxuICBpZiAoY29uZGl0aW9uIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIGNvbmRpdGlvbi50ZXN0KHJlcGxhY2VOYnNwcyhwbGFjZUhvbGRlckNvbnRlbnQpKTtcbiAgfVxuICBpZiAodHlwZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuICEhY29uZGl0aW9uKHBsYWNlSG9sZGVyQ29udGVudCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFZhbHVlKGNvbmRpdGlvbiwgcGxhY2VIb2xkZXJDb250ZW50KSB7XG4gIHZhciB0eXBlID0gX3R5cGVvZihjb25kaXRpb24pO1xuICBpZiAodHlwZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiByZXBsYWNlTmJzcHMocGxhY2VIb2xkZXJDb250ZW50KS5zdWJzdHIoY29uZGl0aW9uLmxlbmd0aCk7XG4gIH1cbiAgaWYgKGNvbmRpdGlvbiBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiByZXBsYWNlTmJzcHMocGxhY2VIb2xkZXJDb250ZW50KS5tYXRjaChjb25kaXRpb24pWzFdO1xuICB9XG4gIGlmICh0eXBlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gY29uZGl0aW9uKHBsYWNlSG9sZGVyQ29udGVudCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFZhbHVlcyhjb25kaXRpb24sIHBsYWNlSG9sZGVyQ29udGVudCkge1xuICB2YXIgdHlwZSA9IF90eXBlb2YoY29uZGl0aW9uKTtcbiAgaWYgKHR5cGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gW3BsYWNlSG9sZGVyQ29udGVudCwgcmVwbGFjZU5ic3BzKHBsYWNlSG9sZGVyQ29udGVudCkuc3Vic3RyKGNvbmRpdGlvbi5sZW5ndGgpXTtcbiAgfVxuICBpZiAoY29uZGl0aW9uIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHJlcGxhY2VOYnNwcyhwbGFjZUhvbGRlckNvbnRlbnQpLm1hdGNoKGNvbmRpdGlvbik7XG4gIH1cbiAgaWYgKHR5cGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiBbcGxhY2VIb2xkZXJDb250ZW50LCBjb25kaXRpb24ocGxhY2VIb2xkZXJDb250ZW50KV07XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBtYXRjaDogbWF0Y2gsXG4gIGdldFZhbHVlOiBnZXRWYWx1ZSxcbiAgZ2V0VmFsdWVzOiBnZXRWYWx1ZXNcbn07Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/prefix-matcher.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/render.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/render.js ***!
  \*****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar _require = __webpack_require__(/*! ./errors.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/errors.js\"),\n  throwUnimplementedTagType = _require.throwUnimplementedTagType,\n  XTScopeParserError = _require.XTScopeParserError;\nvar _require2 = __webpack_require__(/*! ./doc-utils.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/doc-utils.js\"),\n  pushArray = _require2.pushArray;\nvar getResolvedId = __webpack_require__(/*! ./get-resolved-id.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/get-resolved-id.js\");\nfunction moduleRender(part, options) {\n  for (var _i2 = 0, _options$modules2 = options.modules; _i2 < _options$modules2.length; _i2++) {\n    var _module = _options$modules2[_i2];\n    var moduleRendered = _module.render(part, options);\n    if (moduleRendered) {\n      return moduleRendered;\n    }\n  }\n  return false;\n}\nfunction render(options) {\n  var baseNullGetter = options.baseNullGetter;\n  var compiled = options.compiled,\n    scopeManager = options.scopeManager;\n  options.nullGetter = function (part, sm) {\n    return baseNullGetter(part, sm || scopeManager);\n  };\n  var errors = [];\n  var parts = compiled.map(function (part, i) {\n    options.index = i;\n    options.resolvedId = getResolvedId(part, options);\n    var moduleRendered;\n    try {\n      moduleRendered = moduleRender(part, options);\n    } catch (e) {\n      if (e instanceof XTScopeParserError) {\n        errors.push(e);\n        return part;\n      }\n      throw e;\n    }\n    if (moduleRendered) {\n      if (moduleRendered.errors) {\n        Array.prototype.push.apply(errors, moduleRendered.errors);\n      }\n      return moduleRendered;\n    }\n    if (part.type === \"content\" || part.type === \"tag\") {\n      return part;\n    }\n    throwUnimplementedTagType(part, i);\n  }).reduce(function (parts, _ref) {\n    var value = _ref.value;\n    if (value instanceof Array) {\n      pushArray(parts, value);\n    } else if (value) {\n      parts.push(value);\n    }\n    return parts;\n  }, []);\n  return {\n    errors: errors,\n    parts: parts\n  };\n}\nmodule.exports = render;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZG9jeHRlbXBsYXRlckAzLjYwLjIvbm9kZV9tb2R1bGVzL2RvY3h0ZW1wbGF0ZXIvanMvcmVuZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGVBQWUsbUJBQU8sQ0FBQyw0R0FBYTtBQUNwQztBQUNBO0FBQ0EsZ0JBQWdCLG1CQUFPLENBQUMsa0hBQWdCO0FBQ3hDO0FBQ0Esb0JBQW9CLG1CQUFPLENBQUMsOEhBQXNCO0FBQ2xEO0FBQ0EseURBQXlELGdDQUFnQztBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2JyYW5kb25icmV3ZXIvRG9jdW1lbnRzL0xpbmd1b3NpdHkvTGluZ3Vvc2l0eS9ub2RlX21vZHVsZXMvLnBucG0vZG9jeHRlbXBsYXRlckAzLjYwLjIvbm9kZV9tb2R1bGVzL2RvY3h0ZW1wbGF0ZXIvanMvcmVuZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKFwiLi9lcnJvcnMuanNcIiksXG4gIHRocm93VW5pbXBsZW1lbnRlZFRhZ1R5cGUgPSBfcmVxdWlyZS50aHJvd1VuaW1wbGVtZW50ZWRUYWdUeXBlLFxuICBYVFNjb3BlUGFyc2VyRXJyb3IgPSBfcmVxdWlyZS5YVFNjb3BlUGFyc2VyRXJyb3I7XG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZShcIi4vZG9jLXV0aWxzLmpzXCIpLFxuICBwdXNoQXJyYXkgPSBfcmVxdWlyZTIucHVzaEFycmF5O1xudmFyIGdldFJlc29sdmVkSWQgPSByZXF1aXJlKFwiLi9nZXQtcmVzb2x2ZWQtaWQuanNcIik7XG5mdW5jdGlvbiBtb2R1bGVSZW5kZXIocGFydCwgb3B0aW9ucykge1xuICBmb3IgKHZhciBfaTIgPSAwLCBfb3B0aW9ucyRtb2R1bGVzMiA9IG9wdGlvbnMubW9kdWxlczsgX2kyIDwgX29wdGlvbnMkbW9kdWxlczIubGVuZ3RoOyBfaTIrKykge1xuICAgIHZhciBfbW9kdWxlID0gX29wdGlvbnMkbW9kdWxlczJbX2kyXTtcbiAgICB2YXIgbW9kdWxlUmVuZGVyZWQgPSBfbW9kdWxlLnJlbmRlcihwYXJ0LCBvcHRpb25zKTtcbiAgICBpZiAobW9kdWxlUmVuZGVyZWQpIHtcbiAgICAgIHJldHVybiBtb2R1bGVSZW5kZXJlZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gcmVuZGVyKG9wdGlvbnMpIHtcbiAgdmFyIGJhc2VOdWxsR2V0dGVyID0gb3B0aW9ucy5iYXNlTnVsbEdldHRlcjtcbiAgdmFyIGNvbXBpbGVkID0gb3B0aW9ucy5jb21waWxlZCxcbiAgICBzY29wZU1hbmFnZXIgPSBvcHRpb25zLnNjb3BlTWFuYWdlcjtcbiAgb3B0aW9ucy5udWxsR2V0dGVyID0gZnVuY3Rpb24gKHBhcnQsIHNtKSB7XG4gICAgcmV0dXJuIGJhc2VOdWxsR2V0dGVyKHBhcnQsIHNtIHx8IHNjb3BlTWFuYWdlcik7XG4gIH07XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIHBhcnRzID0gY29tcGlsZWQubWFwKGZ1bmN0aW9uIChwYXJ0LCBpKSB7XG4gICAgb3B0aW9ucy5pbmRleCA9IGk7XG4gICAgb3B0aW9ucy5yZXNvbHZlZElkID0gZ2V0UmVzb2x2ZWRJZChwYXJ0LCBvcHRpb25zKTtcbiAgICB2YXIgbW9kdWxlUmVuZGVyZWQ7XG4gICAgdHJ5IHtcbiAgICAgIG1vZHVsZVJlbmRlcmVkID0gbW9kdWxlUmVuZGVyKHBhcnQsIG9wdGlvbnMpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlIGluc3RhbmNlb2YgWFRTY29wZVBhcnNlckVycm9yKSB7XG4gICAgICAgIGVycm9ycy5wdXNoKGUpO1xuICAgICAgICByZXR1cm4gcGFydDtcbiAgICAgIH1cbiAgICAgIHRocm93IGU7XG4gICAgfVxuICAgIGlmIChtb2R1bGVSZW5kZXJlZCkge1xuICAgICAgaWYgKG1vZHVsZVJlbmRlcmVkLmVycm9ycykge1xuICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShlcnJvcnMsIG1vZHVsZVJlbmRlcmVkLmVycm9ycyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbW9kdWxlUmVuZGVyZWQ7XG4gICAgfVxuICAgIGlmIChwYXJ0LnR5cGUgPT09IFwiY29udGVudFwiIHx8IHBhcnQudHlwZSA9PT0gXCJ0YWdcIikge1xuICAgICAgcmV0dXJuIHBhcnQ7XG4gICAgfVxuICAgIHRocm93VW5pbXBsZW1lbnRlZFRhZ1R5cGUocGFydCwgaSk7XG4gIH0pLnJlZHVjZShmdW5jdGlvbiAocGFydHMsIF9yZWYpIHtcbiAgICB2YXIgdmFsdWUgPSBfcmVmLnZhbHVlO1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICBwdXNoQXJyYXkocGFydHMsIHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlKSB7XG4gICAgICBwYXJ0cy5wdXNoKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnRzO1xuICB9LCBbXSk7XG4gIHJldHVybiB7XG4gICAgZXJyb3JzOiBlcnJvcnMsXG4gICAgcGFydHM6IHBhcnRzXG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IHJlbmRlcjsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/render.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/resolve.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/resolve.js ***!
  \******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar getResolvedId = __webpack_require__(/*! ./get-resolved-id.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/get-resolved-id.js\");\nfunction moduleResolve(part, options) {\n  for (var _i2 = 0, _options$modules2 = options.modules; _i2 < _options$modules2.length; _i2++) {\n    var _module = _options$modules2[_i2];\n    var moduleResolved = _module.resolve(part, options);\n    if (moduleResolved) {\n      return moduleResolved;\n    }\n  }\n  return false;\n}\nfunction resolve(options) {\n  var resolved = [];\n  var baseNullGetter = options.baseNullGetter;\n  var compiled = options.compiled,\n    scopeManager = options.scopeManager;\n  options.nullGetter = function (part, sm) {\n    return baseNullGetter(part, sm || scopeManager);\n  };\n  options.resolved = resolved;\n  var errors = [];\n  return Promise.all(compiled.filter(function (part) {\n    return [\"content\", \"tag\"].indexOf(part.type) === -1;\n  }).reduce(function (promises, part) {\n    var moduleResolved = moduleResolve(part, _objectSpread(_objectSpread({}, options), {}, {\n      resolvedId: getResolvedId(part, options)\n    }));\n    var result;\n    if (moduleResolved) {\n      result = moduleResolved.then(function (value) {\n        resolved.push({\n          tag: part.value,\n          lIndex: part.lIndex,\n          value: value\n        });\n      });\n    } else if (part.type === \"placeholder\") {\n      result = scopeManager.getValueAsync(part.value, {\n        part: part\n      }).then(function (value) {\n        return value == null ? options.nullGetter(part) : value;\n      }).then(function (value) {\n        resolved.push({\n          tag: part.value,\n          lIndex: part.lIndex,\n          value: value\n        });\n        return value;\n      });\n    } else {\n      return;\n    }\n    promises.push(result[\"catch\"](function (e) {\n      if (e instanceof Array) {\n        errors.push.apply(errors, _toConsumableArray(e));\n      } else {\n        errors.push(e);\n      }\n    }));\n    return promises;\n  }, [])).then(function () {\n    return {\n      errors: errors,\n      resolved: resolved\n    };\n  });\n}\nmodule.exports = resolve;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/resolve.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/scope-manager.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/scope-manager.js ***!
  \************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar _require = __webpack_require__(/*! ./errors.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/errors.js\"),\n  getScopeParserExecutionError = _require.getScopeParserExecutionError;\nvar _require2 = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/utils.js\"),\n  last = _require2.last;\nvar _require3 = __webpack_require__(/*! ./doc-utils.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/doc-utils.js\"),\n  concatArrays = _require3.concatArrays;\nfunction find(list, fn) {\n  var length = list.length >>> 0;\n  var value;\n  for (var i = 0; i < length; i++) {\n    value = list[i];\n    if (fn.call(this, value, i, list)) {\n      return value;\n    }\n  }\n  return undefined;\n}\nfunction _getValue(tag, meta, num) {\n  var _this = this;\n  var scope = this.scopeList[num];\n  if (this.root.finishedResolving) {\n    var w = this.resolved;\n    var _loop = function _loop() {\n      var lIndex = _this.scopeLindex[i];\n      w = find(w, function (r) {\n        return r.lIndex === lIndex;\n      });\n      w = w.value[_this.scopePathItem[i]];\n    };\n    for (var i = this.resolveOffset, len = this.scopePath.length; i < len; i++) {\n      _loop();\n    }\n    return find(w, function (r) {\n      return meta.part.lIndex === r.lIndex;\n    }).value;\n  }\n  // search in the scopes (in reverse order) and keep the first defined value\n  var result;\n  var parser;\n  if (!this.cachedParsers || !meta.part) {\n    parser = this.parser(tag, {\n      tag: meta.part,\n      scopePath: this.scopePath\n    });\n  } else if (this.cachedParsers[meta.part.lIndex]) {\n    parser = this.cachedParsers[meta.part.lIndex];\n  } else {\n    parser = this.cachedParsers[meta.part.lIndex] = this.parser(tag, {\n      tag: meta.part,\n      scopePath: this.scopePath\n    });\n  }\n  try {\n    result = parser.get(scope, this.getContext(meta, num));\n  } catch (error) {\n    throw getScopeParserExecutionError({\n      tag: tag,\n      scope: scope,\n      error: error,\n      offset: meta.part.offset\n    });\n  }\n  if (result == null && num > 0) {\n    return _getValue.call(this, tag, meta, num - 1);\n  }\n  return result;\n}\nfunction _getValueAsync(tag, meta, num) {\n  var _this2 = this;\n  var scope = this.scopeList[num];\n  // search in the scopes (in reverse order) and keep the first defined value\n  var parser;\n  if (!this.cachedParsers || !meta.part) {\n    parser = this.parser(tag, {\n      tag: meta.part,\n      scopePath: this.scopePath\n    });\n  } else if (this.cachedParsers[meta.part.lIndex]) {\n    parser = this.cachedParsers[meta.part.lIndex];\n  } else {\n    parser = this.cachedParsers[meta.part.lIndex] = this.parser(tag, {\n      tag: meta.part,\n      scopePath: this.scopePath\n    });\n  }\n  return Promise.resolve().then(function () {\n    return parser.get(scope, _this2.getContext(meta, num));\n  })[\"catch\"](function (error) {\n    throw getScopeParserExecutionError({\n      tag: tag,\n      scope: scope,\n      error: error,\n      offset: meta.part.offset\n    });\n  }).then(function (result) {\n    if (result == null && num > 0) {\n      return _getValueAsync.call(_this2, tag, meta, num - 1);\n    }\n    return result;\n  });\n}\nvar ScopeManager = /*#__PURE__*/function () {\n  function ScopeManager(options) {\n    _classCallCheck(this, ScopeManager);\n    this.root = options.root || this;\n    this.resolveOffset = options.resolveOffset || 0;\n    this.scopePath = options.scopePath;\n    this.scopePathItem = options.scopePathItem;\n    this.scopePathLength = options.scopePathLength;\n    this.scopeList = options.scopeList;\n    this.scopeType = \"\";\n    this.scopeTypes = options.scopeTypes;\n    this.scopeLindex = options.scopeLindex;\n    this.parser = options.parser;\n    this.resolved = options.resolved;\n    this.cachedParsers = options.cachedParsers;\n  }\n  return _createClass(ScopeManager, [{\n    key: \"loopOver\",\n    value: function loopOver(tag, functor, inverted, meta) {\n      return this.loopOverValue(this.getValue(tag, meta), functor, inverted);\n    }\n  }, {\n    key: \"functorIfInverted\",\n    value: function functorIfInverted(inverted, functor, value, i, length) {\n      if (inverted) {\n        functor(value, i, length);\n      }\n      return inverted;\n    }\n  }, {\n    key: \"isValueFalsy\",\n    value: function isValueFalsy(value, type) {\n      return value == null || !value || type === \"[object Array]\" && value.length === 0;\n    }\n  }, {\n    key: \"loopOverValue\",\n    value: function loopOverValue(value, functor, inverted) {\n      if (this.root.finishedResolving) {\n        inverted = false;\n      }\n      var type = Object.prototype.toString.call(value);\n      if (this.isValueFalsy(value, type)) {\n        this.scopeType = false;\n        return this.functorIfInverted(inverted, functor, last(this.scopeList), 0, 1);\n      }\n      if (type === \"[object Array]\") {\n        this.scopeType = \"array\";\n        for (var i = 0; i < value.length; i++) {\n          this.functorIfInverted(!inverted, functor, value[i], i, value.length);\n        }\n        return true;\n      }\n      if (type === \"[object Object]\") {\n        this.scopeType = \"object\";\n        return this.functorIfInverted(!inverted, functor, value, 0, 1);\n      }\n      return this.functorIfInverted(!inverted, functor, last(this.scopeList), 0, 1);\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(tag, meta) {\n      var result = _getValue.call(this, tag, meta, this.scopeList.length - 1);\n      if (typeof result === \"function\") {\n        return result(this.scopeList[this.scopeList.length - 1], this);\n      }\n      return result;\n    }\n  }, {\n    key: \"getValueAsync\",\n    value: function getValueAsync(tag, meta) {\n      var _this3 = this;\n      return _getValueAsync.call(this, tag, meta, this.scopeList.length - 1).then(function (result) {\n        if (typeof result === \"function\") {\n          return result(_this3.scopeList[_this3.scopeList.length - 1], _this3);\n        }\n        return result;\n      });\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext(meta, num) {\n      return {\n        num: num,\n        meta: meta,\n        scopeList: this.scopeList,\n        resolved: this.resolved,\n        scopePath: this.scopePath,\n        scopeTypes: this.scopeTypes,\n        scopePathItem: this.scopePathItem,\n        scopePathLength: this.scopePathLength\n      };\n    }\n  }, {\n    key: \"createSubScopeManager\",\n    value: function createSubScopeManager(scope, tag, i, part, length) {\n      return new ScopeManager({\n        root: this.root,\n        resolveOffset: this.resolveOffset,\n        resolved: this.resolved,\n        parser: this.parser,\n        cachedParsers: this.cachedParsers,\n        scopeTypes: concatArrays([this.scopeTypes, [this.scopeType]]),\n        scopeList: concatArrays([this.scopeList, [scope]]),\n        scopePath: concatArrays([this.scopePath, [tag]]),\n        scopePathItem: concatArrays([this.scopePathItem, [i]]),\n        scopePathLength: concatArrays([this.scopePathLength, [length]]),\n        scopeLindex: concatArrays([this.scopeLindex, [part.lIndex]])\n      });\n    }\n  }]);\n}();\nmodule.exports = function (options) {\n  options.scopePath = [];\n  options.scopePathItem = [];\n  options.scopePathLength = [];\n  options.scopeTypes = [];\n  options.scopeLindex = [];\n  options.scopeList = [options.tags];\n  return new ScopeManager(options);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/scope-manager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/traits.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/traits.js ***!
  \*****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar _require = __webpack_require__(/*! ./doc-utils.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/doc-utils.js\"),\n  getRightOrNull = _require.getRightOrNull,\n  getRight = _require.getRight,\n  getLeft = _require.getLeft,\n  getLeftOrNull = _require.getLeftOrNull,\n  chunkBy = _require.chunkBy,\n  isTagStart = _require.isTagStart,\n  isTagEnd = _require.isTagEnd,\n  isContent = _require.isContent,\n  last = _require.last,\n  first = _require.first;\nvar _require2 = __webpack_require__(/*! ./errors.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/errors.js\"),\n  XTTemplateError = _require2.XTTemplateError,\n  throwExpandNotFound = _require2.throwExpandNotFound,\n  getLoopPositionProducesInvalidXMLError = _require2.getLoopPositionProducesInvalidXMLError;\nfunction lastTagIsOpenTag(tags, tag) {\n  if (tags.length === 0) {\n    return false;\n  }\n  var innerLastTag = last(tags).substr(1);\n  return innerLastTag.indexOf(tag) === 0;\n}\nfunction getListXmlElements(parts) {\n  /*\n   * Gets the list of closing and opening tags between two texts. It doesn't take\n   * into account tags that are opened then closed. Those that are closed then\n   * opened are kept\n   *\n   * Example input :\n   *\n   * [\n   * \t{\n   * \t\t\"type\": \"placeholder\",\n   * \t\t\"value\": \"table1\",\n   * \t\t...\n   * \t},\n   * \t{\n   * \t\t\"type\": \"placeholder\",\n   * \t\t\"value\": \"t1data1\",\n   * \t},\n   * \t{\n   * \t\t\"type\": \"tag\",\n   * \t\t\"position\": \"end\",\n   * \t\t\"text\": true,\n   * \t\t\"value\": \"</w:t>\",\n   * \t\t\"tag\": \"w:t\",\n   * \t\t\"lIndex\": 112\n   * \t},\n   * \t{\n   * \t\t\"type\": \"tag\",\n   * \t\t\"value\": \"</w:r>\",\n   * \t},\n   * \t{\n   * \t\t\"type\": \"tag\",\n   * \t\t\"value\": \"</w:p>\",\n   * \t},\n   * \t{\n   * \t\t\"type\": \"tag\",\n   * \t\t\"value\": \"</w:tc>\",\n   * \t},\n   * \t{\n   * \t\t\"type\": \"tag\",\n   * \t\t\"value\": \"<w:tc>\",\n   * \t},\n   * \t{\n   * \t\t\"type\": \"content\",\n   * \t\t\"value\": \"<w:tcPr><w:tcW w:w=\"2444\" w:type=\"dxa\"/><w:tcBorders><w:top w:val=\"nil\"/><w:left w:val=\"nil\"/><w:bottom w:val=\"nil\"/><w:right w:val=\"nil\"/></w:tcBorders><w:shd w:val=\"clear\" w:color=\"auto\" w:fill=\"FFFFFF\"/></w:tcPr>\",\n   * \t},\n   * \t...\n   * \t{\n   * \t\t\"type\": \"tag\",\n   * \t\t\"value\": \"<w:r>\",\n   * \t},\n   * \t{\n   * \t\t\"type\": \"tag\",\n   * \t\t\"value\": \"<w:t xml:space=\"preserve\">\",\n   * \t},\n   * \t{\n   * \t\t\"type\": \"placeholder\",\n   * \t\t\"value\": \"t1data4\",\n   * \t}\n   * ]\n   *\n   * Returns\n   *\n   * \t[\n   * \t\t{\n   * \t\t\t\"tag\": \"</w:t>\",\n   * \t\t},\n   * \t\t{\n   * \t\t\t\"tag\": \"</w:r>\",\n   * \t\t},\n   * \t\t{\n   * \t\t\t\"tag\": \"</w:p>\",\n   * \t\t},\n   * \t\t{\n   * \t\t\t\"tag\": \"</w:tc>\",\n   * \t\t},\n   * \t\t{\n   * \t\t\t\"tag\": \"<w:tc>\",\n   * \t\t},\n   * \t\t{\n   * \t\t\t\"tag\": \"<w:p>\",\n   * \t\t},\n   * \t\t{\n   * \t\t\t\"tag\": \"<w:r>\",\n   * \t\t},\n   * \t\t{\n   * \t\t\t\"tag\": \"<w:t>\",\n   * \t\t},\n   * \t]\n   */\n\n  var result = [];\n  for (var _i2 = 0; _i2 < parts.length; _i2++) {\n    var _parts$_i = parts[_i2],\n      position = _parts$_i.position,\n      value = _parts$_i.value,\n      tag = _parts$_i.tag;\n    // Stryker disable all : because removing this condition would also work but we want to make the API future proof\n    if (!tag) {\n      continue;\n    }\n    // Stryker restore all\n    if (position === \"end\") {\n      if (lastTagIsOpenTag(result, tag)) {\n        result.pop();\n      } else {\n        result.push(value);\n      }\n    } else if (position === \"start\") {\n      result.push(value);\n    }\n    // ignore position === \"selfclosing\"\n  }\n  return result;\n}\nfunction has(name, xmlElements) {\n  for (var _i4 = 0; _i4 < xmlElements.length; _i4++) {\n    var xmlElement = xmlElements[_i4];\n    if (xmlElement.indexOf(\"<\".concat(name)) === 0) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction getExpandToDefault(postparsed, pair, expandTags) {\n  var parts = postparsed.slice(pair[0].offset, pair[1].offset);\n  var xmlElements = getListXmlElements(parts);\n  var closingTagCount = xmlElements.filter(function (tag) {\n    return tag[1] === \"/\";\n  }).length;\n  var startingTagCount = xmlElements.filter(function (tag) {\n    return tag[1] !== \"/\" && tag[tag.length - 2] !== \"/\";\n  }).length;\n  if (closingTagCount !== startingTagCount) {\n    return {\n      error: getLoopPositionProducesInvalidXMLError({\n        tag: first(pair).part.value,\n        offset: [first(pair).part.offset, last(pair).part.offset]\n      })\n    };\n  }\n  var _loop = function _loop() {\n      var _expandTags$_i = expandTags[_i6],\n        contains = _expandTags$_i.contains,\n        expand = _expandTags$_i.expand,\n        onlyTextInTag = _expandTags$_i.onlyTextInTag;\n      if (has(contains, xmlElements)) {\n        if (onlyTextInTag) {\n          var left = getLeftOrNull(postparsed, contains, pair[0].offset);\n          var right = getRightOrNull(postparsed, contains, pair[1].offset);\n          if (left === null || right === null) {\n            return 0; // continue\n          }\n          var chunks = chunkBy(postparsed.slice(left, right), function (p) {\n            return isTagStart(contains, p) ? \"start\" : isTagEnd(contains, p) ? \"end\" : null;\n          });\n          var firstChunk = first(chunks);\n          var lastChunk = last(chunks);\n          var firstContent = firstChunk.filter(isContent);\n          var lastContent = lastChunk.filter(isContent);\n          if (firstContent.length !== 1 || lastContent.length !== 1) {\n            return 0; // continue\n          }\n        }\n        return {\n          v: {\n            value: expand\n          }\n        };\n      }\n    },\n    _ret;\n  for (var _i6 = 0; _i6 < expandTags.length; _i6++) {\n    _ret = _loop();\n    if (_ret === 0) continue;\n    if (_ret) return _ret.v;\n  }\n  return {};\n}\nfunction getExpandLimit(part, index, postparsed, options) {\n  var expandTo = part.expandTo || options.expandTo;\n  // Stryker disable all : because this condition can be removed in v4 (the only usage was the image module before version 3.12.3 of the image module\n  if (!expandTo) {\n    return;\n  }\n  // Stryker restore all\n  var right, left;\n  try {\n    left = getLeft(postparsed, expandTo, index);\n    right = getRight(postparsed, expandTo, index);\n  } catch (rootError) {\n    var errProps = _objectSpread({\n      part: part,\n      rootError: rootError,\n      postparsed: postparsed,\n      expandTo: expandTo,\n      index: index\n    }, options.error);\n    if (options.onError) {\n      var errorResult = options.onError(errProps);\n      if (errorResult === \"ignore\") {\n        return;\n      }\n    }\n    throwExpandNotFound(errProps);\n  }\n  return [left, right];\n}\nfunction expandOne(_ref, part, postparsed, options) {\n  var _ref2 = _slicedToArray(_ref, 2),\n    left = _ref2[0],\n    right = _ref2[1];\n  var index = postparsed.indexOf(part);\n  var leftParts = postparsed.slice(left, index);\n  var rightParts = postparsed.slice(index + 1, right + 1);\n  var inner = options.getInner({\n    postparse: options.postparse,\n    index: index,\n    part: part,\n    leftParts: leftParts,\n    rightParts: rightParts,\n    left: left,\n    right: right,\n    postparsed: postparsed\n  });\n  if (!inner.length) {\n    inner.expanded = [leftParts, rightParts];\n    inner = [inner];\n  }\n  return {\n    left: left,\n    right: right,\n    inner: inner\n  };\n}\n\n/* eslint-disable-next-line complexity */\nfunction expandToOne(postparsed, options) {\n  var errors = [];\n  if (postparsed.errors) {\n    errors = postparsed.errors;\n    postparsed = postparsed.postparsed;\n  }\n  var limits = [];\n  for (var i = 0, len = postparsed.length; i < len; i++) {\n    var part = postparsed[i];\n    if (part.type === \"placeholder\" && part.module === options.moduleName &&\n    /*\n     * The part.subparsed check is used to fix this github issue :\n     * https://github.com/open-xml-templating/docxtemplater/issues/671\n     */\n    !part.subparsed && !part.expanded) {\n      try {\n        var limit = getExpandLimit(part, i, postparsed, options);\n        if (!limit) {\n          continue;\n        }\n        var _limit = _slicedToArray(limit, 2),\n          left = _limit[0],\n          right = _limit[1];\n        limits.push({\n          left: left,\n          right: right,\n          part: part,\n          i: i,\n          leftPart: postparsed[left],\n          rightPart: postparsed[right]\n        });\n      } catch (error) {\n        // The Error can only be a\n        errors.push(error);\n      }\n    }\n  }\n  limits.sort(function (l1, l2) {\n    if (l1.left === l2.left) {\n      return l2.part.lIndex < l1.part.lIndex ? 1 : -1;\n    }\n    return l2.left < l1.left ? 1 : -1;\n  });\n  var maxRight = -1;\n  var offset = 0;\n  for (var _i7 = 0, _len = limits.length; _i7 < _len; _i7++) {\n    var _postparsed;\n    var _limit2 = limits[_i7];\n    maxRight = Math.max(maxRight, _i7 > 0 ? limits[_i7 - 1].right : 0);\n    if (_limit2.left < maxRight) {\n      continue;\n    }\n    var result = void 0;\n    try {\n      result = expandOne([_limit2.left + offset, _limit2.right + offset], _limit2.part, postparsed, options);\n    } catch (error) {\n      if (options.onError) {\n        var errorResult = options.onError(_objectSpread({\n          part: _limit2.part,\n          rootError: error,\n          postparsed: postparsed,\n          expandOne: expandOne\n        }, options.errors));\n        if (errorResult === \"ignore\") {\n          continue;\n        }\n      }\n      if (error instanceof XTTemplateError) {\n        errors.push(error);\n      } else {\n        throw error;\n      }\n    }\n    if (!result) {\n      continue;\n    }\n    offset += result.inner.length - (result.right + 1 - result.left);\n    (_postparsed = postparsed).splice.apply(_postparsed, [result.left, result.right + 1 - result.left].concat(_toConsumableArray(result.inner)));\n  }\n  return {\n    postparsed: postparsed,\n    errors: errors\n  };\n}\nmodule.exports = {\n  expandToOne: expandToOne,\n  getExpandToDefault: getExpandToDefault\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/traits.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/utils.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/utils.js ***!
  \****************************************************************************************/
/***/ ((module) => {

eval("\n\nfunction last(a) {\n  return a[a.length - 1];\n}\nfunction first(a) {\n  return a[0];\n}\nmodule.exports = {\n  last: last,\n  first: first\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZG9jeHRlbXBsYXRlckAzLjYwLjIvbm9kZV9tb2R1bGVzL2RvY3h0ZW1wbGF0ZXIvanMvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9icmFuZG9uYnJld2VyL0RvY3VtZW50cy9MaW5ndW9zaXR5L0xpbmd1b3NpdHkvbm9kZV9tb2R1bGVzLy5wbnBtL2RvY3h0ZW1wbGF0ZXJAMy42MC4yL25vZGVfbW9kdWxlcy9kb2N4dGVtcGxhdGVyL2pzL3V0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBsYXN0KGEpIHtcbiAgcmV0dXJuIGFbYS5sZW5ndGggLSAxXTtcbn1cbmZ1bmN0aW9uIGZpcnN0KGEpIHtcbiAgcmV0dXJuIGFbMF07XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgbGFzdDogbGFzdCxcbiAgZmlyc3Q6IGZpcnN0XG59OyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/xml-matcher.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/xml-matcher.js ***!
  \**********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar _require = __webpack_require__(/*! ./doc-utils.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/doc-utils.js\"),\n  pregMatchAll = _require.pregMatchAll;\nmodule.exports = function xmlMatcher(content, tagsXmlArray) {\n  var res = {\n    content: content\n  };\n  var taj = tagsXmlArray.join(\"|\");\n  var regexp = new RegExp(\"(?:(<(?:\".concat(taj, \")[^>]*>)([^<>]*)</(?:\").concat(taj, \")>)|(<(?:\").concat(taj, \")[^>]*/>)\"), \"g\");\n  res.matches = pregMatchAll(regexp, res.content);\n  return res;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZG9jeHRlbXBsYXRlckAzLjYwLjIvbm9kZV9tb2R1bGVzL2RvY3h0ZW1wbGF0ZXIvanMveG1sLW1hdGNoZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZUFBZSxtQkFBTyxDQUFDLGtIQUFnQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2JyYW5kb25icmV3ZXIvRG9jdW1lbnRzL0xpbmd1b3NpdHkvTGluZ3Vvc2l0eS9ub2RlX21vZHVsZXMvLnBucG0vZG9jeHRlbXBsYXRlckAzLjYwLjIvbm9kZV9tb2R1bGVzL2RvY3h0ZW1wbGF0ZXIvanMveG1sLW1hdGNoZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoXCIuL2RvYy11dGlscy5qc1wiKSxcbiAgcHJlZ01hdGNoQWxsID0gX3JlcXVpcmUucHJlZ01hdGNoQWxsO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4bWxNYXRjaGVyKGNvbnRlbnQsIHRhZ3NYbWxBcnJheSkge1xuICB2YXIgcmVzID0ge1xuICAgIGNvbnRlbnQ6IGNvbnRlbnRcbiAgfTtcbiAgdmFyIHRhaiA9IHRhZ3NYbWxBcnJheS5qb2luKFwifFwiKTtcbiAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoXCIoPzooPCg/OlwiLmNvbmNhdCh0YWosIFwiKVtePl0qPikoW148Pl0qKTwvKD86XCIpLmNvbmNhdCh0YWosIFwiKT4pfCg8KD86XCIpLmNvbmNhdCh0YWosIFwiKVtePl0qLz4pXCIpLCBcImdcIik7XG4gIHJlcy5tYXRjaGVzID0gcHJlZ01hdGNoQWxsKHJlZ2V4cCwgcmVzLmNvbnRlbnQpO1xuICByZXR1cm4gcmVzO1xufTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/xml-matcher.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/xml-templater.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/xml-templater.js ***!
  \************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar _require = __webpack_require__(/*! ./doc-utils.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/doc-utils.js\"),\n  pushArray = _require.pushArray,\n  wordToUtf8 = _require.wordToUtf8,\n  convertSpaces = _require.convertSpaces;\nvar xmlMatcher = __webpack_require__(/*! ./xml-matcher.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/xml-matcher.js\");\nvar Lexer = __webpack_require__(/*! ./lexer.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/lexer.js\");\nvar Parser = __webpack_require__(/*! ./parser.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/parser.js\");\nvar _render = __webpack_require__(/*! ./render.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/render.js\");\nvar postrender = __webpack_require__(/*! ./postrender.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/postrender.js\");\nvar resolve = __webpack_require__(/*! ./resolve.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/resolve.js\");\nvar joinUncorrupt = __webpack_require__(/*! ./join-uncorrupt.js */ \"(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/join-uncorrupt.js\");\nfunction _getFullText(content, tagsXmlArray) {\n  var matcher = xmlMatcher(content, tagsXmlArray);\n  var result = matcher.matches.map(function (match) {\n    return match.array[2];\n  });\n  return wordToUtf8(convertSpaces(result.join(\"\")));\n}\nmodule.exports = /*#__PURE__*/function () {\n  function XmlTemplater(content, options) {\n    _classCallCheck(this, XmlTemplater);\n    this.cachedParsers = {};\n    this.content = content;\n    for (var key in options) {\n      this[key] = options[key];\n    }\n    this.setModules({\n      inspect: {\n        filePath: options.filePath\n      }\n    });\n  }\n  return _createClass(XmlTemplater, [{\n    key: \"resolveTags\",\n    value: function resolveTags(tags) {\n      var _this = this;\n      this.tags = tags;\n      var options = this.getOptions();\n      var filePath = this.filePath;\n      options.scopeManager = this.scopeManager;\n      options.resolve = resolve;\n      var errors = [];\n      return Promise.all(this.modules.map(function (module) {\n        return Promise.resolve(module.preResolve(options))[\"catch\"](function (e) {\n          errors.push(e);\n        });\n      })).then(function () {\n        if (errors.length !== 0) {\n          throw errors;\n        }\n        return resolve(options).then(function (_ref) {\n          var resolved = _ref.resolved,\n            errors = _ref.errors;\n          errors = errors.map(function (error) {\n            var _error;\n            // If a string is thrown, convert it to a real Error\n            if (!(error instanceof Error)) {\n              error = new Error(error);\n            }\n            /*\n             * error properties might not be defined if some foreign error\n             * (unhandled error not thrown by docxtemplater willingly) is\n             * thrown.\n             */\n            (_error = error).properties || (_error.properties = {});\n            error.properties.file = filePath;\n            return error;\n          });\n          if (errors.length !== 0) {\n            throw errors;\n          }\n          return Promise.all(resolved).then(function (resolved) {\n            options.scopeManager.root.finishedResolving = true;\n            options.scopeManager.resolved = resolved;\n            _this.setModules({\n              inspect: {\n                resolved: resolved,\n                filePath: filePath\n              }\n            });\n            return resolved;\n          });\n        })[\"catch\"](function (error) {\n          _this.errorChecker(error);\n          throw error;\n        });\n      });\n    }\n  }, {\n    key: \"getFullText\",\n    value: function getFullText() {\n      return _getFullText(this.content, this.fileTypeConfig.tagsXmlTextArray);\n    }\n  }, {\n    key: \"setModules\",\n    value: function setModules(obj) {\n      for (var _i2 = 0, _this$modules2 = this.modules; _i2 < _this$modules2.length; _i2++) {\n        var _module = _this$modules2[_i2];\n        _module.set(obj);\n      }\n    }\n  }, {\n    key: \"preparse\",\n    value: function preparse() {\n      this.allErrors = [];\n      this.xmllexed = Lexer.xmlparse(this.content, {\n        text: this.fileTypeConfig.tagsXmlTextArray,\n        other: this.fileTypeConfig.tagsXmlLexedArray\n      });\n      this.setModules({\n        inspect: {\n          filePath: this.filePath,\n          xmllexed: this.xmllexed\n        }\n      });\n      var _Lexer$parse = Lexer.parse(this.xmllexed, this.delimiters, this.syntax, this.fileType),\n        lexed = _Lexer$parse.lexed,\n        lexerErrors = _Lexer$parse.errors;\n      pushArray(this.allErrors, lexerErrors);\n      this.lexed = lexed;\n      this.setModules({\n        inspect: {\n          filePath: this.filePath,\n          lexed: this.lexed\n        }\n      });\n      var options = this.getOptions();\n      this.lexed = Parser.preparse(this.lexed, this.modules, options);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse() {\n      this.setModules({\n        inspect: {\n          filePath: this.filePath\n        }\n      });\n      var options = this.getOptions();\n      this.parsed = Parser.parse(this.lexed, this.modules, options);\n      this.setModules({\n        inspect: {\n          filePath: this.filePath,\n          parsed: this.parsed\n        }\n      });\n      var _Parser$postparse = Parser.postparse(this.parsed, this.modules, options),\n        postparsed = _Parser$postparse.postparsed,\n        postparsedErrors = _Parser$postparse.errors;\n      this.postparsed = postparsed;\n      this.setModules({\n        inspect: {\n          filePath: this.filePath,\n          postparsed: this.postparsed\n        }\n      });\n      pushArray(this.allErrors, postparsedErrors);\n      this.errorChecker(this.allErrors);\n      return this;\n    }\n  }, {\n    key: \"errorChecker\",\n    value: function errorChecker(errors) {\n      for (var _i4 = 0, _errors2 = errors; _i4 < _errors2.length; _i4++) {\n        var error = _errors2[_i4];\n        /*\n         * error properties might not be defined if some foreign\n         * (unhandled error not thrown by docxtemplater willingly) is\n         * thrown.\n         */\n        error.properties || (error.properties = {});\n        error.properties.file = this.filePath;\n      }\n      for (var _i6 = 0, _this$modules4 = this.modules; _i6 < _this$modules4.length; _i6++) {\n        var _module2 = _this$modules4[_i6];\n        errors = _module2.errorsTransformer(errors);\n      }\n    }\n  }, {\n    key: \"baseNullGetter\",\n    value: function baseNullGetter(part, sm) {\n      var _this2 = this;\n      var value = this.modules.reduce(function (value, module) {\n        if (value != null) {\n          return value;\n        }\n        return module.nullGetter(part, sm, _this2);\n      }, null);\n      if (value != null) {\n        return value;\n      }\n      return this.nullGetter(part, sm);\n    }\n  }, {\n    key: \"getOptions\",\n    value: function getOptions() {\n      return {\n        compiled: this.postparsed,\n        cachedParsers: this.cachedParsers,\n        tags: this.tags,\n        modules: this.modules,\n        parser: this.parser,\n        contentType: this.contentType,\n        relsType: this.relsType,\n        baseNullGetter: this.baseNullGetter.bind(this),\n        filePath: this.filePath,\n        fileTypeConfig: this.fileTypeConfig,\n        fileType: this.fileType,\n        linebreaks: this.linebreaks,\n        stripInvalidXMLChars: this.stripInvalidXMLChars\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render(to) {\n      this.filePath = to;\n      var options = this.getOptions();\n      options.resolved = this.scopeManager.resolved;\n      options.scopeManager = this.scopeManager;\n      options.render = _render;\n      options.joinUncorrupt = joinUncorrupt;\n      var _render2 = _render(options),\n        errors = _render2.errors,\n        parts = _render2.parts;\n      if (errors.length > 0) {\n        this.allErrors = errors;\n        this.errorChecker(errors);\n        return this;\n      }\n      this.content = postrender(parts, options);\n      this.setModules({\n        inspect: {\n          filePath: this.filePath,\n          content: this.content\n        }\n      });\n      return this;\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/docxtemplater@3.60.2/node_modules/docxtemplater/js/xml-templater.js\n");

/***/ })

};
;