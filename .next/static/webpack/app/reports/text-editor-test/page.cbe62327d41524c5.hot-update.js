"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/reports/text-editor-test/page",{

/***/ "(app-pages-browser)/./src/components/reports/text-editor/BatchRequestStatus.tsx":
/*!*******************************************************************!*\
  !*** ./src/components/reports/text-editor/BatchRequestStatus.tsx ***!
  \*******************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BatchRequestStatus: () => (/* binding */ BatchRequestStatus),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _components_ui_card__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/components/ui/card */ \"(app-pages-browser)/./src/components/ui/card.tsx\");\n/* harmony import */ var _components_ui_spinner__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/components/ui/spinner */ \"(app-pages-browser)/./src/components/ui/spinner.tsx\");\n\nvar _s = $RefreshSig$();\n\n\n\n/**\n * Component for displaying batch request status and polling for results\n */ const BatchRequestStatus = (param)=>{\n    let { batchId, originalReport, sections, onComplete, onError } = param;\n    _s();\n    const [status, setStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('pending');\n    const [progress, setProgress] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [completedRequests, setCompletedRequests] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [totalRequests, setTotalRequests] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(sections.length);\n    const [pollCount, setPollCount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const MAX_POLLS = 60; // Maximum number of polls (10 minutes at 10s intervals)\n    const POLL_INTERVAL = 10000; // Poll every 10 seconds\n    // State for tracking the current batch ID (may change if we switch to simulation)\n    const [currentBatchId, setCurrentBatchId] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(batchId);\n    // Function to poll for batch status\n    const pollBatchStatus = async ()=>{\n        if (pollCount >= MAX_POLLS) {\n            setError('Maximum polling time exceeded');\n            onError('Batch processing timed out after 10 minutes');\n            return;\n        }\n        try {\n            // Log the batch ID being used for status polling\n            console.log(\"\\uD83D\\uDD0D Polling batch status for ID: \".concat(currentBatchId, \" (poll #\").concat(pollCount + 1, \")\"));\n            // Validate batch ID format before polling\n            if (!currentBatchId.startsWith('msgbatch_') && !currentBatchId.startsWith('simulated_') && !currentBatchId.startsWith('error_') && !currentBatchId.startsWith('pdf_batch_')) {\n                console.warn(\"⚠️ Polling with unexpected batch ID format: \".concat(currentBatchId));\n                console.warn(\"⚠️ Expected formats are msgbatch_* for Anthropic, simulated_*/error_* for simulation, or pdf_batch_* for PDF processing\");\n            // Continue anyway as the API can handle invalid formats through simulation\n            }\n            // Handle PDF batch (this is our own internal ID format)\n            const isPdfBatch = currentBatchId.startsWith('pdf_batch_');\n            if (isPdfBatch) {\n                console.log(\"\\uD83D\\uDCCA PDF batch detected: \".concat(currentBatchId));\n                // For PDF batches, we'll simulate progress based on poll count\n                // until we get a proper batch ID from the API\n                // Simulate some progress\n                const progressPercent = Math.min(Math.floor(pollCount / 10 * 100), 90);\n                setProgress(progressPercent);\n                // After a few polls, assume we have a 25% completion rate\n                if (pollCount > 2) {\n                    setCompletedRequests(Math.floor(sections.length * 0.25));\n                }\n                // After a few more polls, simulate 50% completion\n                if (pollCount > 4) {\n                    setCompletedRequests(Math.floor(sections.length * 0.5));\n                }\n                // Keep polling\n                setPollCount(pollCount + 1);\n                setTimeout(pollBatchStatus, POLL_INTERVAL);\n                return;\n            }\n            // Encode the original report as a URL parameter\n            const reportParam = encodeURIComponent(JSON.stringify(originalReport));\n            // Check if this is a simulated batch (currentBatchId starts with \"simulated_\")\n            const isSimulated = currentBatchId.startsWith('simulated_') || currentBatchId.startsWith('error_');\n            // For simulated batches, include polling data to help with simulation\n            const sectionsList = Array.isArray(sections) ? sections.join(',') : '';\n            const simulationParams = isSimulated ? \"&pollCount=\".concat(pollCount, \"&sections=\").concat(sectionsList) : '';\n            // Fetch the current status\n            const response = await fetch(\"/api/text-editor-test/status?batchId=\".concat(currentBatchId, \"&report=\").concat(reportParam).concat(simulationParams));\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.error || 'Failed to check batch status');\n            }\n            const data = await response.json();\n            // Update the status and progress\n            if (data.batchStatus) {\n                // Set the batch status with fallbacks - Anthropic uses processing_status\n                // Convert Anthropic's \"in_progress\" and \"ended\" to our internal statuses\n                const processingStatus = data.batchStatus.processing_status || 'pending';\n                const mappedStatus = processingStatus === 'in_progress' ? 'in_progress' : processingStatus === 'ended' ? 'completed' : processingStatus; // Use as-is for other values\n                setStatus(mappedStatus);\n                // Handle different batch status values\n                if (processingStatus === 'failed' || processingStatus === 'error') {\n                    setError(\"Batch processing failed: \".concat(data.batchStatus.error || 'Unknown error'));\n                    onError(\"Batch processing failed: \".concat(data.batchStatus.error || 'Unknown error'));\n                    return; // Stop polling if batch failed\n                }\n                // Count completed requests using Anthropic's request_counts\n                if (data.batchStatus.request_counts) {\n                    const requestCounts = data.batchStatus.request_counts;\n                    // Get counts from Anthropic's structure\n                    const completed = requestCounts.succeeded || 0;\n                    const total = (requestCounts.processing || 0) + (requestCounts.succeeded || 0) + (requestCounts.errored || 0) + (requestCounts.canceled || 0) + (requestCounts.expired || 0);\n                    setCompletedRequests(completed);\n                    setTotalRequests(total > 0 ? total : sections.length);\n                    // Calculate progress percentage based on tool response counts\n                    const progressPercent = total > 0 ? Math.floor(completed / total * 100) : Math.min(Math.floor(pollCount / 10 * 100), 90); // Fallback to time-based progress capped at 90%\n                    // Make sure progress is actually updated and shows incremental changes\n                    setProgress((prev)=>{\n                        // Only increase progress, never decrease\n                        if (progressPercent > prev) {\n                            return progressPercent;\n                        } else if (completed > 0 && prev < 95) {\n                            return Math.min(prev + 5, 95); // Add 5% but cap at 95% until complete\n                        }\n                        return prev;\n                    });\n                    // Check for errors in individual requests\n                    const failedRequests = requestCounts.errored || 0;\n                    if (failedRequests > 0) {\n                        console.warn(\"\".concat(failedRequests, \" requests failed in batch \").concat(currentBatchId));\n                    // Continue polling, as some requests may still succeed\n                    }\n                } else {\n                    // If there's no requests array, estimate progress based on poll count\n                    const estimatedProgress = Math.min(Math.floor(pollCount / 10 * 100), 90);\n                    setProgress(estimatedProgress);\n                }\n                // If batch is complete, call onComplete with the updated report\n                if (data.complete && data.report) {\n                    setStatus('completed');\n                    setProgress(100);\n                    onComplete(data.report, data.updateCommands || [], data.affectedDomains || []);\n                    return; // Stop polling\n                }\n            } else {\n                // If no batch status, estimate progress based on poll count\n                const estimatedProgress = Math.min(Math.floor(pollCount / 10 * 100), 90);\n                setProgress(estimatedProgress);\n            }\n            // Continue polling if not complete\n            if (!data.complete) {\n                setPollCount(pollCount + 1);\n                setTimeout(pollBatchStatus, POLL_INTERVAL);\n            }\n        } catch (error) {\n            console.error(\"❌ Error polling batch status for ID \".concat(currentBatchId, \":\"), error);\n            // Check if this is a batch ID format issue\n            if (!currentBatchId.startsWith('msgbatch_') && !currentBatchId.startsWith('simulated_') && !currentBatchId.startsWith('error_')) {\n                console.error(\"❌ Likely batch ID format issue. Invalid batch ID: \".concat(currentBatchId));\n                console.error(\"❌ Anthropic requires batch IDs to start with 'msgbatch_' prefix\");\n                // Attempt to continue with simulation mode\n                console.log(\"⚠️ Falling back to simulation mode due to batch ID format error\");\n                const simulatedBatchId = \"simulated_fallback_\".concat(Date.now().toString(36));\n                // Update the batch ID to use simulation mode instead\n                console.log(\"⚠️ Replacing invalid batch ID with simulation ID: \".concat(simulatedBatchId));\n                setCurrentBatchId(simulatedBatchId);\n                // Notify user of the issue without failing completely\n                setStatus('in_progress');\n                setProgress(25); // Show some progress\n                // Don't call onError yet, allow simulation to continue\n                setPollCount(pollCount + 1);\n                setTimeout(pollBatchStatus, POLL_INTERVAL);\n                return;\n            }\n            // For network or temporary errors, try a few more times before giving up\n            if (pollCount < 3) {\n                console.log(\"⚠️ Retrying poll (attempt \".concat(pollCount + 1, \")\"));\n                setPollCount(pollCount + 1);\n                setTimeout(pollBatchStatus, POLL_INTERVAL);\n                return;\n            }\n            setError(error instanceof Error ? error.message : 'Unknown error');\n            onError(error instanceof Error ? error.message : 'Failed to process batch request');\n        }\n    };\n    // Start polling when component mounts\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"BatchRequestStatus.useEffect\": ()=>{\n            pollBatchStatus();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        }\n    }[\"BatchRequestStatus.useEffect\"], []);\n    const getStatusText = ()=>{\n        switch(status){\n            case 'pending':\n                return 'Starting batch processing...';\n            case 'in_progress':\n                return \"Processing sections (\".concat(completedRequests, \"/\").concat(totalRequests, \")...\");\n            case 'completed':\n                return 'Processing complete!';\n            case 'failed':\n                return 'Processing failed';\n            default:\n                return 'Checking status...';\n        }\n    };\n    if (error) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_card__WEBPACK_IMPORTED_MODULE_2__.Card, {\n            className: \"border-red-200 bg-red-50\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_card__WEBPACK_IMPORTED_MODULE_2__.CardContent, {\n                className: \"p-4 text-center\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"text-red-600 font-medium mb-2\",\n                        children: \"Error Processing Report\"\n                    }, void 0, false, {\n                        fileName: \"/Users/brandonbrewer/Documents/Linguosity/Linguosity/src/components/reports/text-editor/BatchRequestStatus.tsx\",\n                        lineNumber: 251,\n                        columnNumber: 11\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"text-sm text-red-500\",\n                        children: error\n                    }, void 0, false, {\n                        fileName: \"/Users/brandonbrewer/Documents/Linguosity/Linguosity/src/components/reports/text-editor/BatchRequestStatus.tsx\",\n                        lineNumber: 252,\n                        columnNumber: 11\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/brandonbrewer/Documents/Linguosity/Linguosity/src/components/reports/text-editor/BatchRequestStatus.tsx\",\n                lineNumber: 250,\n                columnNumber: 9\n            }, undefined)\n        }, void 0, false, {\n            fileName: \"/Users/brandonbrewer/Documents/Linguosity/Linguosity/src/components/reports/text-editor/BatchRequestStatus.tsx\",\n            lineNumber: 249,\n            columnNumber: 7\n        }, undefined);\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_card__WEBPACK_IMPORTED_MODULE_2__.Card, {\n        className: \"border-blue-200 bg-blue-50\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_card__WEBPACK_IMPORTED_MODULE_2__.CardContent, {\n            className: \"p-4\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex items-center justify-between mb-3\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"text-sm font-medium text-blue-700\",\n                            children: getStatusText()\n                        }, void 0, false, {\n                            fileName: \"/Users/brandonbrewer/Documents/Linguosity/Linguosity/src/components/reports/text-editor/BatchRequestStatus.tsx\",\n                            lineNumber: 262,\n                            columnNumber: 11\n                        }, undefined),\n                        status !== 'completed' && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_spinner__WEBPACK_IMPORTED_MODULE_3__.Spinner, {\n                            className: \"h-4 w-4 text-blue-600\"\n                        }, void 0, false, {\n                            fileName: \"/Users/brandonbrewer/Documents/Linguosity/Linguosity/src/components/reports/text-editor/BatchRequestStatus.tsx\",\n                            lineNumber: 266,\n                            columnNumber: 13\n                        }, undefined)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/brandonbrewer/Documents/Linguosity/Linguosity/src/components/reports/text-editor/BatchRequestStatus.tsx\",\n                    lineNumber: 261,\n                    columnNumber: 9\n                }, undefined),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"w-full bg-blue-100 rounded-full h-2.5\",\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"bg-blue-600 h-2.5 rounded-full transition-all duration-500 ease-in-out\",\n                        style: {\n                            width: \"\".concat(progress, \"%\")\n                        }\n                    }, void 0, false, {\n                        fileName: \"/Users/brandonbrewer/Documents/Linguosity/Linguosity/src/components/reports/text-editor/BatchRequestStatus.tsx\",\n                        lineNumber: 272,\n                        columnNumber: 11\n                    }, undefined)\n                }, void 0, false, {\n                    fileName: \"/Users/brandonbrewer/Documents/Linguosity/Linguosity/src/components/reports/text-editor/BatchRequestStatus.tsx\",\n                    lineNumber: 271,\n                    columnNumber: 9\n                }, undefined),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"mt-3 text-xs text-blue-600\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"mb-1 font-medium\",\n                            children: \"Processing sections:\"\n                        }, void 0, false, {\n                            fileName: \"/Users/brandonbrewer/Documents/Linguosity/Linguosity/src/components/reports/text-editor/BatchRequestStatus.tsx\",\n                            lineNumber: 280,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"flex flex-wrap gap-1\",\n                            children: sections.map((section, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                    className: \"inline-block px-2 py-1 rounded flex items-center \".concat(index < completedRequests ? 'bg-blue-200 text-blue-800' : index === completedRequests ? 'bg-blue-300 text-blue-800 border border-blue-400' : 'bg-blue-100 text-blue-600'),\n                                    children: [\n                                        index === completedRequests && status === 'in_progress' && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_spinner__WEBPACK_IMPORTED_MODULE_3__.Spinner, {\n                                            className: \"h-3 w-3 mr-1 text-blue-600\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/brandonbrewer/Documents/Linguosity/Linguosity/src/components/reports/text-editor/BatchRequestStatus.tsx\",\n                                            lineNumber: 294,\n                                            columnNumber: 19\n                                        }, undefined),\n                                        section.split('.').slice(-1)[0],\n                                        index < completedRequests && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                                            xmlns: \"http://www.w3.org/2000/svg\",\n                                            className: \"h-3 w-3 ml-1 text-blue-700\",\n                                            fill: \"none\",\n                                            viewBox: \"0 0 24 24\",\n                                            stroke: \"currentColor\",\n                                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                                strokeLinecap: \"round\",\n                                                strokeLinejoin: \"round\",\n                                                strokeWidth: 2,\n                                                d: \"M5 13l4 4L19 7\"\n                                            }, void 0, false, {\n                                                fileName: \"/Users/brandonbrewer/Documents/Linguosity/Linguosity/src/components/reports/text-editor/BatchRequestStatus.tsx\",\n                                                lineNumber: 299,\n                                                columnNumber: 21\n                                            }, undefined)\n                                        }, void 0, false, {\n                                            fileName: \"/Users/brandonbrewer/Documents/Linguosity/Linguosity/src/components/reports/text-editor/BatchRequestStatus.tsx\",\n                                            lineNumber: 298,\n                                            columnNumber: 19\n                                        }, undefined)\n                                    ]\n                                }, index, true, {\n                                    fileName: \"/Users/brandonbrewer/Documents/Linguosity/Linguosity/src/components/reports/text-editor/BatchRequestStatus.tsx\",\n                                    lineNumber: 283,\n                                    columnNumber: 15\n                                }, undefined))\n                        }, void 0, false, {\n                            fileName: \"/Users/brandonbrewer/Documents/Linguosity/Linguosity/src/components/reports/text-editor/BatchRequestStatus.tsx\",\n                            lineNumber: 281,\n                            columnNumber: 11\n                        }, undefined)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/brandonbrewer/Documents/Linguosity/Linguosity/src/components/reports/text-editor/BatchRequestStatus.tsx\",\n                    lineNumber: 279,\n                    columnNumber: 9\n                }, undefined)\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/brandonbrewer/Documents/Linguosity/Linguosity/src/components/reports/text-editor/BatchRequestStatus.tsx\",\n            lineNumber: 260,\n            columnNumber: 7\n        }, undefined)\n    }, void 0, false, {\n        fileName: \"/Users/brandonbrewer/Documents/Linguosity/Linguosity/src/components/reports/text-editor/BatchRequestStatus.tsx\",\n        lineNumber: 259,\n        columnNumber: 5\n    }, undefined);\n};\n_s(BatchRequestStatus, \"rAiHu9OFKDrm6hxMQxtmN/9YHAk=\");\n_c = BatchRequestStatus;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (BatchRequestStatus);\nvar _c;\n$RefreshReg$(_c, \"BatchRequestStatus\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/reports/text-editor/BatchRequestStatus.tsx\n"));

/***/ })

});