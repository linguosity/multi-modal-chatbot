'use client';

import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Spinner } from "@/components/ui/spinner";

// Helper function to truncate text with ellipsis
function truncateText(str: string, maxLength: number): string {
  if (!str || str.length <= maxLength) return str || '';
  return str.slice(0, maxLength - 3) + '...';
}

// Define domain section structure
interface DomainSection {
  isConcern: boolean;
  topicSentence: string;
  strengths: string[];
  needs: string[];
  impactStatement: string;
  lastUpdated?: string;
}

// Define assessment tool structure
interface AssessmentTool {
  id?: string;
  name: string;
  year: string;
  authors: string[];
  targetPopulation: string;
  targetAgeRange?: string;
  type: "quantitative" | "qualitative" | "mixed";
  domains: string[];
  description?: string;
  subtests?: {
    name: string;
    description: string;
    domain?: string;
    scores?: {
      raw?: number;
      scaled?: number;
      standardScore?: number;
      percentile?: number;
      ageEquivalent?: string;
      interpretation?: string;
    }[];
  }[];
  results?: {
    summary: string;
    scores?: any;
  };
  caveats?: string[];
  references?: string[];
}

interface SpeechLanguageReport {
  reportHeading?: {
    studentInformation?: {
      firstName: string;
      lastName: string;
      DOB: string;
      reportDate: string;
      evaluationDate: string;
      parents: string[];
      homeLanguage: string;
    };
  };
  reasonForReferral?: string;
  confidentialityStatement?: string;
  studentDemographicsAndBackground?: {
    educationalHistory: string;
  };
  healthReport?: {
    medicalHistory: string;
    visionAndHearingScreening: string;
    medicationsAndAllergies: string;
  };
  earlyInterventionHistory?: string;
  familyHistory?: {
    familyStructure: string;
    languageAndCulturalBackground: string;
    socioeconomicFactors: string;
  };
  parentGuardianConcerns?: string;
  observations?: {
    classroomObservations?: string;
    playBasedInformalObservations?: string;
    socialInteractionObservations?: string;
    [key: string]: string | undefined;
  };
  assessmentProceduresAndTools?: {
    overviewOfAssessmentMethods: string;
    assessmentToolsUsed: AssessmentTool[];
  };
  domains: {
    receptive: DomainSection;
    expressive: DomainSection;
    pragmatic: DomainSection;
    articulation: DomainSection;
    voice: DomainSection;
    fluency: DomainSection;
    [key: string]: DomainSection;
  };
  eligibility?: {
    domains: {
      receptive: boolean;
      expressive: boolean;
      pragmatic: boolean;
      articulation: boolean;
      voice: boolean;
      fluency: boolean;
      [key: string]: boolean;
    };
    californiaEdCode: string;
  };
  conclusion?: {
    summary: string;
  };
  recommendations?: {
    services: {
      typeOfService: string;
      frequency: string;
      setting: string;
    };
    accommodations: string[];
    facilitationStrategies: string[];
  };
  parentFriendlyGlossary?: {
    terms: {
      [key: string]: string;
    };
  };
  metadata: {
    lastUpdated: string;
    version: number;
    createdBy?: string;
  };
}

// Component to render a structured domain section
const DomainSectionCard = ({ section, title }: { section: DomainSection, title: string }) => {
  if (!section) return null;
  
  return (
    <Card className="mb-4 shadow-sm border-0">
      <CardHeader className="bg-white border-b flex flex-row justify-between items-center">
        <CardTitle className="text-lg font-medium">{title}</CardTitle>
        {section.isConcern !== undefined && (
          <div className={`px-2 py-1 rounded-full text-xs font-medium ${
            section.isConcern
              ? 'bg-red-100 text-red-800'
              : 'bg-green-100 text-green-800'
          }`}>
            {section.isConcern ? 'Area of Concern' : 'Not a Concern'}
          </div>
        )}
      </CardHeader>
      <CardContent className="p-4">
        {section.topicSentence && (
          <div className="mb-4">
            <h3 className="text-sm font-semibold mb-1 text-gray-600">Summary</h3>
            <p className="text-gray-800">{section.topicSentence}</p>
          </div>
        )}
        
        {section.strengths && section.strengths.length > 0 && (
          <div className="mb-4">
            <h3 className="text-sm font-semibold mb-1 text-gray-600">Strengths</h3>
            <ul className="list-disc pl-5 space-y-1">
              {section.strengths.map((item, index) => (
                <li key={index} className="text-gray-800">{item}</li>
              ))}
            </ul>
          </div>
        )}
        
        {section.needs && section.needs.length > 0 && (
          <div className="mb-4">
            <h3 className="text-sm font-semibold mb-1 text-gray-600">Needs</h3>
            <ul className="list-disc pl-5 space-y-1">
              {section.needs.map((item, index) => (
                <li key={index} className="text-gray-800">{item}</li>
              ))}
            </ul>
          </div>
        )}
        
        {section.impactStatement && (
          <div className="mb-2">
            <h3 className="text-sm font-semibold mb-1 text-gray-600">Educational Impact</h3>
            <p className="text-gray-800">{section.impactStatement}</p>
          </div>
        )}
      </CardContent>
      {section.lastUpdated && (
        <CardFooter className="bg-gray-50 text-xs text-gray-500 py-2">
          Last updated: {new Date(section.lastUpdated).toLocaleString()}
        </CardFooter>
      )}
    </Card>
  );
};

// Component to render an assessment tool
const AssessmentToolCard = ({ tool }: { tool: AssessmentTool }) => {
  if (!tool) return null;
  
  return (
    <Card className="mb-4 shadow-sm border-0">
      <CardHeader className="bg-white border-b">
        <CardTitle className="text-lg font-medium">{tool.name}</CardTitle>
        <div className="flex flex-wrap gap-2 mt-1">
          <span className="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs font-medium">
            {tool.year}
          </span>
          <span className="px-2 py-1 bg-purple-100 text-purple-800 rounded-full text-xs font-medium">
            {tool.type}
          </span>
          {tool.domains.map(domain => (
            <span key={domain} className="px-2 py-1 bg-gray-100 text-gray-800 rounded-full text-xs font-medium">
              {domain}
            </span>
          ))}
        </div>
      </CardHeader>
      <CardContent className="p-4">
        {tool.description && (
          <div className="mb-4">
            <p className="text-gray-800">{tool.description}</p>
          </div>
        )}
        
        {tool.authors && tool.authors.length > 0 && (
          <div className="mb-4">
            <h3 className="text-sm font-semibold mb-1 text-gray-600">Authors</h3>
            <p className="text-gray-800">{tool.authors.join(', ')}</p>
          </div>
        )}
        
        {tool.subtests && tool.subtests.length > 0 && (
          <div className="mb-4">
            <h3 className="text-sm font-semibold mb-1 text-gray-600">Subtests</h3>
            <div className="space-y-2">
              {tool.subtests.map((subtest, index) => (
                <div key={index} className="border rounded p-2">
                  <h4 className="font-medium">{subtest.name}</h4>
                  <p className="text-sm text-gray-600">{subtest.description}</p>
                  {subtest.domain && (
                    <span className="text-xs bg-gray-100 px-2 py-1 rounded mt-1 inline-block">
                      {subtest.domain}
                    </span>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}
        
        {tool.caveats && tool.caveats.length > 0 && (
          <div className="mb-4">
            <h3 className="text-sm font-semibold mb-1 text-gray-600">Caveats</h3>
            <ul className="list-disc pl-5 space-y-1">
              {tool.caveats.map((item, index) => (
                <li key={index} className="text-gray-800 text-sm">{item}</li>
              ))}
            </ul>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

// Component to render a text section
const TextSectionCard = ({ content, title }: { content: string, title: string }) => {
  if (!content) return null;
  
  return (
    <Card className="mb-4 shadow-sm border-0">
      <CardHeader className="bg-white border-b">
        <CardTitle className="text-lg font-medium">{title}</CardTitle>
      </CardHeader>
      <CardContent className="p-4">
        <p className="text-gray-800">{content}</p>
      </CardContent>
    </Card>
  );
};

/**
 * Test component for Claude's JSON-based text editor tool
 */
export default function TextEditorTestPage() {
  // Input form state
  const [inputText, setInputText] = useState('');
  const [selectedSection, setSelectedSection] = useState('auto-detect');
  const [isUpdating, setIsUpdating] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  
  // Report state
  const [report, setReport] = useState<SpeechLanguageReport>({
    header: {
      studentInformation: {
        firstName: "Sample",
        lastName: "Student",
        DOB: "2018-05-15",
        reportDate: "2024-03-15",
        evaluationDate: "2024-03-10",
        parents: ["Parent Name"],
        homeLanguage: "English"
      },
      reasonForReferral: "Teacher referral due to concerns about articulation and language skills",
      confidentialityStatement: "This report contains confidential information..."
    },
    background: {
      studentDemographicsAndBackground: {
        educationalHistory: "Currently enrolled in 1st grade at Sample Elementary"
      },
      healthReport: {
        medicalHistory: "No significant medical history reported",
        visionAndHearingScreening: "Passed school screening on 2023-09-15",
        medicationsAndAllergies: "None reported"
      },
      earlyInterventionHistory: "No previous speech services",
      familyHistory: {
        familyStructure: "Lives with both parents and younger sibling",
        languageAndCulturalBackground: "English is the primary language spoken at home",
        socioeconomicFactors: ""
      },
      parentGuardianConcerns: "Parents report difficulty understanding child's speech at times"
    },
    assessmentResults: {
      observations: {
        classroomObservations: "Student needs repetition of directions in large group setting",
        playBasedInformalObservations: "Engages well in structured play activities",
        socialInteractionObservations: "Initiates interactions with peers appropriately"
      },
      assessmentProceduresAndTools: {
        overviewOfAssessmentMethods: "A combination of standardized tests, language samples, and observations were used",
        assessmentToolsUsed: ["gfta3", "celf5"]
      },
      domains: {
        receptive: {
          isConcern: false,
          topicSentence: 'Student demonstrates age-appropriate receptive language skills.',
          strengths: ['Follows 2-step directions consistently'],
          needs: [],
          impactStatement: ""
        },
        expressive: {
          isConcern: true,
          topicSentence: 'Student shows mild deficits in expressive language.',
          strengths: ['Uses simple sentences to communicate needs'],
          needs: ['Difficulty with complex sentence structures', 'Limited vocabulary for academic concepts'],
          impactStatement: "Expressive language difficulties impact the student's ability to fully participate in classroom discussions"
        },
        pragmatic: {
          isConcern: false,
          topicSentence: '',
          strengths: [],
          needs: [],
          impactStatement: ""
        },
        articulation: {
          isConcern: true,
          topicSentence: 'Student presents with multiple articulation errors affecting intelligibility.',
          strengths: [],
          needs: ['Produces /s/ and /z/ with lateral distortion', 'Fronting of velar sounds /k/ and /g/'],
          impactStatement: 'These errors significantly impact intelligibility in the classroom.'
        },
        voice: {
          isConcern: false,
          topicSentence: "",
          strengths: [],
          needs: [],
          impactStatement: ""
        },
        fluency: {
          isConcern: false,
          topicSentence: "",
          strengths: [],
          needs: [],
          impactStatement: ""
        }
      }
    },
    conclusion: {
      eligibility: {
        domains: {
          receptive: false,
          expressive: true,
          pragmatic: false,
          articulation: true,
          voice: false,
          fluency: false
        },
        californiaEdCode: "Student meets eligibility criteria for speech or language impairment under California Ed Code Section 56333"
      },
      conclusion: {
        summary: "Based on assessment results and clinical observations, student demonstrates significant speech sound production errors and expressive language deficits that adversely affect educational performance."
      },
      recommendations: {
        services: {
          typeOfService: "Direct speech-language therapy",
          frequency: "2x weekly for 30 minutes",
          setting: "Pull-out and classroom-based"
        },
        accommodations: ["Preferential seating", "Visual supports for instruction"],
        facilitationStrategies: ["Allow extended time for verbal responses", "Provide language models"]
      },
      parentFriendlyGlossary: {
        terms: {
          "Articulation": "The physical production of speech sounds",
          "Phonological Process": "Error patterns in speech sound production"
        }
      }
    },
    metadata: {
      lastUpdated: "2024-03-16T00:00:00.000Z", // Static timestamp to avoid hydration errors
      version: 1
    }
  });
  
  // UI state
  const [commandDetails, setCommandDetails] = useState<any>(null);
  const [showJsonPreview, setShowJsonPreview] = useState(false);
  
  // Get active domains for display
  const activeDomains = Object.keys(report.assessmentResults.domains || {}).filter(
    domain => report.assessmentResults.domains[domain] && (
      report.assessmentResults.domains[domain].topicSentence || 
      (report.assessmentResults.domains[domain].strengths && report.assessmentResults.domains[domain].strengths.length > 0) ||
      (report.assessmentResults.domains[domain].needs && report.assessmentResults.domains[domain].needs.length > 0)
    )
  );
  
  /**
   * Handle form submission to update report using Claude's text editor
   */
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!inputText.trim() || isUpdating) return;
    
    setIsUpdating(true);
    setError(null);
    setSuccess(null);
    setCommandDetails(null);
    
    const clientRequestId = `client_${Date.now().toString(36)}_${Math.random().toString(36).substring(2, 7)}`;
    console.log(`[${clientRequestId}] 🚀 Starting report update request`);
    console.log(`[${clientRequestId}] 📝 Input: "${inputText.substring(0, 50)}${inputText.length > 50 ? '...' : ''}"`);
    console.log(`[${clientRequestId}] 🎯 Target section: ${selectedSection}`);
    
    try {
      console.log(`[${clientRequestId}] 📤 Sending API request...`);
      // Call API endpoint that will use Claude's text editor tool
      const response = await fetch('/api/text-editor-test', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          input: inputText,
          report: report,
          updateSection: selectedSection === 'auto-detect' ? undefined : selectedSection
        }),
      });
      
      console.log(`[${clientRequestId}] 📥 Received API response: ${response.status} ${response.statusText}`);
      
      if (!response.ok) {
        const errorData = await response.json();
        console.error(`[${clientRequestId}] ❌ API error:`, errorData);
        throw new Error(errorData.error || 'Failed to update report');
      }
      
      const data = await response.json();
      console.log(`[${clientRequestId}] 📦 Response data:`, {
        hasReport: !!data.report,
        hasCommand: !!data.command,
        commandType: data.command?.command,
        affectedDomain: data.affectedDomain,
        simulated: data.simulated,
        error: data.error
      });
      
      // Update the report state with the result from Claude's text editor
      if (data.report) {
        console.log(`[${clientRequestId}] 🔄 Updating report state with new data`);
        console.log(`[${clientRequestId}] 📊 Updated domains:`, 
          Object.keys(data.report.domains).filter(domain => 
            JSON.stringify(data.report.domains[domain]) !== JSON.stringify(report.domains[domain])
          )
        );
        
        setReport(data.report);
        setInputText(''); // Clear the input field
        
        // Set command details and success message
        if (data.command) {
          console.log(`[${clientRequestId}] 📋 Setting command details`);
          setCommandDetails(data.command);
          
          if (data.affectedDomain) {
            console.log(`[${clientRequestId}] ✅ Success: Updated ${data.affectedDomain} domain`);
            setSuccess(`Report updated successfully in the "${data.affectedDomain}" domain using Claude's ${data.command.command} command.`);
          } else {
            console.log(`[${clientRequestId}] ✅ Success: Report updated`);
            setSuccess(`Report updated successfully using Claude's ${data.command.command} command.`);
          }
        } else if (data.simulated) {
          console.log(`[${clientRequestId}] ⚠️ Using simulated response`);
          setSuccess(`Report updated with simulated changes (API fallback mode) in the "${data.affectedDomain}" domain.`);
        } else {
          console.log(`[${clientRequestId}] ✅ Success: Generic update`);
          setSuccess('Report updated successfully');
        }
      } else if (data.error) {
        console.error(`[${clientRequestId}] ❌ Error from API:`, data.error);
        setError(data.error);
      }
    } catch (err) {
      console.error(`[${clientRequestId}] ❌ Exception:`, err);
      setError(err instanceof Error ? err.message : 'An unexpected error occurred');
    } finally {
      console.log(`[${clientRequestId}] 🏁 Request complete`);
      setIsUpdating(false);
    }
  };
  
  return (
    <div className="container mx-auto py-6 max-w-5xl">
      <header className="mb-6">
        <h1 className="text-2xl font-medium mb-2">Claude JSON Report </h1>
        <p className="text-gray-600 text-sm">
          This demo shows how Claude's text editor tool can make precise updates to a structured JSON report 
          using the text_editor_20250124 tool. Enter observations or assessment data below to update 
          the appropriate sections of the report.
        </p>
      </header>
      
      {/* Input form */}
      <form onSubmit={handleSubmit} className="mb-6">
        <div className="grid grid-cols-1 md:grid-cols-[1fr,auto] gap-4">
          <div>
            <Input
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
              placeholder="Enter observation or assessment data..."
              className="w-full mb-2"
              disabled={isUpdating}
            />
            
            {/* 
              Note: Consider installing @radix-ui/react-select and creating a Select component
              in src/components/ui/select.tsx for consistency with other UI components.
              Using native select for now.
            */}
            <div className="relative w-full">
              <select
                value={selectedSection}
                onChange={(e) => setSelectedSection(e.target.value)}
                disabled={isUpdating}
                className="w-full h-10 rounded-md border border-slate-200 bg-white px-3 py-2 text-sm appearance-none focus:outline-none focus:ring-2 focus:ring-slate-950 disabled:cursor-not-allowed disabled:opacity-50"
              >
                <option value="auto-detect">Auto-detect section</option>
                <optgroup label="Header">
                  <option value="header.reasonForReferral">Reason For Referral</option>
                  <option value="header.confidentialityStatement">Confidentiality Statement</option>
                </optgroup>
                <optgroup label="Background">
                  <option value="background.studentDemographicsAndBackground.educationalHistory">Educational History</option>
                  <option value="background.healthReport.medicalHistory">Medical History</option>
                  <option value="background.parentGuardianConcerns">Parent/Guardian Concerns</option>
                </optgroup>
                <optgroup label="Assessment Results">
                  <option value="assessmentResults.domains.receptive">Receptive Language</option>
                  <option value="assessmentResults.domains.expressive">Expressive Language</option>
                  <option value="assessmentResults.domains.pragmatic">Pragmatic Language</option>
                  <option value="assessmentResults.domains.articulation">Articulation</option>
                  <option value="assessmentResults.domains.voice">Voice</option>
                  <option value="assessmentResults.domains.fluency">Fluency</option>
                  <option value="assessmentResults.observations.classroomObservations">Classroom Observations</option>
                  <option value="assessmentResults.observations.playBasedInformalObservations">Play-Based Observations</option>
                </optgroup>
                <optgroup label="Conclusion">
                  <option value="conclusion.conclusion.summary">Conclusion Summary</option>
                  <option value="conclusion.recommendations.services">Service Recommendations</option>
                  <option value="conclusion.eligibility.californiaEdCode">Eligibility Determination</option>
                </optgroup>
              </select>
              <div className="absolute right-3 top-1/2 -translate-y-1/2 pointer-events-none">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  className="opacity-50"
                >
                  <path d="m6 9 6 6 6-6" />
                </svg>
              </div>
            </div>
          </div>
          
          <Button 
            type="submit" 
            disabled={isUpdating || !inputText.trim()}
            className="bg-purple-600 hover:bg-purple-700 text-white h-10"
          >
            {isUpdating ? (
              <>
                <Spinner className="h-4 w-4 mr-2" />
                Updating...
              </>
            ) : (
              'Update Report'
            )}
          </Button>
        </div>
        
        {error && (
          <div className="mt-2 p-2 bg-red-50 text-red-600 rounded-md text-sm">
            {error}
          </div>
        )}
        
        {success && (
          <div className="mt-2 p-2 bg-green-50 text-green-700 rounded-md text-sm">
            {success}
          </div>
        )}
      </form>
      
      {/* Report sections as cards */}
      <Card className="mb-6 border-0 shadow-sm">
        <CardHeader className="bg-white border-b flex flex-row justify-between items-center">
          <CardTitle className="text-xl font-medium">Speech-Language Report</CardTitle>
          <Button
            variant="outline"
            className="text-xs h-8"
            onClick={() => setShowJsonPreview(true)}
          >
            View JSON
          </Button>
        </CardHeader>
        <CardContent className="p-6">
          {/* Empty state */}
          {activeDomains.length === 0 && 
           Object.keys(report.assessmentResults.observations || {}).length === 0 && 
           !report.conclusion.conclusion.summary && 
           report.conclusion.recommendations.accommodations.length === 0 && (
            <div className="text-center py-10">
              <p className="text-gray-500 mb-2">No report sections available yet</p>
              <p className="text-gray-400 text-sm">Enter observations above to start building your report</p>
            </div>
          )}

          {/* Report sections */}
          <div className="space-y-4">
            {/* Section headers */}
            <div className="border-b pb-2 mb-4">
              <h2 className="text-xl font-semibold text-gray-800">Speech-Language Assessment Report</h2>
            </div>
            
            {/* Header Section */}
            <div className="mb-8">
              <h3 className="text-base font-semibold text-purple-700 mb-3 pb-1 border-b border-purple-200">Student Information</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                <Card className="border border-purple-100 shadow-sm bg-purple-50/30">
                  <CardHeader className="py-2 px-3 bg-purple-50">
                    <CardTitle className="text-sm font-medium text-purple-800">Demographics</CardTitle>
                  </CardHeader>
                  <CardContent className="p-3 text-xs">
                    <p><strong>Name:</strong> {report.header.studentInformation.firstName} {report.header.studentInformation.lastName}</p>
                    <p><strong>DOB:</strong> {report.header.studentInformation.DOB}</p>
                    <p><strong>Evaluation Date:</strong> {report.header.studentInformation.evaluationDate}</p>
                    <p><strong>Home Language:</strong> {report.header.studentInformation.homeLanguage}</p>
                  </CardContent>
                </Card>
                
                <Card className="border border-purple-100 shadow-sm bg-purple-50/30">
                  <CardHeader className="py-2 px-3 bg-purple-50">
                    <CardTitle className="text-sm font-medium text-purple-800">Referral Reason</CardTitle>
                  </CardHeader>
                  <CardContent className="p-3 text-xs">
                    <p>{report.header.reasonForReferral}</p>
                  </CardContent>
                </Card>
              </div>
            </div>
            
            {/* Background Section */}
            <div className="mb-8">
              <h3 className="text-base font-semibold text-blue-700 mb-3 pb-1 border-b border-blue-200">Background Information</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                <Card className="border border-blue-100 shadow-sm bg-blue-50/30">
                  <CardHeader className="py-2 px-3 bg-blue-50">
                    <CardTitle className="text-sm font-medium text-blue-800">Educational History</CardTitle>
                  </CardHeader>
                  <CardContent className="p-3 text-xs">
                    <p>{report.background.studentDemographicsAndBackground.educationalHistory}</p>
                  </CardContent>
                </Card>
                
                <Card className="border border-blue-100 shadow-sm bg-blue-50/30">
                  <CardHeader className="py-2 px-3 bg-blue-50">
                    <CardTitle className="text-sm font-medium text-blue-800">Health Information</CardTitle>
                  </CardHeader>
                  <CardContent className="p-3 text-xs">
                    <p><strong>Medical History:</strong> {report.background.healthReport.medicalHistory}</p>
                    <p><strong>Vision/Hearing:</strong> {report.background.healthReport.visionAndHearingScreening}</p>
                  </CardContent>
                </Card>
                
                <Card className="border border-blue-100 shadow-sm bg-blue-50/30">
                  <CardHeader className="py-2 px-3 bg-blue-50">
                    <CardTitle className="text-sm font-medium text-blue-800">Family Information</CardTitle>
                  </CardHeader>
                  <CardContent className="p-3 text-xs">
                    <p><strong>Structure:</strong> {report.background.familyHistory.familyStructure}</p>
                    <p><strong>Language Background:</strong> {report.background.familyHistory.languageAndCulturalBackground}</p>
                  </CardContent>
                </Card>
                
                <Card className="border border-blue-100 shadow-sm bg-blue-50/30">
                  <CardHeader className="py-2 px-3 bg-blue-50">
                    <CardTitle className="text-sm font-medium text-blue-800">Parent/Guardian Concerns</CardTitle>
                  </CardHeader>
                  <CardContent className="p-3 text-xs">
                    <p>{report.background.parentGuardianConcerns}</p>
                  </CardContent>
                </Card>
              </div>
            </div>
            
            {/* Assessment Results Section */}
            <div className="mb-8">
              <h3 className="text-base font-semibold text-green-700 mb-3 pb-1 border-b border-green-200">Assessment Results</h3>
              
              {/* Domain subsection */}
              {activeDomains.length > 0 && (
                <div>
                  <h4 className="text-sm font-medium text-green-800 mb-2">Language Domains</h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3 mb-4">
                    {activeDomains.map(domain => {
                      const domainData = report.assessmentResults.domains[domain];
                      const hasConcern = domainData.isConcern;
                      
                      return (
                        <Card 
                          key={domain} 
                          className={`border shadow-sm ${hasConcern 
                            ? 'border-amber-200 bg-amber-50/30' 
                            : 'border-green-100 bg-green-50/30'
                          }`}
                        >
                          <CardHeader className={`py-2 px-3 flex flex-row justify-between items-center ${hasConcern 
                              ? 'bg-amber-50' 
                              : 'bg-green-50'
                            }`}
                          >
                            <CardTitle className={`text-sm font-medium ${hasConcern 
                                ? 'text-amber-800' 
                                : 'text-green-800'
                              }`}
                            >
                              {domain.charAt(0).toUpperCase() + domain.slice(1)} Language
                            </CardTitle>
                            {domainData.isConcern !== undefined && (
                              <div className={`px-2 py-0.5 rounded-full text-xs font-medium ${
                                domainData.isConcern
                                  ? 'bg-amber-100 text-amber-800'
                                  : 'bg-green-100 text-green-800'
                              }`}>
                                {domainData.isConcern ? 'Area of Concern' : 'No Concern'}
                              </div>
                            )}
                          </CardHeader>
                          <CardContent className="p-3 text-xs">
                            {domainData.topicSentence && (
                              <div className="mb-2">
                                <p className="font-medium">{domainData.topicSentence}</p>
                              </div>
                            )}
                            
                            <div className="grid grid-cols-1 gap-2">
                              {domainData.strengths && domainData.strengths.length > 0 && (
                                <div>
                                  <h5 className="text-xs font-semibold mb-1 text-gray-600">Strengths</h5>
                                  <ul className="list-disc pl-4 space-y-0.5">
                                    {domainData.strengths.map((item, index) => (
                                      <li key={index} className="text-gray-800">{item}</li>
                                    ))}
                                  </ul>
                                </div>
                              )}
                              
                              {domainData.needs && domainData.needs.length > 0 && (
                                <div>
                                  <h5 className="text-xs font-semibold mb-1 text-gray-600">Needs</h5>
                                  <ul className="list-disc pl-4 space-y-0.5">
                                    {domainData.needs.map((item, index) => (
                                      <li key={index} className="text-gray-800">{item}</li>
                                    ))}
                                  </ul>
                                </div>
                              )}
                              
                              {domainData.impactStatement && (
                                <div>
                                  <h5 className="text-xs font-semibold mb-1 text-gray-600">Educational Impact</h5>
                                  <p className="text-gray-800">{domainData.impactStatement}</p>
                                </div>
                              )}
                            </div>
                          </CardContent>
                        </Card>
                      );
                    })}
                  </div>
                </div>
              )}
            
            {/* Observations subsection */}
            {Object.keys(report.assessmentResults.observations || {}).length > 0 && (
              <div className="mb-4">
                <h4 className="text-sm font-medium text-green-800 mb-2">Observations</h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                  {Object.entries(report.assessmentResults.observations).map(([obsKey, content]) => (
                    content && (
                      <Card key={obsKey} className="border border-green-100 shadow-sm bg-green-50/30">
                        <CardHeader className="py-2 px-3 bg-green-50">
                          <CardTitle className="text-sm font-medium text-green-800">
                            {obsKey.charAt(0).toUpperCase() + obsKey.slice(1).replace(/([A-Z])/g, ' $1')}
                          </CardTitle>
                        </CardHeader>
                        <CardContent className="p-3 text-xs">
                          <p>{content}</p>
                        </CardContent>
                      </Card>
                    )
                  ))}
                </div>
              </div>
            )}
            
            {/* Assessment Tools subsection */}
            {report.assessmentResults.assessmentProceduresAndTools?.assessmentToolsUsed?.length > 0 && (
              <div className="mb-4">
                <h4 className="text-sm font-medium text-green-800 mb-2">Assessment Tools</h4>
                <Card className="border border-green-100 shadow-sm bg-green-50/30 mb-3">
                  <CardHeader className="py-2 px-3 bg-green-50">
                    <CardTitle className="text-sm font-medium text-green-800">Methods Overview</CardTitle>
                  </CardHeader>
                  <CardContent className="p-3 text-xs">
                    <p>{report.assessmentResults.assessmentProceduresAndTools.overviewOfAssessmentMethods}</p>
                  </CardContent>
                </Card>
                
                <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                  {report.assessmentResults.assessmentProceduresAndTools.assessmentToolsUsed.map(toolId => (
                    <Card key={toolId} className="border border-green-100 shadow-sm bg-green-50/30">
                      <CardHeader className="py-2 px-3 bg-green-50">
                        <CardTitle className="text-sm font-medium text-green-800">{toolId.toUpperCase()}</CardTitle>
                      </CardHeader>
                      <CardContent className="p-3 text-xs">
                        <p className="text-green-800">Tool ID: {toolId}</p>
                      </CardContent>
                    </Card>
                    ))}
                  </div>
                </div>
              </div>
            )}
            
          </div>
          
          {/* Conclusion Section */}
          {report.conclusion && (
            <div className="mb-8">
              <h3 className="text-base font-semibold text-amber-700 mb-3 pb-1 border-b border-amber-200">Conclusion & Recommendations</h3>
              <div className="grid grid-cols-1 gap-3">
                {/* Eligibility subsection */}
                {report.conclusion.eligibility && (
                  <Card className="border border-amber-100 shadow-sm bg-amber-50/30">
                    <CardHeader className="py-2 px-3 bg-amber-50">
                      <CardTitle className="text-sm font-medium text-amber-800">Eligibility Determination</CardTitle>
                    </CardHeader>
                    <CardContent className="p-3 text-xs">
                      <p className="mb-2 font-medium">{report.conclusion.eligibility.californiaEdCode}</p>
                      
                      <h5 className="text-xs font-semibold mb-1 text-gray-600">Domain Eligibility</h5>
                      <div className="grid grid-cols-2 md:grid-cols-3 gap-2">
                        {Object.entries(report.conclusion.eligibility.domains).map(([domain, isEligible]) => (
                          <div key={domain} className="flex items-center gap-1 p-1 border rounded bg-white">
                            <div className={`w-3 h-3 rounded-full flex-shrink-0 ${
                              isEligible ? 'bg-green-500' : 'bg-gray-300'
                            }`} />
                            <div className="flex-1 font-medium text-[10px]">{domain.charAt(0).toUpperCase() + domain.slice(1)}</div>
                          </div>
                        ))}
                      </div>
                    </CardContent>
                  </Card>
                )}
                
                {/* Conclusion summary */}
                {report.conclusion.conclusion && report.conclusion.conclusion.summary && (
                  <Card className="border border-amber-100 shadow-sm bg-amber-50/30">
                    <CardHeader className="py-2 px-3 bg-amber-50">
                      <CardTitle className="text-sm font-medium text-amber-800">Summary</CardTitle>
                    </CardHeader>
                    <CardContent className="p-3 text-xs">
                      <p>{report.conclusion.conclusion.summary}</p>
                    </CardContent>
                  </Card>
                )}
                    
                    {/* Recommendations */}
                    {report.conclusion.recommendations && (
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                        {/* Services */}
                        <Card className="border border-amber-100 shadow-sm bg-amber-50/30">
                          <CardHeader className="py-2 px-3 bg-amber-50">
                            <CardTitle className="text-sm font-medium text-amber-800">Services</CardTitle>
                          </CardHeader>
                          <CardContent className="p-3 text-xs">
                            <table className="w-full">
                              <tbody>
                                <tr>
                                  <td className="font-medium pr-2">Type:</td>
                                  <td>{report.conclusion.recommendations.services.typeOfService}</td>
                                </tr>
                                <tr>
                                  <td className="font-medium pr-2">Frequency:</td>
                                  <td>{report.conclusion.recommendations.services.frequency}</td>
                                </tr>
                                <tr>
                                  <td className="font-medium pr-2">Setting:</td>
                                  <td>{report.conclusion.recommendations.services.setting}</td>
                                </tr>
                              </tbody>
                            </table>
                          </CardContent>
                        </Card>
                        
                        {/* Accommodations & Strategies */}
                        <Card className="border border-amber-100 shadow-sm bg-amber-50/30">
                          <CardHeader className="py-2 px-3 bg-amber-50">
                            <CardTitle className="text-sm font-medium text-amber-800">Accommodations & Strategies</CardTitle>
                          </CardHeader>
                          <CardContent className="p-3 text-xs">
                            {report.conclusion.recommendations.accommodations.length > 0 && (
                              <div className="mb-2">
                                <h5 className="text-xs font-semibold mb-1 text-gray-600">Accommodations</h5>
                                <ul className="list-disc pl-4 space-y-0.5">
                                  {report.conclusion.recommendations.accommodations.map((rec, index) => (
                                    <li key={index} className="text-gray-800">{rec}</li>
                                  ))}
                                </ul>
                              </div>
                            )}
                            
                            {report.conclusion.recommendations.facilitationStrategies.length > 0 && (
                              <div>
                                <h5 className="text-xs font-semibold mb-1 text-gray-600">Facilitation Strategies</h5>
                                <ul className="list-disc pl-4 space-y-0.5">
                                  {report.conclusion.recommendations.facilitationStrategies.map((strat, index) => (
                                    <li key={index} className="text-gray-800">{strat}</li>
                                  ))}
                                </ul>
                              </div>
                            )}
                          </CardContent>
                        </Card>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            )}
          </div>
        </CardContent>
      </Card>
      
      {/* JSON Preview Card (shown/hidden with state instead of dialog) */}
      {showJsonPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50" onClick={() => setShowJsonPreview(false)}>
          <div className="max-w-3xl w-full m-4" onClick={(e) => e.stopPropagation()}>
            <Card className="shadow-xl border-0">
              <CardHeader className="bg-white border-b flex flex-row justify-between items-center">
                <CardTitle className="text-lg font-medium">JSON Report Structure</CardTitle>
                <button 
                  onClick={() => setShowJsonPreview(false)}
                  className="p-1 rounded-full hover:bg-gray-100"
                >
                  <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                    <path d="M18 6L6 18M6 6l12 12" />
                  </svg>
                </button>
              </CardHeader>
              <CardContent className="p-4">
                <pre className="bg-gray-50 p-4 rounded text-sm font-mono overflow-auto max-h-[600px]">
                  {JSON.stringify(report, null, 2)}
                </pre>
              </CardContent>
              <CardFooter className="bg-gray-50 border-t py-2 flex justify-end">
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => setShowJsonPreview(false)}
                >
                  Close
                </Button>
              </CardFooter>
            </Card>
          </div>
        </div>
      )}
      
      {/* Tool Command Details */}
      {commandDetails && (
        <Card className="shadow-sm border-0 mt-6">
          <CardHeader className="bg-white border-b">
            <CardTitle className="text-lg font-medium">Tool Command Details</CardTitle>
          </CardHeader>
          <CardContent className="p-4">
            <dl className="grid grid-cols-[auto,1fr] gap-x-4 gap-y-2">
              <dt className="font-semibold">Command:</dt>
              <dd>{commandDetails.command}</dd>
              
              {commandDetails.command === 'update_key' && (
                <>
                  <dt className="font-semibold">Path:</dt>
                  <dd className="font-mono text-blue-600">{commandDetails.path}</dd>
                  
                  <dt className="font-semibold">Action:</dt>
                  <dd className="inline-block px-2 py-1 bg-purple-100 text-purple-800 rounded text-sm font-medium">
                    {commandDetails.action}
                  </dd>
                  
                  <dt className="font-semibold">Value:</dt>
                  <dd className="bg-gray-100 p-2 rounded text-sm font-mono overflow-auto whitespace-pre-wrap max-h-[200px]">
                    {JSON.stringify(commandDetails.value, null, 2)}
                  </dd>
                </>
              )}
              
              {commandDetails.command === 'str_replace' && (
                <>
                  <dt className="font-semibold">Old JSON:</dt>
                  <dd className="bg-gray-100 p-1 rounded text-sm font-mono overflow-auto whitespace-pre-wrap max-h-[200px]">
                    {truncateText(commandDetails.old_str, 500)}
                  </dd>
                  
                  <dt className="font-semibold">New JSON:</dt>
                  <dd className="bg-gray-100 p-1 rounded text-sm font-mono overflow-auto whitespace-pre-wrap max-h-[200px]">
                    {truncateText(commandDetails.new_str, 500)}
                  </dd>
                </>
              )}
              
              {commandDetails.command === 'insert' && (
                <>
                  <dt className="font-semibold">Position:</dt>
                  <dd>{commandDetails.position || 'end'}</dd>
                  
                  <dt className="font-semibold">Text:</dt>
                  <dd className="bg-gray-100 p-1 rounded text-sm font-mono overflow-auto whitespace-pre-wrap max-h-[200px]">
                    {truncateText(commandDetails.text, 500)}
                  </dd>
                </>
              )}
            </dl>
          </CardContent>
        </Card>
      )}
    </div>
  );
}