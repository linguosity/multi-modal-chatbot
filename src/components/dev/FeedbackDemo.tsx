'use client'

import React, { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { FieldHighlight } from '@/components/ui/FieldHighlight'
import { BadgeWrapper } from '@/components/ui/update-badge'
import { useFeedback, useFieldFeedback, useSaveFeedback, useAIFeedback } from '@/lib/context/FeedbackContext'
import { Sparkles, Save, Wand2, FileText } from 'lucide-react'

export function FeedbackDemo() {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    notes: ''
  })
  const [isProcessing, setIsProcessing] = useState(false)
  
  const { notifyFieldUpdate, notifySectionUpdate } = useFeedback()
  const notifyFieldChange = useFieldFeedback()
  const notifySave = useSaveFeedback()
  const notifyAI = useAIFeedback()

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }))
    
    // Demonstrate field-level feedback
    notifyFieldChange('demo-section', field, {
      showToast: false, // Don't show toast for every keystroke
      highlightFields: true
    })
  }

  const handleSave = async () => {
    setIsProcessing(true)
    
    // Simulate save operation
    await new Promise(resolve => setTimeout(resolve, 1000))
    
    // Show save feedback with undo option
    notifySave('Demo Form', formData.name, () => {
      setFormData({ name: '', email: '', notes: '' })
    })
    
    setIsProcessing(false)
  }

  const handleAIGenerate = async () => {
    setIsProcessing(true)
    
    // Simulate AI processing
    await new Promise(resolve => setTimeout(resolve, 2000))
    
    // Update form with AI-generated content
    const aiContent = {
      name: 'John Doe',
      email: 'john.doe@example.com',
      notes: 'This content was generated by AI based on your input parameters and contextual analysis.'
    }
    
    setFormData(aiContent)
    
    // Show AI feedback
    notifyAI('demo-section', ['name', 'email', 'notes'], {
      toastMessage: 'AI has generated content for all fields'
    })
    
    setIsProcessing(false)
  }

  const handleSectionUpdate = () => {
    // Simulate updating multiple fields at once
    const updates = {
      name: formData.name + ' (Updated)',
      email: formData.email || 'updated@example.com'
    }
    
    setFormData(prev => ({ ...prev, ...updates }))
    
    // Show section-level feedback
    notifySectionUpdate('demo-section', ['name', 'email'], {
      toastMessage: 'Section updated successfully'
    })
  }

  return (
    <div className="max-w-4xl mx-auto p-6 space-y-6">
      <div className="text-center space-y-2">
        <h1 className="text-3xl font-bold">Feedback System Demo</h1>
        <p className="text-gray-600">
          Demonstrating the three-layer feedback system: inline micro-interactions, persistent badges, and ephemeral confirmations
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Main Demo Form */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <FileText className="h-5 w-5" />
              Interactive Form Demo
            </CardTitle>
            <CardDescription>
              Try typing in the fields, saving, or using AI generation to see the feedback system in action
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="name">Name</Label>
              <FieldHighlight sectionId="demo-section" fieldPath="name">
                <Input
                  id="name"
                  value={formData.name}
                  onChange={(e) => handleInputChange('name', e.target.value)}
                  placeholder="Enter your name"
                />
              </FieldHighlight>
            </div>

            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <FieldHighlight sectionId="demo-section" fieldPath="email">
                <Input
                  id="email"
                  type="email"
                  value={formData.email}
                  onChange={(e) => handleInputChange('email', e.target.value)}
                  placeholder="Enter your email"
                />
              </FieldHighlight>
            </div>

            <div className="space-y-2">
              <Label htmlFor="notes">Notes</Label>
              <FieldHighlight sectionId="demo-section" fieldPath="notes">
                <textarea
                  id="notes"
                  value={formData.notes}
                  onChange={(e) => handleInputChange('notes', e.target.value)}
                  placeholder="Enter your notes"
                  className="w-full min-h-[100px] px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </FieldHighlight>
            </div>

            <div className="flex flex-wrap gap-2 pt-4">
              <Button 
                onClick={handleSave} 
                disabled={isProcessing}
                className="flex items-center gap-2"
              >
                <Save className="h-4 w-4" />
                {isProcessing ? 'Saving...' : 'Save Form'}
              </Button>
              
              <Button 
                onClick={handleAIGenerate} 
                disabled={isProcessing}
                variant="outline"
                className="flex items-center gap-2"
              >
                <Wand2 className="h-4 w-4" />
                {isProcessing ? 'Generating...' : 'AI Generate'}
              </Button>
              
              <Button 
                onClick={handleSectionUpdate} 
                disabled={isProcessing}
                variant="outline"
                className="flex items-center gap-2"
              >
                <Sparkles className="h-4 w-4" />
                Update Section
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* Badge Demo */}
        <Card>
          <CardHeader>
            <CardTitle>Badge System Demo</CardTitle>
            <CardDescription>
              Examples of persistent visual markers for different states
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-3">
              <div className="flex items-center justify-between p-3 border rounded-lg">
                <BadgeWrapper
                  badge={{ count: 3, type: 'updated', ariaLabel: 'Assessment Results (3 updates)' }}
                >
                  <span>Assessment Results</span>
                </BadgeWrapper>
                <span className="text-sm text-gray-500">3 recent updates</span>
              </div>

              <div className="flex items-center justify-between p-3 border rounded-lg">
                <BadgeWrapper
                  badge={{ type: 'completed', ariaLabel: 'Background Information (completed)' }}
                >
                  <span>Background Information</span>
                </BadgeWrapper>
                <span className="text-sm text-green-600">Completed</span>
              </div>

              <div className="flex items-center justify-between p-3 border rounded-lg">
                <BadgeWrapper
                  badge={{ count: 1, type: 'new', ariaLabel: 'Recommendations (1 new item)' }}
                >
                  <span>Recommendations</span>
                </BadgeWrapper>
                <span className="text-sm text-orange-600">1 new item</span>
              </div>

              <div className="flex items-center justify-between p-3 border rounded-lg">
                <span>No Updates Section</span>
                <span className="text-sm text-gray-400">No changes</span>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Instructions */}
      <Card>
        <CardHeader>
          <CardTitle>How to Test the Feedback System</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
            <div className="space-y-2">
              <h4 className="font-semibold text-blue-600">1. Inline Micro-Interactions</h4>
              <ul className="space-y-1 text-gray-600">
                <li>• Type in any field to see flash-to-fade highlight</li>
                <li>• Notice the 200ms flash followed by gentle fade</li>
                <li>• Sparkle indicators show recent AI updates</li>
                <li>• Click highlighted areas to dismiss</li>
              </ul>
            </div>
            
            <div className="space-y-2">
              <h4 className="font-semibold text-green-600">2. Persistent Badges</h4>
              <ul className="space-y-1 text-gray-600">
                <li>• Badges show update counts and states</li>
                <li>• Different colors for different types</li>
                <li>• Accessible with screen reader labels</li>
                <li>• Auto-hide when count reaches zero</li>
              </ul>
            </div>
            
            <div className="space-y-2">
              <h4 className="font-semibold text-purple-600">3. Toast Notifications</h4>
              <ul className="space-y-1 text-gray-600">
                <li>• Click "Save Form" for success toast</li>
                <li>• "AI Generate" shows completion toast</li>
                <li>• Auto-dismiss after 4 seconds</li>
                <li>• Undo actions available for saves</li>
              </ul>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}